
Carritov3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000862c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008740  08008740  00018740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008af4  08008af4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008af4  08008af4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001e0  08008cdc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08008cdc  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f588  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b2  00000000  00000000  0002f7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00031888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6c  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cfd  00000000  00000000  000334ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011df4  00000000  00000000  0004c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f278  00000000  00000000  0005df9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005538  00000000  00000000  000ed218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f2750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008724 	.word	0x08008724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008724 	.word	0x08008724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <Forward>:
 *      Author: Jorge
 */

#include "main.h"

void Forward(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); //izq atras
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <Forward+0x5c>)
 800103a:	f001 fdd3 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); //izq atras
 800103e:	2201      	movs	r2, #1
 8001040:	2102      	movs	r1, #2
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <Forward+0x5c>)
 8001044:	f001 fdce 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1); //derehca atras
 8001048:	2201      	movs	r2, #1
 800104a:	2104      	movs	r1, #4
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <Forward+0x5c>)
 800104e:	f001 fdc9 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0); //derecha atrasa
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <Forward+0x5c>)
 8001058:	f001 fdc4 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0); //derecha enfrente
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <Forward+0x5c>)
 8001064:	f001 fdbe 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); //derecha enfrente
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <Forward+0x60>)
 800106e:	f001 fdb9 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //izq enfrente
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <Forward+0x60>)
 8001078:	f001 fdb4 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // ezq enfrente
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <Forward+0x60>)
 8001082:	f001 fdaf 	bl	8002be4 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00

08001094 <RightTurn>:

void RightTurn(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <RightTurn+0x5c>)
 800109e:	f001 fda1 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2102      	movs	r1, #2
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <RightTurn+0x5c>)
 80010a8:	f001 fd9c 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <RightTurn+0x5c>)
 80010b2:	f001 fd97 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2108      	movs	r1, #8
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <RightTurn+0x5c>)
 80010bc:	f001 fd92 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	480a      	ldr	r0, [pc, #40]	; (80010f0 <RightTurn+0x5c>)
 80010c8:	f001 fd8c 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <RightTurn+0x60>)
 80010d2:	f001 fd87 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <RightTurn+0x60>)
 80010dc:	f001 fd82 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <RightTurn+0x60>)
 80010e6:	f001 fd7d 	bl	8002be4 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <Stop>:

void Stop(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <Stop+0x5c>)
 8001102:	f001 fd6f 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <Stop+0x5c>)
 800110c:	f001 fd6a 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2104      	movs	r1, #4
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <Stop+0x5c>)
 8001116:	f001 fd65 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <Stop+0x5c>)
 8001120:	f001 fd60 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <Stop+0x5c>)
 800112c:	f001 fd5a 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2108      	movs	r1, #8
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <Stop+0x60>)
 8001136:	f001 fd55 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2110      	movs	r1, #16
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <Stop+0x60>)
 8001140:	f001 fd50 	bl	8002be4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2120      	movs	r1, #32
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <Stop+0x60>)
 800114a:	f001 fd4b 	bl	8002be4 <HAL_GPIO_WritePin>


}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00

0800115c <PIDpwm_Init>:
 *      Author: eduar
 */
#include "PIDpwm.h"

//definicion de funciones
void PIDpwm_Init(PIDpwm_Controller *pid, float Kp, float Ti, float Td, float min_output, float max_output){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	601a      	str	r2, [r3, #0]
	pid->Ki = Kp*Ti;
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68b8      	ldr	r0, [r7, #8]
 8001174:	f7ff fd96 	bl	8000ca4 <__aeabi_fmul>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kp*Td;
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f7ff fd8e 	bl	8000ca4 <__aeabi_fmul>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]

	//inicializar variables tipo float
	pid->Sp = 0.0f;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
	pid->errorAnterior = 0.0f;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    pid->medicionSensor_Anterior = 0.0f;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
    //limites del PID
    pid->min_output = min_output;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	621a      	str	r2, [r3, #32]
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x75, 1, &check, 1, 100);
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <MPU_init+0x120>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	1d7b      	adds	r3, r7, #5
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2275      	movs	r2, #117	; 0x75
 80011e0:	4841      	ldr	r0, [pc, #260]	; (80012e8 <MPU_init+0x124>)
 80011e2:	f001 ff6d 	bl	80030c0 <HAL_I2C_Mem_Read>

	if(check == 104){
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	2b68      	cmp	r3, #104	; 0x68
 80011ea:	d177      	bne.n	80012dc <MPU_init+0x118>
		data = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x6B, 1, &data, 1, 100);
 80011f0:	4b3c      	ldr	r3, [pc, #240]	; (80012e4 <MPU_init+0x120>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b299      	uxth	r1, r3
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	226b      	movs	r2, #107	; 0x6b
 8001206:	4838      	ldr	r0, [pc, #224]	; (80012e8 <MPU_init+0x124>)
 8001208:	f001 fe60 	bl	8002ecc <HAL_I2C_Mem_Write>

		data = 0x07;
 800120c:	2307      	movs	r3, #7
 800120e:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x19, 1, &data, 1, 100);
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <MPU_init+0x120>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b299      	uxth	r1, r3
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	2219      	movs	r2, #25
 8001226:	4830      	ldr	r0, [pc, #192]	; (80012e8 <MPU_init+0x124>)
 8001228:	f001 fe50 	bl	8002ecc <HAL_I2C_Mem_Write>


		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MPU_init+0x120>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b299      	uxth	r1, r3
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	221c      	movs	r2, #28
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <MPU_init+0x124>)
 8001244:	f001 ff3c 	bl	80030c0 <HAL_I2C_Mem_Read>

		uint8_t precission_selector = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	71fb      	strb	r3, [r7, #7]
		 * 0 for +- 2
		 * 1 for +- 4
		 * 2 for +- 8
		 * 3 for +- 16
		 */
		data = (data & ~(0b11<<3));
 800124c:	793b      	ldrb	r3, [r7, #4]
 800124e:	f023 0318 	bic.w	r3, r3, #24
 8001252:	b2db      	uxtb	r3, r3
 8001254:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector << 3));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	b25a      	sxtb	r2, r3
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1C, 1, &data, 1, 100);
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MPU_init+0x120>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	221c      	movs	r2, #28
 800127e:	481a      	ldr	r0, [pc, #104]	; (80012e8 <MPU_init+0x124>)
 8001280:	f001 fe24 	bl	8002ecc <HAL_I2C_Mem_Write>


		HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x1B, 1, &data, 1, 100);
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MPU_init+0x120>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b299      	uxth	r1, r3
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	221b      	movs	r2, #27
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MPU_init+0x124>)
 800129c:	f001 ff10 	bl	80030c0 <HAL_I2C_Mem_Read>

		uint8_t precission_selector_gyro = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71bb      	strb	r3, [r7, #6]
		 * 0 for +- 250
		 * 1 for +- 4
		 * 2 for +- 8
		 * 3 for +- 16
		 */
		data = (data & ~(0b11<<3));
 80012a4:	793b      	ldrb	r3, [r7, #4]
 80012a6:	f023 0318 	bic.w	r3, r3, #24
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	713b      	strb	r3, [r7, #4]
		data = (data | (precission_selector_gyro << 3));
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1, IMU_ADDRESS, 0x1B, 1,&data, 1, 100);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MPU_init+0x120>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b299      	uxth	r1, r3
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	221b      	movs	r2, #27
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MPU_init+0x124>)
 80012d8:	f001 fdf8 	bl	8002ecc <HAL_I2C_Mem_Write>

	}

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200001fc 	.word	0x200001fc

080012ec <MPU_Read_gyro>:
	 accel_x = accel_x * 9.81;
	 accel_y = accel_y * 9.81;
	 accel_z = accel_z * 9.81;
	}

void MPU_Read_gyro(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16

	uint8_t gyro_raw_data[6];

	HAL_I2C_Mem_Read(&hi2c1, IMU_ADDRESS, 0x43, 1, gyro_raw_data, 6, 1000);
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <MPU_Read_gyro+0x110>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b299      	uxth	r1, r3
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2306      	movs	r3, #6
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2243      	movs	r2, #67	; 0x43
 800130a:	483d      	ldr	r0, [pc, #244]	; (8001400 <MPU_Read_gyro+0x114>)
 800130c:	f001 fed8 	bl	80030c0 <HAL_I2C_Mem_Read>

	float gyro_Precission = 250;
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <MPU_Read_gyro+0x118>)
 8001312:	60fb      	str	r3, [r7, #12]

	 gyro_x = (float)(((int16_t)(gyro_raw_data[0] << 8 | gyro_raw_data[1])) * gyro_Precission/32768);
 8001314:	793b      	ldrb	r3, [r7, #4]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc6a 	bl	8000bfc <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fcb9 	bl	8000ca4 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
 8001334:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd67 	bl	8000e0c <__aeabi_fdiv>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <MPU_Read_gyro+0x11c>)
 8001344:	601a      	str	r2, [r3, #0]
	 gyro_y = (float)(((int16_t)(gyro_raw_data[2] << 8 | gyro_raw_data[3])) * gyro_Precission/32768);
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc51 	bl	8000bfc <__aeabi_i2f>
 800135a:	4603      	mov	r3, r0
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fca0 	bl	8000ca4 <__aeabi_fmul>
 8001364:	4603      	mov	r3, r0
 8001366:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fd4e 	bl	8000e0c <__aeabi_fdiv>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <MPU_Read_gyro+0x120>)
 8001376:	601a      	str	r2, [r3, #0]
	 gyro_z = (float)(((int16_t)(gyro_raw_data[4] << 8 | gyro_raw_data[5])) * gyro_Precission/32768);
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	7a7b      	ldrb	r3, [r7, #9]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc38 	bl	8000bfc <__aeabi_i2f>
 800138c:	4603      	mov	r3, r0
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fc87 	bl	8000ca4 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd35 	bl	8000e0c <__aeabi_fdiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MPU_Read_gyro+0x124>)
 80013a8:	601a      	str	r2, [r3, #0]

	 gyro_x += Gyro_X_calibration;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MPU_Read_gyro+0x11c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <MPU_Read_gyro+0x128>)
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fb6d 	bl	8000a94 <__addsf3>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MPU_Read_gyro+0x11c>)
 80013c0:	601a      	str	r2, [r3, #0]
	 gyro_y += Gyro_Y_calibration;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MPU_Read_gyro+0x120>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <MPU_Read_gyro+0x12c>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb61 	bl	8000a94 <__addsf3>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MPU_Read_gyro+0x120>)
 80013d8:	601a      	str	r2, [r3, #0]
	 gyro_z += Gyro_Z_calibration;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MPU_Read_gyro+0x124>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <MPU_Read_gyro+0x130>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fb55 	bl	8000a94 <__addsf3>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MPU_Read_gyro+0x124>)
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000000 	.word	0x20000000
 8001400:	200001fc 	.word	0x200001fc
 8001404:	437a0000 	.word	0x437a0000
 8001408:	200003b8 	.word	0x200003b8
 800140c:	200003bc 	.word	0x200003bc
 8001410:	200003c0 	.word	0x200003c0
 8001414:	200003d0 	.word	0x200003d0
 8001418:	200003d4 	.word	0x200003d4
 800141c:	200003d8 	.word	0x200003d8

08001420 <Gyro_calibration>:


void Gyro_calibration(void){
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0

	uint16_t counter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81fb      	strh	r3, [r7, #14]
	uint32_t StartTime_cal = HAL_GetTick();
 800142a:	f001 f93f 	bl	80026ac <HAL_GetTick>
 800142e:	6078      	str	r0, [r7, #4]
	uint32_t ElapsedTime_cal = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]

	while(ElapsedTime_cal < 9000){
 8001434:	e02f      	b.n	8001496 <Gyro_calibration+0x76>

		MPU_Read_gyro();
 8001436:	f7ff ff59 	bl	80012ec <MPU_Read_gyro>

		GyroValuesx += gyro_x;
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <Gyro_calibration+0xf0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a35      	ldr	r2, [pc, #212]	; (8001514 <Gyro_calibration+0xf4>)
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fb25 	bl	8000a94 <__addsf3>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <Gyro_calibration+0xf0>)
 8001450:	601a      	str	r2, [r3, #0]
		GyroValuesy += gyro_y;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <Gyro_calibration+0xf8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <Gyro_calibration+0xfc>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fb19 	bl	8000a94 <__addsf3>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <Gyro_calibration+0xf8>)
 8001468:	601a      	str	r2, [r3, #0]
		GyroValuesz += gyro_z;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <Gyro_calibration+0x100>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <Gyro_calibration+0x104>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb0d 	bl	8000a94 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <Gyro_calibration+0x100>)
 8001480:	601a      	str	r2, [r3, #0]

		counter++;
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	3301      	adds	r3, #1
 8001486:	81fb      	strh	r3, [r7, #14]

		uint32_t CurrentTime_cal = HAL_GetTick();
 8001488:	f001 f910 	bl	80026ac <HAL_GetTick>
 800148c:	6038      	str	r0, [r7, #0]
		ElapsedTime_cal = CurrentTime_cal - StartTime_cal;
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	60bb      	str	r3, [r7, #8]
	while(ElapsedTime_cal < 9000){
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f242 3227 	movw	r2, #8999	; 0x2327
 800149c:	4293      	cmp	r3, r2
 800149e:	d9ca      	bls.n	8001436 <Gyro_calibration+0x16>
	}

	Gyro_X_calibration = -1 * GyroValuesx/counter;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <Gyro_calibration+0xf0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fba6 	bl	8000bfc <__aeabi_i2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fca9 	bl	8000e0c <__aeabi_fdiv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <Gyro_calibration+0x108>)
 80014c0:	601a      	str	r2, [r3, #0]
	Gyro_Y_calibration = -1 * GyroValuesy/counter;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <Gyro_calibration+0xf8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fb95 	bl	8000bfc <__aeabi_i2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc98 	bl	8000e0c <__aeabi_fdiv>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <Gyro_calibration+0x10c>)
 80014e2:	601a      	str	r2, [r3, #0]
	Gyro_Z_calibration = -1 * GyroValuesz/counter;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <Gyro_calibration+0x100>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fb84 	bl	8000bfc <__aeabi_i2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff fc87 	bl	8000e0c <__aeabi_fdiv>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Gyro_calibration+0x110>)
 8001504:	601a      	str	r2, [r3, #0]

}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	200003c4 	.word	0x200003c4
 8001514:	200003b8 	.word	0x200003b8
 8001518:	200003c8 	.word	0x200003c8
 800151c:	200003bc 	.word	0x200003bc
 8001520:	200003cc 	.word	0x200003cc
 8001524:	200003c0 	.word	0x200003c0
 8001528:	200003d0 	.word	0x200003d0
 800152c:	200003d4 	.word	0x200003d4
 8001530:	200003d8 	.word	0x200003d8

08001534 <MPU_GetYaw>:

void MPU_GetYaw(uint8_t elapsed){
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]

	yawangle = alfa * prev_yaw + (1-alfa) * yawangle_new;

	prev_yaw = yawangle_new;
*/
	uint8_t alfa = 0.99;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	filteredYaw = alfa*(filteredYaw + gyro_z * elapsed/1000) + (1-alfa)*YawMag;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb59 	bl	8000bfc <__aeabi_i2f>
 800154a:	4604      	mov	r4, r0
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fb54 	bl	8000bfc <__aeabi_i2f>
 8001554:	4602      	mov	r2, r0
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MPU_GetYaw+0x8c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4610      	mov	r0, r2
 800155e:	f7ff fba1 	bl	8000ca4 <__aeabi_fmul>
 8001562:	4603      	mov	r3, r0
 8001564:	4917      	ldr	r1, [pc, #92]	; (80015c4 <MPU_GetYaw+0x90>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fc50 	bl	8000e0c <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MPU_GetYaw+0x94>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f7ff fa8c 	bl	8000a94 <__addsf3>
 800157c:	4603      	mov	r3, r0
 800157e:	4619      	mov	r1, r3
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fb8f 	bl	8000ca4 <__aeabi_fmul>
 8001586:	4603      	mov	r3, r0
 8001588:	461c      	mov	r4, r3
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f1c3 0301 	rsb	r3, r3, #1
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fb33 	bl	8000bfc <__aeabi_i2f>
 8001596:	4602      	mov	r2, r0
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MPU_GetYaw+0x98>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff fb80 	bl	8000ca4 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fa73 	bl	8000a94 <__addsf3>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <MPU_GetYaw+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	200003c0 	.word	0x200003c0
 80015c4:	447a0000 	.word	0x447a0000
 80015c8:	200003e0 	.word	0x200003e0
 80015cc:	2000044c 	.word	0x2000044c

080015d0 <Mag_init>:

void Mag_init(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af04      	add	r7, sp, #16

	 HAL_I2C_Mem_Write(&hi2c1, 0x1A, 0x08,1, &array[0], 1, 100);
 80015d6:	2364      	movs	r3, #100	; 0x64
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	2301      	movs	r3, #1
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <Mag_init+0x3c>)
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2208      	movs	r2, #8
 80015e6:	211a      	movs	r1, #26
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <Mag_init+0x40>)
 80015ea:	f001 fc6f 	bl	8002ecc <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, 0x1A, 0x09,1, &array[1], 1, 100);
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2301      	movs	r3, #1
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <Mag_init+0x44>)
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	2209      	movs	r2, #9
 80015fe:	211a      	movs	r1, #26
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <Mag_init+0x40>)
 8001602:	f001 fc63 	bl	8002ecc <HAL_I2C_Mem_Write>
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000008 	.word	0x20000008
 8001610:	200001fc 	.word	0x200001fc
 8001614:	20000009 	.word	0x20000009

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0b6      	sub	sp, #216	; 0xd8
 800161c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

char rpmdata[100] = {0};
 800161e:	2300      	movs	r3, #0
 8001620:	64bb      	str	r3, [r7, #72]	; 0x48
 8001622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001626:	2260      	movs	r2, #96	; 0x60
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f004 ff91 	bl	8006552 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f000 ffe4 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f9ba 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f000 fbd6 	bl	8001de8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800163c:	f000 fa18 	bl	8001a70 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001640:	f000 fae0 	bl	8001c04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001644:	f000 fba6 	bl	8001d94 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001648:	f000 fb56 	bl	8001cf8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800164c:	f000 fa8e 	bl	8001b6c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001650:	f000 fa3c 	bl	8001acc <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001654:	f000 f9ef 	bl	8001a36 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, IMU_ADDRESS, 10, 100);
 8001658:	4b77      	ldr	r3, [pc, #476]	; (8001838 <main+0x220>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b299      	uxth	r1, r3
 800165e:	2364      	movs	r3, #100	; 0x64
 8001660:	220a      	movs	r2, #10
 8001662:	4876      	ldr	r0, [pc, #472]	; (800183c <main+0x224>)
 8001664:	f001 ff94 	bl	8003590 <HAL_I2C_IsDeviceReady>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  if(ret == HAL_OK){
 800166e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001672:	2b00      	cmp	r3, #0
 8001674:	d117      	bne.n	80016a6 <main+0x8e>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	4870      	ldr	r0, [pc, #448]	; (8001840 <main+0x228>)
 800167e:	f001 fab1 	bl	8002be4 <HAL_GPIO_WritePin>
	  char transmission_buffer[17];
	  uint8_t transmission_size = sprintf(transmission_buffer,"Device connected \n");
 8001682:	463b      	mov	r3, r7
 8001684:	496f      	ldr	r1, [pc, #444]	; (8001844 <main+0x22c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f004 ff00 	bl	800648c <siprintf>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

	  HAL_UART_Transmit(&huart1,&transmission_buffer,transmission_size, 500);
 8001692:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8001696:	b29a      	uxth	r2, r3
 8001698:	4639      	mov	r1, r7
 800169a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169e:	486a      	ldr	r0, [pc, #424]	; (8001848 <main+0x230>)
 80016a0:	f003 ffc2 	bl	8005628 <HAL_UART_Transmit>
 80016a4:	e005      	b.n	80016b2 <main+0x9a>
  }
  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	4864      	ldr	r0, [pc, #400]	; (8001840 <main+0x228>)
 80016ae:	f001 fa99 	bl	8002be4 <HAL_GPIO_WritePin>
  }

  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, 0x1A, 10, 1000);
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	220a      	movs	r2, #10
 80016b8:	211a      	movs	r1, #26
 80016ba:	4860      	ldr	r0, [pc, #384]	; (800183c <main+0x224>)
 80016bc:	f001 ff68 	bl	8003590 <HAL_I2C_IsDeviceReady>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9

  Mag_init();
 80016c6:	f7ff ff83 	bl	80015d0 <Mag_init>
  MPU_init();
 80016ca:	f7ff fd7b 	bl	80011c4 <MPU_init>

  Gyro_calibration();
 80016ce:	f7ff fea7 	bl	8001420 <Gyro_calibration>

 // HAL_TIM_Base_Start_IT(&htim4);
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016d2:	2100      	movs	r1, #0
 80016d4:	485d      	ldr	r0, [pc, #372]	; (800184c <main+0x234>)
 80016d6:	f003 f8eb 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016da:	2104      	movs	r1, #4
 80016dc:	485b      	ldr	r0, [pc, #364]	; (800184c <main+0x234>)
 80016de:	f003 f8e7 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016e2:	2108      	movs	r1, #8
 80016e4:	4859      	ldr	r0, [pc, #356]	; (800184c <main+0x234>)
 80016e6:	f003 f8e3 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80016ea:	210c      	movs	r1, #12
 80016ec:	4857      	ldr	r0, [pc, #348]	; (800184c <main+0x234>)
 80016ee:	f003 f8df 	bl	80048b0 <HAL_TIM_PWM_Start>

  uint32_t start_time, elapsed_time, current_time;
  uint32_t start_time2,elapsed_time2, current_time2;
  uint32_t Time = HAL_GetTick();
 80016f2:	f000 ffdb 	bl	80026ac <HAL_GetTick>
 80016f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4



 char Dats[50];

 PIDpwm_Init(&pidMotor_lf, 1.83012063f, 7.53971571f, 0.0f, 80.0f, 400.0f);
 80016fa:	4b55      	ldr	r3, [pc, #340]	; (8001850 <main+0x238>)
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	4b55      	ldr	r3, [pc, #340]	; (8001854 <main+0x23c>)
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	4a54      	ldr	r2, [pc, #336]	; (8001858 <main+0x240>)
 8001708:	4954      	ldr	r1, [pc, #336]	; (800185c <main+0x244>)
 800170a:	4855      	ldr	r0, [pc, #340]	; (8001860 <main+0x248>)
 800170c:	f7ff fd26 	bl	800115c <PIDpwm_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &Commands, 3, 100);
 8001710:	2364      	movs	r3, #100	; 0x64
 8001712:	2203      	movs	r2, #3
 8001714:	4953      	ldr	r1, [pc, #332]	; (8001864 <main+0x24c>)
 8001716:	484c      	ldr	r0, [pc, #304]	; (8001848 <main+0x230>)
 8001718:	f004 f809 	bl	800572e <HAL_UART_Receive>
	  }
*/
	  //uint32_t CurrentTime = HAL_GetTick();
	  //ElapsedTime = CurrentTime - StartTime;

	  switch(state){
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <main+0x250>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <main+0x112>
 8001724:	2b02      	cmp	r3, #2
 8001726:	d027      	beq.n	8001778 <main+0x160>


			  break;

		  default:
			  break;
 8001728:	e049      	b.n	80017be <main+0x1a6>
			  pwm_lf = 3200;
 800172a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800172e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			  pwm_lb = 3200;
 8001732:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001736:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
			  pwm_rb = 3200;
 800173a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800173e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
			  pwm_rf = 3200;
 8001742:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001746:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <main+0x234>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <main+0x234>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <main+0x234>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <main+0x234>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
			 Forward();
 8001772:	f7ff fc5d 	bl	8001030 <Forward>
			  break;
 8001776:	e022      	b.n	80017be <main+0x1a6>
			  pwm_lb = 100;
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
			  pwm_rb = 100;
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
			  pwm_rf = 100;
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			  pwm_lf = 100;
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			 RightTurn();
 8001790:	f7ff fc80 	bl	8001094 <RightTurn>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_rf);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <main+0x234>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lf);
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <main+0x234>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_lb);
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <main+0x234>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_rb);
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <main+0x234>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
			  break;
 80017bc:	bf00      	nop



  }
  */
	  if(state == 0){
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <main+0x250>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <main+0x1e2>
		  if(Commands[0] == 'S'){
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <main+0x24c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b53      	cmp	r3, #83	; 0x53
 80017cc:	f040 8084 	bne.w	80018d8 <main+0x2c0>
			  start_time = HAL_GetTick();
 80017d0:	f000 ff6c 	bl	80026ac <HAL_GetTick>
 80017d4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			  elapsed_time = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			  start_time2 = HAL_GetTick();
 80017de:	f000 ff65 	bl	80026ac <HAL_GetTick>
 80017e2:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			  elapsed_time2 = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  state++;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <main+0x250>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <main+0x250>)
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e06e      	b.n	80018d8 <main+0x2c0>
		  }
	  }
	  else if(state == 1){
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <main+0x250>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d134      	bne.n	800186c <main+0x254>
		  if(elapsed_time > 5000){
 8001802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d964      	bls.n	80018d8 <main+0x2c0>
			  start_time = HAL_GetTick();
 800180e:	f000 ff4d 	bl	80026ac <HAL_GetTick>
 8001812:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			  elapsed_time = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			  start_time2 = HAL_GetTick();
 800181c:	f000 ff46 	bl	80026ac <HAL_GetTick>
 8001820:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			  elapsed_time2 = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  state++;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <main+0x250>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <main+0x250>)
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e04f      	b.n	80018d8 <main+0x2c0>
 8001838:	20000000 	.word	0x20000000
 800183c:	200001fc 	.word	0x200001fc
 8001840:	40011000 	.word	0x40011000
 8001844:	08008740 	.word	0x08008740
 8001848:	20000370 	.word	0x20000370
 800184c:	200002e0 	.word	0x200002e0
 8001850:	43c80000 	.word	0x43c80000
 8001854:	42a00000 	.word	0x42a00000
 8001858:	40f1455a 	.word	0x40f1455a
 800185c:	3fea4165 	.word	0x3fea4165
 8001860:	200003f0 	.word	0x200003f0
 8001864:	20000414 	.word	0x20000414
 8001868:	200003e4 	.word	0x200003e4
		  }
	  }
	  else if(state == 2){
 800186c:	4b42      	ldr	r3, [pc, #264]	; (8001978 <main+0x360>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d131      	bne.n	80018d8 <main+0x2c0>
		  if(yawangle <= yaw_reference){
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <main+0x364>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a41      	ldr	r2, [pc, #260]	; (8001980 <main+0x368>)
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fbb8 	bl	8000ff4 <__aeabi_fcmple>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d026      	beq.n	80018d8 <main+0x2c0>
			  yaw_reference += -90 + (-yawangle + yaw_reference);
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <main+0x368>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3b      	ldr	r2, [pc, #236]	; (800197c <main+0x364>)
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f8fb 	bl	8000a90 <__aeabi_fsub>
 800189a:	4603      	mov	r3, r0
 800189c:	4939      	ldr	r1, [pc, #228]	; (8001984 <main+0x36c>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f8f6 	bl	8000a90 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <main+0x368>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff f8f0 	bl	8000a94 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <main+0x368>)
 80018ba:	601a      	str	r2, [r3, #0]
			  	//yaw_reference += -90;
				Stop();
 80018bc:	f7ff fc1c 	bl	80010f8 <Stop>
				Gyro_calibration();
 80018c0:	f7ff fdae 	bl	8001420 <Gyro_calibration>
				start_time = HAL_GetTick();
 80018c4:	f000 fef2 	bl	80026ac <HAL_GetTick>
 80018c8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
				elapsed_time = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			  	state = 1;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <main+0x360>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(Commands[0] == 'E'){
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <main+0x370>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b45      	cmp	r3, #69	; 0x45
 80018de:	d110      	bne.n	8001902 <main+0x2ea>
		  state = 0;
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <main+0x360>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

		  pwm_rf = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
		  pwm_lf = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
		  pwm_rb = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		  pwm_lb = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
		  Stop();
 80018fe:	f7ff fbfb 	bl	80010f8 <Stop>
	  }


	  if(flag == 1){
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <main+0x374>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d112      	bne.n	8001930 <main+0x318>
		  TiempoInterrupt1 = HAL_GetTick();
 800190a:	f000 fecf 	bl	80026ac <HAL_GetTick>
 800190e:	4603      	mov	r3, r0
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <main+0x378>)
 8001912:	6013      	str	r3, [r2, #0]
		  Intervalo = TiempoInterrupt1 - TiempoInterrupt2;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <main+0x378>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <main+0x37c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <main+0x380>)
 8001920:	6013      	str	r3, [r2, #0]
		  TiempoInterrupt2 = TiempoInterrupt1;
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <main+0x378>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <main+0x37c>)
 8001928:	6013      	str	r3, [r2, #0]
		  flag = 0;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <main+0x374>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		  //rpm_lb = 1000 * 60 / (20*Intervalo);


	  }

	  rpm_lf = 1000 * 60 / (20*Intervalo);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <main+0x380>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	461a      	mov	r2, r3
 800193e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001942:	fbb3 f3f2 	udiv	r3, r3, r2
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <main+0x384>)
 800194a:	801a      	strh	r2, [r3, #0]
	  uint16_t Datas = sprintf(Dats,"%u,%lu\n",Intervalo, pulses_lf);
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <main+0x380>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <main+0x388>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f107 0014 	add.w	r0, r7, #20
 800195a:	4912      	ldr	r1, [pc, #72]	; (80019a4 <main+0x38c>)
 800195c:	f004 fd96 	bl	800648c <siprintf>
 8001960:	4603      	mov	r3, r0
 8001962:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  HAL_UART_Transmit(&huart1, &Dats, Datas, 10);
 8001966:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800196a:	f107 0114 	add.w	r1, r7, #20
 800196e:	230a      	movs	r3, #10
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <main+0x390>)
 8001972:	f003 fe59 	bl	8005628 <HAL_UART_Transmit>
  {
 8001976:	e6cb      	b.n	8001710 <main+0xf8>
 8001978:	200003e4 	.word	0x200003e4
 800197c:	200003dc 	.word	0x200003dc
 8001980:	20000004 	.word	0x20000004
 8001984:	42b40000 	.word	0x42b40000
 8001988:	20000414 	.word	0x20000414
 800198c:	20000448 	.word	0x20000448
 8001990:	20000418 	.word	0x20000418
 8001994:	2000041c 	.word	0x2000041c
 8001998:	20000420 	.word	0x20000420
 800199c:	200003e8 	.word	0x200003e8
 80019a0:	200003e5 	.word	0x200003e5
 80019a4:	08008754 	.word	0x08008754
 80019a8:	20000370 	.word	0x20000370

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	; 0x40
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2228      	movs	r2, #40	; 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 fdc9 	bl	8006552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019dc:	2301      	movs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 faad 	bl	8003f54 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a00:	f000 fb50 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fd1a 	bl	8004458 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a2a:	f000 fb3b 	bl	80020a4 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3740      	adds	r7, #64	; 0x40
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2028      	movs	r0, #40	; 0x28
 8001a40:	f000 ff15 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a44:	2028      	movs	r0, #40	; 0x28
 8001a46:	f000 ff2e 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201e      	movs	r0, #30
 8001a50:	f000 ff0d 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a54:	201e      	movs	r0, #30
 8001a56:	f000 ff26 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	201c      	movs	r0, #28
 8001a60:	f000 ff05 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a64:	201c      	movs	r0, #28
 8001a66:	f000 ff1e 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <MX_I2C1_Init+0x54>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_I2C1_Init+0x58>)
 8001a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_I2C1_Init+0x50>)
 8001aae:	f001 f8c9 	bl	8002c44 <HAL_I2C_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ab8:	f000 faf4 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001fc 	.word	0x200001fc
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	000186a0 	.word	0x000186a0

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <MX_TIM1_Init+0x9c>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b16:	f002 fe2d 	bl	8004774 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b20:	f000 fac0 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b32:	f003 f929 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b3c:	f000 fab2 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_TIM1_Init+0x98>)
 8001b4e:	f003 fcab 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b58:	f000 faa4 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000250 	.word	0x20000250
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b92:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150 - 1;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001ba0:	2295      	movs	r2, #149	; 0x95
 8001ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bb2:	f002 fddf 	bl	8004774 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bbc:	f000 fa72 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bce:	f003 f8db 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 fa64 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bea:	f003 fc5d 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 fa56 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000298 	.word	0x20000298

08001c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c28:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <MX_TIM3_Init+0xf0>)
 8001c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c4e:	f002 fde0 	bl	8004812 <HAL_TIM_PWM_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c58:	f000 fa24 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4821      	ldr	r0, [pc, #132]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c6c:	f003 fc1c 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c76:	f000 fa15 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7a:	2360      	movs	r3, #96	; 0x60
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001c92:	f002 ffb7 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c9c:	f000 fa02 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001ca8:	f002 ffac 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cb2:	f000 f9f7 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001cbe:	f002 ffa1 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001cc8:	f000 f9ec 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001cd4:	f002 ff96 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001cde:	f000 f9e1 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM3_Init+0xec>)
 8001ce4:	f000 fab6 	bl	8002254 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002e0 	.word	0x200002e0
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <MX_TIM4_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d1c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d2a:	2263      	movs	r2, #99	; 0x63
 8001d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d3a:	4814      	ldr	r0, [pc, #80]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d3c:	f002 fd1a 	bl	8004774 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d46:	f000 f9ad 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d58:	f003 f816 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f000 f99f 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_TIM4_Init+0x94>)
 8001d74:	f003 fb98 	bl	80054a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d7e:	f000 f991 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000328 	.word	0x20000328
 8001d90:	40000800 	.word	0x40000800

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART1_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f003 fbdc 	bl	8005588 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f965 	bl	80020a4 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000370 	.word	0x20000370
 8001de4:	40013800 	.word	0x40013800

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <MX_GPIO_Init+0x12c>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e62:	482d      	ldr	r0, [pc, #180]	; (8001f18 <MX_GPIO_Init+0x130>)
 8001e64:	f000 febe 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f248 010f 	movw	r1, #32783	; 0x800f
 8001e6e:	482b      	ldr	r0, [pc, #172]	; (8001f1c <MX_GPIO_Init+0x134>)
 8001e70:	f000 feb8 	bl	8002be4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2138      	movs	r1, #56	; 0x38
 8001e78:	4829      	ldr	r0, [pc, #164]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001e7a:	f000 feb3 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	4820      	ldr	r0, [pc, #128]	; (8001f18 <MX_GPIO_Init+0x130>)
 8001e98:	f000 fd20 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e9c:	f248 030f 	movw	r3, #32783	; 0x800f
 8001ea0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4819      	ldr	r0, [pc, #100]	; (8001f1c <MX_GPIO_Init+0x134>)
 8001eb6:	f000 fd11 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_GPIO_Init+0x13c>)
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001ed0:	f000 fd04 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_GPIO_Init+0x134>)
 8001eea:	f000 fcf7 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001eee:	2338      	movs	r3, #56	; 0x38
 8001ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4619      	mov	r1, r3
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_GPIO_Init+0x138>)
 8001f06:	f000 fce9 	bl	80028dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40010800 	.word	0x40010800
 8001f20:	40010c00 	.word	0x40010c00
 8001f24:	10110000 	.word	0x10110000

08001f28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
		  */

	}


	if(htim -> Instance == TIM4){
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d104      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x1c>

		MPU_GetYaw(10);
 8001f3a:	200a      	movs	r0, #10
 8001f3c:	f7ff fafa 	bl	8001534 <MPU_GetYaw>
		MPU_Read_gyro();
 8001f40:	f7ff f9d4 	bl	80012ec <MPU_Read_gyro>
	}

}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40000800 	.word	0x40000800

08001f50 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == GPIO_PIN_14){
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f60:	d11f      	bne.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x52>
	  //Right front wheel

	  flag = 1;
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_GPIO_EXTI_Callback+0x108>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
	  pulses_lf++;
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001f74:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_GPIO_EXTI_Callback+0x110>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_GPIO_EXTI_Callback+0x110>)
 8001f80:	701a      	strb	r2, [r3, #0]
	  TiempoInterrupt1 = HAL_GetTick();
 8001f82:	f000 fb93 	bl	80026ac <HAL_GetTick>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a36      	ldr	r2, [pc, #216]	; (8002064 <HAL_GPIO_EXTI_Callback+0x114>)
 8001f8a:	6013      	str	r3, [r2, #0]
	  Intervalo = TiempoInterrupt1 - TiempoInterrupt2;
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_GPIO_EXTI_Callback+0x114>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_GPIO_EXTI_Callback+0x118>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	4a35      	ldr	r2, [pc, #212]	; (800206c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001f98:	6013      	str	r3, [r2, #0]
	  TiempoInterrupt2 = TiempoInterrupt1;
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HAL_GPIO_EXTI_Callback+0x114>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fa0:	6013      	str	r3, [r2, #0]


  }
  if(GPIO_Pin == GPIO_PIN_15){
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa8:	d118      	bne.n	8001fdc <HAL_GPIO_EXTI_Callback+0x8c>
	  //Left front wheel

	  pulses_lf++;
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001fb6:	701a      	strb	r2, [r3, #0]
	  current_tick_rf++;
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_GPIO_EXTI_Callback+0x110>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_GPIO_EXTI_Callback+0x110>)
 8001fc2:	701a      	strb	r2, [r3, #0]
	  TiempoInterrupt3 = HAL_GetTick();
 8001fc4:	f000 fb72 	bl	80026ac <HAL_GetTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_GPIO_EXTI_Callback+0x120>)
 8001fcc:	6013      	str	r3, [r2, #0]
	 // Intervalo2 = TiempoInterrupt3 - TiempoInterrupt4;
	  Intervalo2 = 11;
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_GPIO_EXTI_Callback+0x124>)
 8001fd0:	220b      	movs	r2, #11
 8001fd2:	601a      	str	r2, [r3, #0]
	  TiempoInterrupt4 = TiempoInterrupt3;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_GPIO_EXTI_Callback+0x120>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_GPIO_EXTI_Callback+0x128>)
 8001fda:	6013      	str	r3, [r2, #0]


  }
  if(GPIO_Pin == GPIO_PIN_13){
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe2:	d118      	bne.n	8002016 <HAL_GPIO_EXTI_Callback+0xc6>
	  //Right back wheel
	  pulses_rb++;
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001ff0:	701a      	strb	r2, [r3, #0]
	  current_tick_rb++;
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_EXTI_Callback+0x130>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_GPIO_EXTI_Callback+0x130>)
 8001ffc:	701a      	strb	r2, [r3, #0]
	  TiempoInterrupt5 = HAL_GetTick();
 8001ffe:	f000 fb55 	bl	80026ac <HAL_GetTick>
 8002002:	4603      	mov	r3, r0
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_GPIO_EXTI_Callback+0x134>)
 8002006:	6013      	str	r3, [r2, #0]
	  //Intervalo3 = TiempoInterrupt5 - TiempoInterrupt6;
	  Intervalo3 = 12;
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_GPIO_EXTI_Callback+0x138>)
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
	  TiempoInterrupt6 = TiempoInterrupt5;
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_GPIO_EXTI_Callback+0x134>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_GPIO_EXTI_Callback+0x13c>)
 8002014:	6013      	str	r3, [r2, #0]


  }
  if(GPIO_Pin == GPIO_PIN_12){
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d118      	bne.n	8002050 <HAL_GPIO_EXTI_Callback+0x100>
	  //Left back wheel
	  pulses_lb++;
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_GPIO_EXTI_Callback+0x140>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_GPIO_EXTI_Callback+0x140>)
 800202a:	701a      	strb	r2, [r3, #0]
	  current_tick_lb++;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_GPIO_EXTI_Callback+0x144>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_GPIO_EXTI_Callback+0x144>)
 8002036:	701a      	strb	r2, [r3, #0]
	  TiempoInterrupt7 = HAL_GetTick();
 8002038:	f000 fb38 	bl	80026ac <HAL_GetTick>
 800203c:	4603      	mov	r3, r0
 800203e:	4a16      	ldr	r2, [pc, #88]	; (8002098 <HAL_GPIO_EXTI_Callback+0x148>)
 8002040:	6013      	str	r3, [r2, #0]
	  //Intervalo4 = TiempoInterrupt7 - TiempoInterrupt8;
	  Intervalo4 = 13;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_GPIO_EXTI_Callback+0x14c>)
 8002044:	220d      	movs	r2, #13
 8002046:	601a      	str	r2, [r3, #0]
	  TiempoInterrupt8 = TiempoInterrupt7;
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_GPIO_EXTI_Callback+0x148>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x150>)
 800204e:	6013      	str	r3, [r2, #0]

  }
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000448 	.word	0x20000448
 800205c:	200003e5 	.word	0x200003e5
 8002060:	200003ea 	.word	0x200003ea
 8002064:	20000418 	.word	0x20000418
 8002068:	2000041c 	.word	0x2000041c
 800206c:	20000420 	.word	0x20000420
 8002070:	20000424 	.word	0x20000424
 8002074:	2000042c 	.word	0x2000042c
 8002078:	20000428 	.word	0x20000428
 800207c:	200003e6 	.word	0x200003e6
 8002080:	200003eb 	.word	0x200003eb
 8002084:	20000430 	.word	0x20000430
 8002088:	20000438 	.word	0x20000438
 800208c:	20000434 	.word	0x20000434
 8002090:	200003e7 	.word	0x200003e7
 8002094:	200003ec 	.word	0x200003ec
 8002098:	2000043c 	.word	0x2000043c
 800209c:	20000444 	.word	0x20000444
 80020a0:	20000440 	.word	0x20000440

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_MspInit+0x5c>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_MspInit+0x5c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6193      	str	r3, [r2, #24]
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_MspInit+0x5c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_MspInit+0x5c>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_MspInit+0x5c>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_MspInit+0x5c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_MspInit+0x60>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_MspInit+0x60>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000

08002114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_I2C_MspInit+0x70>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d123      	bne.n	800217c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <HAL_I2C_MspInit+0x78>)
 8002160:	f000 fbbc 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800216a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40005400 	.word	0x40005400
 8002188:	40021000 	.word	0x40021000
 800218c:	40010c00 	.word	0x40010c00

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_TIM_Base_MspInit+0x7c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10c      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021ba:	e022      	b.n	8002202 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	e010      	b.n	8002202 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_TIM_Base_MspInit+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10b      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_TIM_Base_MspInit+0x80>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_TIM_PWM_MspInit+0x34>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10b      	bne.n	8002242 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_TIM_PWM_MspInit+0x38>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_TIM_PWM_MspInit+0x38>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_TIM_PWM_MspInit+0x38>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40000400 	.word	0x40000400
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_TIM_MspPostInit+0x88>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d12f      	bne.n	80022d4 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_TIM_MspPostInit+0x8c>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a4:	23c0      	movs	r3, #192	; 0xc0
 80022a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	4619      	mov	r1, r3
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <HAL_TIM_MspPostInit+0x90>)
 80022b8:	f000 fb10 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022bc:	2303      	movs	r3, #3
 80022be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4619      	mov	r1, r3
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <HAL_TIM_MspPostInit+0x94>)
 80022d0:	f000 fb04 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022d4:	bf00      	nop
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010800 	.word	0x40010800
 80022e8:	40010c00 	.word	0x40010c00

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_UART_MspInit+0x8c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d131      	bne.n	8002370 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_UART_MspInit+0x90>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_UART_MspInit+0x90>)
 8002312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_UART_MspInit+0x90>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_UART_MspInit+0x90>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_UART_MspInit+0x90>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_UART_MspInit+0x90>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	4619      	mov	r1, r3
 8002350:	480b      	ldr	r0, [pc, #44]	; (8002380 <HAL_UART_MspInit+0x94>)
 8002352:	f000 fac3 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4619      	mov	r1, r3
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <HAL_UART_MspInit+0x94>)
 800236c:	f000 fab6 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013800 	.word	0x40013800
 800237c:	40021000 	.word	0x40021000
 8002380:	40010800 	.word	0x40010800

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <NMI_Handler+0x4>

0800238a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <MemManage_Handler+0x4>

08002396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ca:	f000 f95d 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM2_IRQHandler+0x10>)
 80023da:	f002 fb0b 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000298 	.word	0x20000298

080023e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM4_IRQHandler+0x10>)
 80023ee:	f002 fb01 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000328 	.word	0x20000328

080023fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002400:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002404:	f000 fc06 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800240c:	f000 fc02 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002410:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002414:	f000 fbfe 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800241c:	f000 fbfa 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <_kill>:

int _kill(int pid, int sig)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800243c:	f004 f8dc 	bl	80065f8 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	2216      	movs	r2, #22
 8002444:	601a      	str	r2, [r3, #0]
  return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_exit>:

void _exit (int status)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800245a:	f04f 31ff 	mov.w	r1, #4294967295
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffe7 	bl	8002432 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002464:	e7fe      	b.n	8002464 <_exit+0x12>

08002466 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e00a      	b.n	800248e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002478:	f3af 8000 	nop.w
 800247c:	4601      	mov	r1, r0
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	60ba      	str	r2, [r7, #8]
 8002484:	b2ca      	uxtb	r2, r1
 8002486:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbf0      	blt.n	8002478 <_read+0x12>
  }

  return len;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e009      	b.n	80024c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	60ba      	str	r2, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dbf1      	blt.n	80024b2 <_write+0x12>
  }
  return len;
 80024ce:	687b      	ldr	r3, [r7, #4]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_close>:

int _close(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <_isatty>:

int _isatty(int file)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f004 f846 	bl	80065f8 <__errno>
 800256c:	4603      	mov	r3, r0
 800256e:	220c      	movs	r2, #12
 8002570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20005000 	.word	0x20005000
 8002598:	00000400 	.word	0x00000400
 800259c:	20000450 	.word	0x20000450
 80025a0:	200005a8 	.word	0x200005a8

080025a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025b0:	f7ff fff8 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025b6:	490c      	ldr	r1, [pc, #48]	; (80025e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025cc:	4c09      	ldr	r4, [pc, #36]	; (80025f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025da:	f004 f813 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025de:	f7ff f81b 	bl	8001618 <main>
  bx lr
 80025e2:	4770      	bx	lr
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025ec:	08008afc 	.word	0x08008afc
  ldr r2, =_sbss
 80025f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025f4:	200005a4 	.word	0x200005a4

080025f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC1_2_IRQHandler>
	...

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_Init+0x28>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_Init+0x28>)
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 f923 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	200f      	movs	r0, #15
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fd4a 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f93b 	bl	80028c2 <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f000 f903 	bl	800286e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20000014 	.word	0x20000014
 8002684:	20000010 	.word	0x20000010

08002688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_IncTick+0x1c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x20>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_IncTick+0x20>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000014 	.word	0x20000014
 80026a8:	20000454 	.word	0x20000454

080026ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_GetTick+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000454 	.word	0x20000454

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4906      	ldr	r1, [pc, #24]	; (8002758 <__NVIC_EnableIRQ+0x34>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff90 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff2d 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff42 	bl	8002708 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff90 	bl	80027b0 <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5f 	bl	800275c <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff35 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa2 	bl	8002814 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e169      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8158 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002918:	4a98      	ldr	r2, [pc, #608]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d875      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800291e:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d058      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002924:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d86f      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800292a:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d052      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d869      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04c      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d863      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d046      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d85d      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d82a      	bhi.n	80029a8 <HAL_GPIO_Init+0xcc>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d859      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_GPIO_Init+0x80>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029c3 	.word	0x080029c3
 8002968:	08002a05 	.word	0x08002a05
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a0b 	.word	0x08002a0b
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a0b 	.word	0x08002a0b
 800297c:	08002a0b 	.word	0x08002a0b
 8002980:	08002a0b 	.word	0x08002a0b
 8002984:	08002a0b 	.word	0x08002a0b
 8002988:	08002a0b 	.word	0x08002a0b
 800298c:	08002a0b 	.word	0x08002a0b
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a0b 	.word	0x08002a0b
 800299c:	08002a0b 	.word	0x08002a0b
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_GPIO_Init+0x2b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ae:	e02c      	b.n	8002a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e029      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e024      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e01f      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	330c      	adds	r3, #12
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e01a      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e013      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	611a      	str	r2, [r3, #16]
          break;
 80029f6:	e009      	b.n	8002a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	615a      	str	r2, [r3, #20]
          break;
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          break;
 8002a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d801      	bhi.n	8002a16 <HAL_GPIO_Init+0x13a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_Init+0x13e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d802      	bhi.n	8002a28 <HAL_GPIO_Init+0x14c>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x152>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	210f      	movs	r1, #15
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b1 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_GPIO_Init+0x2c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_GPIO_Init+0x1ec>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	; (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_GPIO_Init+0x1e0>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e004      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ada:	492f      	ldr	r1, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	492c      	ldr	r1, [pc, #176]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4928      	ldr	r1, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	491e      	ldr	r1, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4918      	ldr	r1, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4914      	ldr	r1, [pc, #80]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x2e2>
 8002b7a:	bf00      	nop
 8002b7c:	10320000 	.word	0x10320000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10220000 	.word	0x10220000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10110000 	.word	0x10110000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40010c00 	.word	0x40010c00
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae8e 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	; 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	611a      	str	r2, [r3, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f98c 	bl	8001f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e12b      	b.n	8002eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fa52 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f001 fd1e 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a81      	ldr	r2, [pc, #516]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d807      	bhi.n	8002cc8 <HAL_I2C_Init+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_I2C_Init+0x278>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e006      	b.n	8002cd6 <HAL_I2C_Init+0x92>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a7d      	ldr	r2, [pc, #500]	; (8002ec0 <HAL_I2C_Init+0x27c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0e7      	b.n	8002eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a78      	ldr	r2, [pc, #480]	; (8002ec4 <HAL_I2C_Init+0x280>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d802      	bhi.n	8002d18 <HAL_I2C_Init+0xd4>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e009      	b.n	8002d2c <HAL_I2C_Init+0xe8>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_I2C_Init+0x284>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	495c      	ldr	r1, [pc, #368]	; (8002eb8 <HAL_I2C_Init+0x274>)
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	d819      	bhi.n	8002d80 <HAL_I2C_Init+0x13c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e59      	subs	r1, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5a:	1c59      	adds	r1, r3, #1
 8002d5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d60:	400b      	ands	r3, r1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_I2C_Init+0x138>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e59      	subs	r1, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	e051      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e04f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Init+0x168>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_Init+0x18e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x196>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_I2C_Init+0x1bc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Init+0x1dc>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6809      	ldr	r1, [r1, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6911      	ldr	r1, [r2, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	000186a0 	.word	0x000186a0
 8002ebc:	001e847f 	.word	0x001e847f
 8002ec0:	003d08ff 	.word	0x003d08ff
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f7ff fbe1 	bl	80026ac <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f040 80d9 	bne.w	80030ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2319      	movs	r3, #25
 8002f00:	2201      	movs	r2, #1
 8002f02:	496d      	ldr	r1, [pc, #436]	; (80030b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fdef 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0cc      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Mem_Write+0x56>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0c5      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d007      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_I2C_Mem_Write+0x1f0>)
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f8a:	88f8      	ldrh	r0, [r7, #6]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	8979      	ldrh	r1, [r7, #10]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4603      	mov	r3, r0
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fc26 	bl	80037ec <I2C_RequestMemoryWrite>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d052      	beq.n	800304c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e081      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 feb4 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d107      	bne.n	8002fd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06b      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d11b      	bne.n	800304c <HAL_I2C_Mem_Write+0x180>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	2b00      	cmp	r3, #0
 800301a:	d017      	beq.n	800304c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1aa      	bne.n	8002faa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fea7 	bl	8003dac <I2C_WaitOnBTFFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b04      	cmp	r3, #4
 800306a:	d107      	bne.n	800307c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e016      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	00100002 	.word	0x00100002
 80030bc:	ffff0000 	.word	0xffff0000

080030c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030de:	f7ff fae5 	bl	80026ac <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	f040 8244 	bne.w	800357a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2319      	movs	r3, #25
 80030f8:	2201      	movs	r2, #1
 80030fa:	4982      	ldr	r1, [pc, #520]	; (8003304 <HAL_I2C_Mem_Read+0x244>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fcf3 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
 800310a:	e237      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2C_Mem_Read+0x5a>
 8003116:	2302      	movs	r3, #2
 8003118:	e230      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d007      	beq.n	8003140 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2222      	movs	r2, #34	; 0x22
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a62      	ldr	r2, [pc, #392]	; (8003308 <HAL_I2C_Mem_Read+0x248>)
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003182:	88f8      	ldrh	r0, [r7, #6]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4603      	mov	r3, r0
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fbc0 	bl	8003918 <I2C_RequestMemoryRead>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1ec      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d113      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e1c0      	b.n	8003554 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d11e      	bne.n	8003218 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ea:	b672      	cpsid	i
}
 80031ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003214:	b662      	cpsie	i
}
 8003216:	e035      	b.n	8003284 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b02      	cmp	r3, #2
 800321e:	d11e      	bne.n	800325e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003230:	b672      	cpsid	i
}
 8003232:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800325a:	b662      	cpsie	i
}
 800325c:	e012      	b.n	8003284 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800326c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003284:	e166      	b.n	8003554 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	2b03      	cmp	r3, #3
 800328c:	f200 811f 	bhi.w	80034ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b01      	cmp	r3, #1
 8003296:	d123      	bne.n	80032e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fdcd 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e167      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032de:	e139      	b.n	8003554 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d152      	bne.n	800338e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	2200      	movs	r2, #0
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <HAL_I2C_Mem_Read+0x24c>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbf8 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e13c      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
 8003302:	bf00      	nop
 8003304:	00100002 	.word	0x00100002
 8003308:	ffff0000 	.word	0xffff0000
 800330c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003310:	b672      	cpsid	i
}
 8003312:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003356:	b662      	cpsie	i
}
 8003358:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800338c:	e0e2      	b.n	8003554 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2200      	movs	r2, #0
 8003396:	497b      	ldr	r1, [pc, #492]	; (8003584 <HAL_I2C_Mem_Read+0x4c4>)
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fba5 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0e9      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033b8:	b672      	cpsid	i
}
 80033ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ee:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_I2C_Mem_Read+0x4c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	08db      	lsrs	r3, r3, #3
 80033f4:	4a65      	ldr	r2, [pc, #404]	; (800358c <HAL_I2C_Mem_Read+0x4cc>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a1a      	lsrs	r2, r3, #8
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00da      	lsls	r2, r3, #3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	3b01      	subs	r3, #1
 800340c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003436:	b662      	cpsie	i
}
 8003438:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09a      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d1d9      	bne.n	8003408 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003496:	b662      	cpsie	i
}
 8003498:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034cc:	e042      	b.n	8003554 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fcb2 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e04c      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d118      	bne.n	8003554 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae94 	bne.w	8003286 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010004 	.word	0x00010004
 8003588:	2000000c 	.word	0x2000000c
 800358c:	14f8b589 	.word	0x14f8b589

08003590 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7ff f884 	bl	80026ac <HAL_GetTick>
 80035a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	f040 8111 	bne.w	80037da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2319      	movs	r3, #25
 80035be:	2201      	movs	r2, #1
 80035c0:	4988      	ldr	r1, [pc, #544]	; (80037e4 <HAL_I2C_IsDeviceReady+0x254>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa90 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	e104      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_I2C_IsDeviceReady+0x50>
 80035dc:	2302      	movs	r3, #2
 80035de:	e0fd      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d007      	beq.n	8003606 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2224      	movs	r2, #36	; 0x24
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa4e 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d103      	bne.n	800366a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0b6      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800367e:	f7ff f815 	bl	80026ac <HAL_GetTick>
 8003682:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036b2:	e025      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fe fffa 	bl	80026ac <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <HAL_I2C_IsDeviceReady+0x13a>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22a0      	movs	r2, #160	; 0xa0
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2ba0      	cmp	r3, #160	; 0xa0
 800370a:	d005      	beq.n	8003718 <HAL_I2C_IsDeviceReady+0x188>
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_I2C_IsDeviceReady+0x188>
 8003712:	7dbb      	ldrb	r3, [r7, #22]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0cd      	beq.n	80036b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d129      	bne.n	8003782 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	4921      	ldr	r1, [pc, #132]	; (80037e4 <HAL_I2C_IsDeviceReady+0x254>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f9c2 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e036      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e02c      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2319      	movs	r3, #25
 80037a2:	2201      	movs	r2, #1
 80037a4:	490f      	ldr	r1, [pc, #60]	; (80037e4 <HAL_I2C_IsDeviceReady+0x254>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f99e 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e012      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	f4ff af32 	bcc.w	800362a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00100002 	.word	0x00100002
 80037e8:	ffff0000 	.word	0xffff0000

080037ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2200      	movs	r2, #0
 800381e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f960 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d103      	bne.n	8003846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e05f      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	492d      	ldr	r1, [pc, #180]	; (8003914 <I2C_RequestMemoryWrite+0x128>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f9bb 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04c      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa46 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02b      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e021      	b.n	8003908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa20 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e005      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2200      	movs	r2, #0
 800395a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8c2 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003978:	d103      	bne.n	8003982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0aa      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	4952      	ldr	r1, [pc, #328]	; (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f91d 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e097      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f9a8 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e076      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	e021      	b.n	8003a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f982 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e050      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f967 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e035      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f82b 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e013      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	4906      	ldr	r1, [pc, #24]	; (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f886 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010002 	.word	0x00010002

08003ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af8:	e048      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d044      	beq.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fdd3 	bl	80026ac <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d139      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	e00c      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d116      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e023      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10d      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	e00c      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d093      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bea:	e071      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d123      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f043 0204 	orr.w	r2, r3, #4
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e067      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d041      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe fd2e 	bl	80026ac <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d136      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e00b      	b.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e021      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10c      	bne.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e00b      	b.n	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af6d 	bne.w	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f8e3 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e034      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d028      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fcb3 	bl	80026ac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11d      	bne.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d016      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d1c3      	bne.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	e034      	b.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f89b 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e034      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d028      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe fc6b 	bl	80026ac <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11d      	bne.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d016      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e007      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d1c3      	bne.n	8003dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e48:	e049      	b.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d119      	bne.n	8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0210 	mvn.w	r2, #16
 8003e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e030      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe fc0e 	bl	80026ac <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d016      	beq.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d1ae      	bne.n	8003e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d11b      	bne.n	8003f46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e272      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8087 	beq.w	8004082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f74:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d00c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f80:	4b8f      	ldr	r3, [pc, #572]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d112      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x5e>
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9a:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06c      	beq.n	8004080 <HAL_RCC_OscConfig+0x12c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d168      	bne.n	8004080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e24c      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x76>
 8003fbc:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e02e      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a77      	ldr	r2, [pc, #476]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0xbc>
 8003ff6:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8004010:	4b6b      	ldr	r3, [pc, #428]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a67      	ldr	r2, [pc, #412]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fb3c 	bl	80026ac <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fb38 	bl	80026ac <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e200      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0xe4>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe fb28 	bl	80026ac <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe fb24 	bl	80026ac <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1ec      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x10c>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d063      	beq.n	8004156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800408e:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d11c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x18c>
 80040a6:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d116      	bne.n	80040e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x176>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e1c0      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4939      	ldr	r1, [pc, #228]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040de:	e03a      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e8:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <HAL_RCC_OscConfig+0x270>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe fadd 	bl	80026ac <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fad9 	bl	80026ac <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1a1      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4927      	ldr	r1, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	e015      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_RCC_OscConfig+0x270>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe fabc 	bl	80026ac <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe fab8 	bl	80026ac <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e180      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03a      	beq.n	80041d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_RCC_OscConfig+0x274>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fe fa9c 	bl	80026ac <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004178:	f7fe fa98 	bl	80026ac <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e160      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004196:	2001      	movs	r0, #1
 8004198:	f000 face 	bl	8004738 <RCC_Delay>
 800419c:	e01c      	b.n	80041d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCC_OscConfig+0x274>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fe fa82 	bl	80026ac <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041aa:	e00f      	b.n	80041cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fe fa7e 	bl	80026ac <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d908      	bls.n	80041cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e146      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	42420000 	.word	0x42420000
 80041c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b92      	ldr	r3, [pc, #584]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e9      	bne.n	80041ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a6 	beq.w	8004332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4a87      	ldr	r2, [pc, #540]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	61d3      	str	r3, [r2, #28]
 8004202:	4b85      	ldr	r3, [pc, #532]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b82      	ldr	r3, [pc, #520]	; (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7e      	ldr	r2, [pc, #504]	; (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fe fa3f 	bl	80026ac <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fe fa3b 	bl	80026ac <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b64      	cmp	r3, #100	; 0x64
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e103      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b75      	ldr	r3, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x312>
 8004258:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4a6e      	ldr	r2, [pc, #440]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6213      	str	r3, [r2, #32]
 8004264:	e02d      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x334>
 800426e:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a69      	ldr	r2, [pc, #420]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a66      	ldr	r2, [pc, #408]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6213      	str	r3, [r2, #32]
 8004286:	e01c      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b05      	cmp	r3, #5
 800428e:	d10c      	bne.n	80042aa <HAL_RCC_OscConfig+0x356>
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a60      	ldr	r2, [pc, #384]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	4b5e      	ldr	r3, [pc, #376]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a5d      	ldr	r2, [pc, #372]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	e00b      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe f9ef 	bl	80026ac <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe f9eb 	bl	80026ac <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0b1      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCC_OscConfig+0x37e>
 80042f4:	e014      	b.n	8004320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fe f9d9 	bl	80026ac <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fe f9d5 	bl	80026ac <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e09b      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ee      	bne.n	80042fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8087 	beq.w	800444a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b08      	cmp	r3, #8
 8004346:	d061      	beq.n	800440c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d146      	bne.n	80043de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x4cc>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe f9a9 	bl	80026ac <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435e:	f7fe f9a5 	bl	80026ac <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e06d      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d108      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4921      	ldr	r1, [pc, #132]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a19      	ldr	r1, [r3, #32]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	430b      	orrs	r3, r1
 80043aa:	491b      	ldr	r1, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x4cc>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fe f979 	bl	80026ac <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fe f975 	bl	80026ac <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e03d      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x46a>
 80043dc:	e035      	b.n	800444a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_OscConfig+0x4cc>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe f962 	bl	80026ac <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fe f95e 	bl	80026ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e026      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x498>
 800440a:	e01e      	b.n	800444a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e019      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
 8004420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x500>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	429a      	cmp	r2, r3
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000

08004458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0d0      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d910      	bls.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b67      	ldr	r3, [pc, #412]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4965      	ldr	r1, [pc, #404]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d040      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d115      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e073      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06b      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4936      	ldr	r1, [pc, #216]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fe f8b0 	bl	80026ac <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe f8ac 	bl	80026ac <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e053      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d210      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0207 	bic.w	r2, r3, #7
 800458e:	4922      	ldr	r1, [pc, #136]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f821 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	490a      	ldr	r1, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	5ccb      	ldrb	r3, [r1, r3]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1cc>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe f80e 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40022000 	.word	0x40022000
 800461c:	40021000 	.word	0x40021000
 8004620:	0800875c 	.word	0x0800875c
 8004624:	2000000c 	.word	0x2000000c
 8004628:	20000010 	.word	0x20000010

0800462c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x30>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x36>
 800465a:	e027      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800465e:	613b      	str	r3, [r7, #16]
      break;
 8004660:	e027      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0c9b      	lsrs	r3, r3, #18
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800466c:	5cd3      	ldrb	r3, [r2, r3]
 800466e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	0c5b      	lsrs	r3, r3, #17
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	4a11      	ldr	r2, [pc, #68]	; (80046cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800468e:	fb03 f202 	mul.w	r2, r3, r2
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e004      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	613b      	str	r3, [r7, #16]
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ae:	613b      	str	r3, [r7, #16]
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	693b      	ldr	r3, [r7, #16]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	007a1200 	.word	0x007a1200
 80046c8:	08008774 	.word	0x08008774
 80046cc:	08008784 	.word	0x08008784
 80046d0:	003d0900 	.word	0x003d0900

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff2 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	0800876c 	.word	0x0800876c

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffde 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0adb      	lsrs	r3, r3, #11
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800876c 	.word	0x0800876c

08004738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <RCC_Delay+0x34>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <RCC_Delay+0x38>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a5b      	lsrs	r3, r3, #9
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004754:	bf00      	nop
  }
  while (Delay --);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	60fa      	str	r2, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f9      	bne.n	8004754 <RCC_Delay+0x1c>
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	2000000c 	.word	0x2000000c
 8004770:	10624dd3 	.word	0x10624dd3

08004774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e041      	b.n	800480a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fd fcf8 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f000 fbd4 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e041      	b.n	80048a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fd fced 	bl	8002218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 fb85 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x24>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e022      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d109      	bne.n	80048ee <HAL_TIM_PWM_Start+0x3e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e015      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x58>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e008      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e05e      	b.n	80049e0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0x82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	e013      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0x92>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004940:	e00b      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	e003      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fd7c 	bl	8005460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_TIM_PWM_Start+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d107      	bne.n	8004982 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_TIM_PWM_Start+0x138>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_TIM_PWM_Start+0xfa>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d009      	beq.n	80049aa <HAL_TIM_PWM_Start+0xfa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a14      	ldr	r2, [pc, #80]	; (80049ec <HAL_TIM_PWM_Start+0x13c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_TIM_PWM_Start+0xfa>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HAL_TIM_PWM_Start+0x140>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d111      	bne.n	80049ce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b06      	cmp	r3, #6
 80049ba:	d010      	beq.n	80049de <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	e007      	b.n	80049de <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800

080049f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0202 	mvn.w	r2, #2
 8004a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa76 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa69 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa78 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0204 	mvn.w	r2, #4
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa4c 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa3f 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa4e 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0208 	mvn.w	r2, #8
 8004ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2204      	movs	r2, #4
 8004ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa22 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa15 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa24 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0210 	mvn.w	r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2208      	movs	r2, #8
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9f8 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9eb 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9fa 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0201 	mvn.w	r2, #1
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd f9d8 	bl	8001f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fce9 	bl	8005576 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9be 	bl	8004f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0220 	mvn.w	r2, #32
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fcb4 	bl	8005564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0ae      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	f200 809f 	bhi.w	8004d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c6d 	.word	0x08004c6d
 8004c3c:	08004d71 	.word	0x08004d71
 8004c40:	08004d71 	.word	0x08004d71
 8004c44:	08004d71 	.word	0x08004d71
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004d71 	.word	0x08004d71
 8004c50:	08004d71 	.word	0x08004d71
 8004c54:	08004d71 	.word	0x08004d71
 8004c58:	08004cef 	.word	0x08004cef
 8004c5c:	08004d71 	.word	0x08004d71
 8004c60:	08004d71 	.word	0x08004d71
 8004c64:	08004d71 	.word	0x08004d71
 8004c68:	08004d2f 	.word	0x08004d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f9d6 	bl	8005024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6999      	ldr	r1, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	619a      	str	r2, [r3, #24]
      break;
 8004caa:	e064      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa1c 	bl	80050f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      break;
 8004cec:	e043      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa65 	bl	80051c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0204 	bic.w	r2, r2, #4
 8004d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69d9      	ldr	r1, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
      break;
 8004d2c:	e023      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 faaf 	bl	8005298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	61da      	str	r2, [r3, #28]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
      break;
 8004d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b4      	b.n	8004f0e <HAL_TIM_ConfigClockSource+0x186>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d03e      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xd4>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	f200 8087 	bhi.w	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	f000 8086 	beq.w	8004efa <HAL_TIM_ConfigClockSource+0x172>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d87f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d01a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xa6>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d87b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d050      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d877      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d03c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xfa>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d873      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d058      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d86f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d064      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d86b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d060      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d867      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d05a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	e062      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	f000 faf0 	bl	8005422 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e04f      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	f000 fad9 	bl	8005422 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e03c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fa50 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2150      	movs	r1, #80	; 0x50
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 faa7 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e02c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fa6e 	bl	8005390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2160      	movs	r1, #96	; 0x60
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fa97 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e01c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fa30 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa87 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e00c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 fa7e 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8004ef2:	e003      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
	...

08004f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a29      	ldr	r2, [pc, #164]	; (8005018 <TIM_Base_SetConfig+0xb8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_Base_SetConfig+0x30>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d007      	beq.n	8004f90 <TIM_Base_SetConfig+0x30>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a26      	ldr	r2, [pc, #152]	; (800501c <TIM_Base_SetConfig+0xbc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_Base_SetConfig+0x30>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <TIM_Base_SetConfig+0xc0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d108      	bne.n	8004fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <TIM_Base_SetConfig+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_Base_SetConfig+0x62>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d007      	beq.n	8004fc2 <TIM_Base_SetConfig+0x62>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <TIM_Base_SetConfig+0xbc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0x62>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	; (8005020 <TIM_Base_SetConfig+0xc0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <TIM_Base_SetConfig+0xb8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800

08005024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0201 	bic.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <TIM_OC1_SetConfig+0xc8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a13      	ldr	r2, [pc, #76]	; (80050ec <TIM_OC1_SetConfig+0xc8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d111      	bne.n	80050c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00

080050f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f023 0210 	bic.w	r2, r3, #16
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <TIM_OC2_SetConfig+0xd0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10d      	bne.n	800516c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <TIM_OC2_SetConfig+0xd0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d113      	bne.n	800519c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00

080051c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <TIM_OC3_SetConfig+0xd0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a14      	ldr	r2, [pc, #80]	; (8005294 <TIM_OC3_SetConfig+0xd0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d113      	bne.n	800526e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00

08005298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0f      	ldr	r2, [pc, #60]	; (8005330 <TIM_OC4_SetConfig+0x98>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d109      	bne.n	800530c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00

08005334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 030a 	bic.w	r3, r3, #10
 8005370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f023 0210 	bic.w	r2, r3, #16
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	031b      	lsls	r3, r3, #12
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	f043 0307 	orr.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	021a      	lsls	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	609a      	str	r2, [r3, #8]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054bc:	2302      	movs	r3, #2
 80054be:	e046      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a10      	ldr	r2, [pc, #64]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10c      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800

08005564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e042      	b.n	8005620 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc fe9c 	bl	80022ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	; 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f9af 	bl	8005930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b20      	cmp	r3, #32
 8005646:	d16d      	bne.n	8005724 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_UART_Transmit+0x2c>
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e066      	b.n	8005726 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2221      	movs	r2, #33	; 0x21
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005666:	f7fd f821 	bl	80026ac <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x6c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800569c:	e02a      	b.n	80056f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f8d2 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e036      	b.n	8005726 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	3302      	adds	r3, #2
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e007      	b.n	80056e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1cf      	bne.n	800569e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f8a2 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e006      	b.n	8005726 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	; 0x28
 8005732:	af02      	add	r7, sp, #8
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b20      	cmp	r3, #32
 800574c:	d17c      	bne.n	8005848 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_Receive+0x2c>
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e075      	b.n	800584a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2222      	movs	r2, #34	; 0x22
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005772:	f7fc ff9b 	bl	80026ac <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d108      	bne.n	80057a0 <HAL_UART_Receive+0x72>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e003      	b.n	80057a8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057a8:	e043      	b.n	8005832 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2120      	movs	r1, #32
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f84c 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e042      	b.n	800584a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3302      	adds	r3, #2
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e01f      	b.n	8005824 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d007      	beq.n	80057fe <HAL_UART_Receive+0xd0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <HAL_UART_Receive+0xde>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	e008      	b.n	800581e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005818:	b2da      	uxtb	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1b6      	bne.n	80057aa <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b090      	sub	sp, #64	; 0x40
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005862:	e050      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d04c      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0x30>
 8005872:	f7fc ff1b 	bl	80026ac <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587e:	429a      	cmp	r2, r3
 8005880:	d241      	bcs.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a2:	637a      	str	r2, [r7, #52]	; 0x34
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d6:	623a      	str	r2, [r7, #32]
 80058d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	69f9      	ldr	r1, [r7, #28]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e00f      	b.n	8005926 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d09f      	beq.n	8005864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3740      	adds	r7, #64	; 0x40
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800596a:	f023 030c 	bic.w	r3, r3, #12
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	430b      	orrs	r3, r1
 8005976:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <UART_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fe feba 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	e002      	b.n	80059a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059a0:	f7fe fea2 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 80059a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009a      	lsls	r2, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <UART_SetConfig+0x118>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	0119      	lsls	r1, r3, #4
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009a      	lsls	r2, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059dc:	4b1a      	ldr	r3, [pc, #104]	; (8005a48 <UART_SetConfig+0x118>)
 80059de:	fba3 0302 	umull	r0, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2064      	movs	r0, #100	; 0x64
 80059e6:	fb00 f303 	mul.w	r3, r0, r3
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	; 0x32
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <UART_SetConfig+0x118>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fc:	4419      	add	r1, r3
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009a      	lsls	r2, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <UART_SetConfig+0x118>)
 8005a16:	fba3 0302 	umull	r0, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2064      	movs	r0, #100	; 0x64
 8005a1e:	fb00 f303 	mul.w	r3, r0, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	3332      	adds	r3, #50	; 0x32
 8005a28:	4a07      	ldr	r2, [pc, #28]	; (8005a48 <UART_SetConfig+0x118>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	440a      	add	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40013800 	.word	0x40013800
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <__cvt>:
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a52:	461f      	mov	r7, r3
 8005a54:	bfbb      	ittet	lt
 8005a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	461f      	movlt	r7, r3
 8005a5c:	2300      	movge	r3, #0
 8005a5e:	232d      	movlt	r3, #45	; 0x2d
 8005a60:	b088      	sub	sp, #32
 8005a62:	4614      	mov	r4, r2
 8005a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a68:	7013      	strb	r3, [r2, #0]
 8005a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a70:	f023 0820 	bic.w	r8, r3, #32
 8005a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a78:	d005      	beq.n	8005a86 <__cvt+0x3a>
 8005a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a7e:	d100      	bne.n	8005a82 <__cvt+0x36>
 8005a80:	3501      	adds	r5, #1
 8005a82:	2302      	movs	r3, #2
 8005a84:	e000      	b.n	8005a88 <__cvt+0x3c>
 8005a86:	2303      	movs	r3, #3
 8005a88:	aa07      	add	r2, sp, #28
 8005a8a:	9204      	str	r2, [sp, #16]
 8005a8c:	aa06      	add	r2, sp, #24
 8005a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a92:	e9cd 3500 	strd	r3, r5, [sp]
 8005a96:	4622      	mov	r2, r4
 8005a98:	463b      	mov	r3, r7
 8005a9a:	f000 fe71 	bl	8006780 <_dtoa_r>
 8005a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	d102      	bne.n	8005aac <__cvt+0x60>
 8005aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aa8:	07db      	lsls	r3, r3, #31
 8005aaa:	d522      	bpl.n	8005af2 <__cvt+0xa6>
 8005aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ab0:	eb06 0905 	add.w	r9, r6, r5
 8005ab4:	d110      	bne.n	8005ad8 <__cvt+0x8c>
 8005ab6:	7833      	ldrb	r3, [r6, #0]
 8005ab8:	2b30      	cmp	r3, #48	; 0x30
 8005aba:	d10a      	bne.n	8005ad2 <__cvt+0x86>
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac8:	b918      	cbnz	r0, 8005ad2 <__cvt+0x86>
 8005aca:	f1c5 0501 	rsb	r5, r5, #1
 8005ace:	f8ca 5000 	str.w	r5, [sl]
 8005ad2:	f8da 3000 	ldr.w	r3, [sl]
 8005ad6:	4499      	add	r9, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	4620      	mov	r0, r4
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae4:	b108      	cbz	r0, 8005aea <__cvt+0x9e>
 8005ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005aea:	2230      	movs	r2, #48	; 0x30
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	454b      	cmp	r3, r9
 8005af0:	d307      	bcc.n	8005b02 <__cvt+0xb6>
 8005af2:	4630      	mov	r0, r6
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	b008      	add	sp, #32
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	9107      	str	r1, [sp, #28]
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e7f0      	b.n	8005aec <__cvt+0xa0>

08005b0a <__exponent>:
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	f803 2b02 	strb.w	r2, [r3], #2
 8005b14:	bfb6      	itet	lt
 8005b16:	222d      	movlt	r2, #45	; 0x2d
 8005b18:	222b      	movge	r2, #43	; 0x2b
 8005b1a:	4249      	neglt	r1, r1
 8005b1c:	2909      	cmp	r1, #9
 8005b1e:	7042      	strb	r2, [r0, #1]
 8005b20:	dd2a      	ble.n	8005b78 <__exponent+0x6e>
 8005b22:	f10d 0207 	add.w	r2, sp, #7
 8005b26:	4617      	mov	r7, r2
 8005b28:	260a      	movs	r6, #10
 8005b2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b2e:	4694      	mov	ip, r2
 8005b30:	fb06 1415 	mls	r4, r6, r5, r1
 8005b34:	3430      	adds	r4, #48	; 0x30
 8005b36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	2c63      	cmp	r4, #99	; 0x63
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b44:	dcf1      	bgt.n	8005b2a <__exponent+0x20>
 8005b46:	3130      	adds	r1, #48	; 0x30
 8005b48:	f1ac 0402 	sub.w	r4, ip, #2
 8005b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b50:	4622      	mov	r2, r4
 8005b52:	1c41      	adds	r1, r0, #1
 8005b54:	42ba      	cmp	r2, r7
 8005b56:	d30a      	bcc.n	8005b6e <__exponent+0x64>
 8005b58:	f10d 0209 	add.w	r2, sp, #9
 8005b5c:	eba2 020c 	sub.w	r2, r2, ip
 8005b60:	42bc      	cmp	r4, r7
 8005b62:	bf88      	it	hi
 8005b64:	2200      	movhi	r2, #0
 8005b66:	4413      	add	r3, r2
 8005b68:	1a18      	subs	r0, r3, r0
 8005b6a:	b003      	add	sp, #12
 8005b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b76:	e7ed      	b.n	8005b54 <__exponent+0x4a>
 8005b78:	2330      	movs	r3, #48	; 0x30
 8005b7a:	3130      	adds	r1, #48	; 0x30
 8005b7c:	7083      	strb	r3, [r0, #2]
 8005b7e:	70c1      	strb	r1, [r0, #3]
 8005b80:	1d03      	adds	r3, r0, #4
 8005b82:	e7f1      	b.n	8005b68 <__exponent+0x5e>

08005b84 <_printf_float>:
 8005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b88:	b091      	sub	sp, #68	; 0x44
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005b90:	4616      	mov	r6, r2
 8005b92:	461f      	mov	r7, r3
 8005b94:	4605      	mov	r5, r0
 8005b96:	f000 fce5 	bl	8006564 <_localeconv_r>
 8005b9a:	6803      	ldr	r3, [r0, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	f7fa fad6 	bl	8000150 <strlen>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bac:	900a      	str	r0, [sp, #40]	; 0x28
 8005bae:	3307      	adds	r3, #7
 8005bb0:	f023 0307 	bic.w	r3, r3, #7
 8005bb4:	f103 0208 	add.w	r2, r3, #8
 8005bb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bbc:	f8d4 b000 	ldr.w	fp, [r4]
 8005bc0:	f8c8 2000 	str.w	r2, [r8]
 8005bc4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005bc8:	4652      	mov	r2, sl
 8005bca:	4643      	mov	r3, r8
 8005bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bd0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4b9c      	ldr	r3, [pc, #624]	; (8005e50 <_printf_float+0x2cc>)
 8005bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005be0:	f7fa ff14 	bl	8000a0c <__aeabi_dcmpun>
 8005be4:	bb70      	cbnz	r0, 8005c44 <_printf_float+0xc0>
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bea:	4650      	mov	r0, sl
 8005bec:	4b98      	ldr	r3, [pc, #608]	; (8005e50 <_printf_float+0x2cc>)
 8005bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf0:	f7fa feee 	bl	80009d0 <__aeabi_dcmple>
 8005bf4:	bb30      	cbnz	r0, 8005c44 <_printf_float+0xc0>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	f7fa fedd 	bl	80009bc <__aeabi_dcmplt>
 8005c02:	b110      	cbz	r0, 8005c0a <_printf_float+0x86>
 8005c04:	232d      	movs	r3, #45	; 0x2d
 8005c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0a:	4a92      	ldr	r2, [pc, #584]	; (8005e54 <_printf_float+0x2d0>)
 8005c0c:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <_printf_float+0x2d4>)
 8005c0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c12:	bf94      	ite	ls
 8005c14:	4690      	movls	r8, r2
 8005c16:	4698      	movhi	r8, r3
 8005c18:	2303      	movs	r3, #3
 8005c1a:	f04f 0a00 	mov.w	sl, #0
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	f02b 0304 	bic.w	r3, fp, #4
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	4633      	mov	r3, r6
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	9700      	str	r7, [sp, #0]
 8005c2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c30:	f000 f9d6 	bl	8005fe0 <_printf_common>
 8005c34:	3001      	adds	r0, #1
 8005c36:	f040 8090 	bne.w	8005d5a <_printf_float+0x1d6>
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	b011      	add	sp, #68	; 0x44
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	4652      	mov	r2, sl
 8005c46:	4643      	mov	r3, r8
 8005c48:	4650      	mov	r0, sl
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	f7fa fede 	bl	8000a0c <__aeabi_dcmpun>
 8005c50:	b148      	cbz	r0, 8005c66 <_printf_float+0xe2>
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	bfb8      	it	lt
 8005c58:	232d      	movlt	r3, #45	; 0x2d
 8005c5a:	4a80      	ldr	r2, [pc, #512]	; (8005e5c <_printf_float+0x2d8>)
 8005c5c:	bfb8      	it	lt
 8005c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c62:	4b7f      	ldr	r3, [pc, #508]	; (8005e60 <_printf_float+0x2dc>)
 8005c64:	e7d3      	b.n	8005c0e <_printf_float+0x8a>
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	d142      	bne.n	8005cf6 <_printf_float+0x172>
 8005c70:	2306      	movs	r3, #6
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	9206      	str	r2, [sp, #24]
 8005c78:	aa0e      	add	r2, sp, #56	; 0x38
 8005c7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c7e:	aa0d      	add	r2, sp, #52	; 0x34
 8005c80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005c84:	9203      	str	r2, [sp, #12]
 8005c86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005c8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	4652      	mov	r2, sl
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4628      	mov	r0, r5
 8005c98:	4643      	mov	r3, r8
 8005c9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c9c:	f7ff fed6 	bl	8005a4c <__cvt>
 8005ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	2947      	cmp	r1, #71	; 0x47
 8005ca6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ca8:	d108      	bne.n	8005cbc <_printf_float+0x138>
 8005caa:	1cc8      	adds	r0, r1, #3
 8005cac:	db02      	blt.n	8005cb4 <_printf_float+0x130>
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	dd40      	ble.n	8005d36 <_printf_float+0x1b2>
 8005cb4:	f1a9 0902 	sub.w	r9, r9, #2
 8005cb8:	fa5f f989 	uxtb.w	r9, r9
 8005cbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cc0:	d81f      	bhi.n	8005d02 <_printf_float+0x17e>
 8005cc2:	464a      	mov	r2, r9
 8005cc4:	3901      	subs	r1, #1
 8005cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cca:	910d      	str	r1, [sp, #52]	; 0x34
 8005ccc:	f7ff ff1d 	bl	8005b0a <__exponent>
 8005cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	1813      	adds	r3, r2, r0
 8005cd6:	2a01      	cmp	r2, #1
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	dc02      	bgt.n	8005ce2 <_printf_float+0x15e>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	07d2      	lsls	r2, r2, #31
 8005ce0:	d501      	bpl.n	8005ce6 <_printf_float+0x162>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d09b      	beq.n	8005c26 <_printf_float+0xa2>
 8005cee:	232d      	movs	r3, #45	; 0x2d
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	e797      	b.n	8005c26 <_printf_float+0xa2>
 8005cf6:	2947      	cmp	r1, #71	; 0x47
 8005cf8:	d1bc      	bne.n	8005c74 <_printf_float+0xf0>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1ba      	bne.n	8005c74 <_printf_float+0xf0>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7b7      	b.n	8005c72 <_printf_float+0xee>
 8005d02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d06:	d118      	bne.n	8005d3a <_printf_float+0x1b6>
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	dd0b      	ble.n	8005d26 <_printf_float+0x1a2>
 8005d0e:	6121      	str	r1, [r4, #16]
 8005d10:	b913      	cbnz	r3, 8005d18 <_printf_float+0x194>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d0      	lsls	r0, r2, #31
 8005d16:	d502      	bpl.n	8005d1e <_printf_float+0x19a>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	440b      	add	r3, r1
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	f04f 0a00 	mov.w	sl, #0
 8005d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d24:	e7df      	b.n	8005ce6 <_printf_float+0x162>
 8005d26:	b913      	cbnz	r3, 8005d2e <_printf_float+0x1aa>
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	07d2      	lsls	r2, r2, #31
 8005d2c:	d501      	bpl.n	8005d32 <_printf_float+0x1ae>
 8005d2e:	3302      	adds	r3, #2
 8005d30:	e7f4      	b.n	8005d1c <_printf_float+0x198>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7f2      	b.n	8005d1c <_printf_float+0x198>
 8005d36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	db05      	blt.n	8005d4c <_printf_float+0x1c8>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	6121      	str	r1, [r4, #16]
 8005d44:	07d8      	lsls	r0, r3, #31
 8005d46:	d5ea      	bpl.n	8005d1e <_printf_float+0x19a>
 8005d48:	1c4b      	adds	r3, r1, #1
 8005d4a:	e7e7      	b.n	8005d1c <_printf_float+0x198>
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	bfcc      	ite	gt
 8005d50:	2201      	movgt	r2, #1
 8005d52:	f1c1 0202 	rsble	r2, r1, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	e7e0      	b.n	8005d1c <_printf_float+0x198>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	055a      	lsls	r2, r3, #21
 8005d5e:	d407      	bmi.n	8005d70 <_printf_float+0x1ec>
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	4642      	mov	r2, r8
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d12b      	bne.n	8005dc6 <_printf_float+0x242>
 8005d6e:	e764      	b.n	8005c3a <_printf_float+0xb6>
 8005d70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d74:	f240 80dd 	bls.w	8005f32 <_printf_float+0x3ae>
 8005d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f7fa fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d033      	beq.n	8005df0 <_printf_float+0x26c>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	4a35      	ldr	r2, [pc, #212]	; (8005e64 <_printf_float+0x2e0>)
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	f43f af51 	beq.w	8005c3a <_printf_float+0xb6>
 8005d98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	db02      	blt.n	8005da6 <_printf_float+0x222>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07d8      	lsls	r0, r3, #31
 8005da4:	d50f      	bpl.n	8005dc6 <_printf_float+0x242>
 8005da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f af42 	beq.w	8005c3a <_printf_float+0xb6>
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	f104 091a 	add.w	r9, r4, #26
 8005dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	4543      	cmp	r3, r8
 8005dc4:	dc09      	bgt.n	8005dda <_printf_float+0x256>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	079b      	lsls	r3, r3, #30
 8005dca:	f100 8104 	bmi.w	8005fd6 <_printf_float+0x452>
 8005dce:	68e0      	ldr	r0, [r4, #12]
 8005dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd2:	4298      	cmp	r0, r3
 8005dd4:	bfb8      	it	lt
 8005dd6:	4618      	movlt	r0, r3
 8005dd8:	e731      	b.n	8005c3e <_printf_float+0xba>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	464a      	mov	r2, r9
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f af28 	beq.w	8005c3a <_printf_float+0xb6>
 8005dea:	f108 0801 	add.w	r8, r8, #1
 8005dee:	e7e6      	b.n	8005dbe <_printf_float+0x23a>
 8005df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc38      	bgt.n	8005e68 <_printf_float+0x2e4>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <_printf_float+0x2e0>)
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f af1a 	beq.w	8005c3a <_printf_float+0xb6>
 8005e06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d102      	bne.n	8005e14 <_printf_float+0x290>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d5d8      	bpl.n	8005dc6 <_printf_float+0x242>
 8005e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af0b 	beq.w	8005c3a <_printf_float+0xb6>
 8005e24:	f04f 0900 	mov.w	r9, #0
 8005e28:	f104 0a1a 	add.w	sl, r4, #26
 8005e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e2e:	425b      	negs	r3, r3
 8005e30:	454b      	cmp	r3, r9
 8005e32:	dc01      	bgt.n	8005e38 <_printf_float+0x2b4>
 8005e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e36:	e794      	b.n	8005d62 <_printf_float+0x1de>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f aef9 	beq.w	8005c3a <_printf_float+0xb6>
 8005e48:	f109 0901 	add.w	r9, r9, #1
 8005e4c:	e7ee      	b.n	8005e2c <_printf_float+0x2a8>
 8005e4e:	bf00      	nop
 8005e50:	7fefffff 	.word	0x7fefffff
 8005e54:	08008786 	.word	0x08008786
 8005e58:	0800878a 	.word	0x0800878a
 8005e5c:	0800878e 	.word	0x0800878e
 8005e60:	08008792 	.word	0x08008792
 8005e64:	08008796 	.word	0x08008796
 8005e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	bfa8      	it	ge
 8005e70:	461a      	movge	r2, r3
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	4691      	mov	r9, r2
 8005e76:	dc37      	bgt.n	8005ee8 <_printf_float+0x364>
 8005e78:	f04f 0b00 	mov.w	fp, #0
 8005e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e80:	f104 021a 	add.w	r2, r4, #26
 8005e84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005e88:	ebaa 0309 	sub.w	r3, sl, r9
 8005e8c:	455b      	cmp	r3, fp
 8005e8e:	dc33      	bgt.n	8005ef8 <_printf_float+0x374>
 8005e90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e94:	429a      	cmp	r2, r3
 8005e96:	db3b      	blt.n	8005f10 <_printf_float+0x38c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07da      	lsls	r2, r3, #31
 8005e9c:	d438      	bmi.n	8005f10 <_printf_float+0x38c>
 8005e9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ea2:	eba2 0903 	sub.w	r9, r2, r3
 8005ea6:	eba2 020a 	sub.w	r2, r2, sl
 8005eaa:	4591      	cmp	r9, r2
 8005eac:	bfa8      	it	ge
 8005eae:	4691      	movge	r9, r2
 8005eb0:	f1b9 0f00 	cmp.w	r9, #0
 8005eb4:	dc34      	bgt.n	8005f20 <_printf_float+0x39c>
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebe:	f104 0a1a 	add.w	sl, r4, #26
 8005ec2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	eba3 0309 	sub.w	r3, r3, r9
 8005ecc:	4543      	cmp	r3, r8
 8005ece:	f77f af7a 	ble.w	8005dc6 <_printf_float+0x242>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f aeac 	beq.w	8005c3a <_printf_float+0xb6>
 8005ee2:	f108 0801 	add.w	r8, r8, #1
 8005ee6:	e7ec      	b.n	8005ec2 <_printf_float+0x33e>
 8005ee8:	4613      	mov	r3, r2
 8005eea:	4631      	mov	r1, r6
 8005eec:	4642      	mov	r2, r8
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d1c0      	bne.n	8005e78 <_printf_float+0x2f4>
 8005ef6:	e6a0      	b.n	8005c3a <_printf_float+0xb6>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4631      	mov	r1, r6
 8005efc:	4628      	mov	r0, r5
 8005efe:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f ae99 	beq.w	8005c3a <_printf_float+0xb6>
 8005f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f0a:	f10b 0b01 	add.w	fp, fp, #1
 8005f0e:	e7b9      	b.n	8005e84 <_printf_float+0x300>
 8005f10:	4631      	mov	r1, r6
 8005f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d1bf      	bne.n	8005e9e <_printf_float+0x31a>
 8005f1e:	e68c      	b.n	8005c3a <_printf_float+0xb6>
 8005f20:	464b      	mov	r3, r9
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	eb08 020a 	add.w	r2, r8, sl
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d1c2      	bne.n	8005eb6 <_printf_float+0x332>
 8005f30:	e683      	b.n	8005c3a <_printf_float+0xb6>
 8005f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f34:	2a01      	cmp	r2, #1
 8005f36:	dc01      	bgt.n	8005f3c <_printf_float+0x3b8>
 8005f38:	07db      	lsls	r3, r3, #31
 8005f3a:	d539      	bpl.n	8005fb0 <_printf_float+0x42c>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	4642      	mov	r2, r8
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f ae77 	beq.w	8005c3a <_printf_float+0xb6>
 8005f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f ae6f 	beq.w	8005c3a <_printf_float+0xb6>
 8005f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f60:	2200      	movs	r2, #0
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005f68:	f7fa fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005f6c:	b9d8      	cbnz	r0, 8005fa6 <_printf_float+0x422>
 8005f6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005f72:	f108 0201 	add.w	r2, r8, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d10e      	bne.n	8005f9e <_printf_float+0x41a>
 8005f80:	e65b      	b.n	8005c3a <_printf_float+0xb6>
 8005f82:	2301      	movs	r3, #1
 8005f84:	464a      	mov	r2, r9
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae54 	beq.w	8005c3a <_printf_float+0xb6>
 8005f92:	f108 0801 	add.w	r8, r8, #1
 8005f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	4543      	cmp	r3, r8
 8005f9c:	dcf1      	bgt.n	8005f82 <_printf_float+0x3fe>
 8005f9e:	4653      	mov	r3, sl
 8005fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fa4:	e6de      	b.n	8005d64 <_printf_float+0x1e0>
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	f104 091a 	add.w	r9, r4, #26
 8005fae:	e7f2      	b.n	8005f96 <_printf_float+0x412>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	e7df      	b.n	8005f76 <_printf_float+0x3f2>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	464a      	mov	r2, r9
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f43f ae3a 	beq.w	8005c3a <_printf_float+0xb6>
 8005fc6:	f108 0801 	add.w	r8, r8, #1
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fce:	1a5b      	subs	r3, r3, r1
 8005fd0:	4543      	cmp	r3, r8
 8005fd2:	dcf0      	bgt.n	8005fb6 <_printf_float+0x432>
 8005fd4:	e6fb      	b.n	8005dce <_printf_float+0x24a>
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	f104 0919 	add.w	r9, r4, #25
 8005fde:	e7f4      	b.n	8005fca <_printf_float+0x446>

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	4607      	mov	r7, r0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfb8      	it	lt
 8005ff2:	4613      	movlt	r3, r2
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc2b      	bgt.n	8006080 <_printf_common+0xa0>
 8006028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800602c:	1e13      	subs	r3, r2, #0
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d430      	bmi.n	800609a <_printf_common+0xba>
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d023      	beq.n	800608e <_printf_common+0xae>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf14      	ite	ne
 8006052:	2500      	movne	r5, #0
 8006054:	6833      	ldreq	r3, [r6, #0]
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	bf08      	it	eq
 800605c:	68e5      	ldreq	r5, [r4, #12]
 800605e:	f104 041a 	add.w	r4, r4, #26
 8006062:	bf08      	it	eq
 8006064:	1aed      	subeq	r5, r5, r3
 8006066:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800606a:	bf08      	it	eq
 800606c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006070:	4293      	cmp	r3, r2
 8006072:	bfc4      	itt	gt
 8006074:	1a9b      	subgt	r3, r3, r2
 8006076:	18ed      	addgt	r5, r5, r3
 8006078:	42b5      	cmp	r5, r6
 800607a:	d11a      	bne.n	80060b2 <_printf_common+0xd2>
 800607c:	2000      	movs	r0, #0
 800607e:	e008      	b.n	8006092 <_printf_common+0xb2>
 8006080:	2301      	movs	r3, #1
 8006082:	4652      	mov	r2, sl
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d103      	bne.n	8006096 <_printf_common+0xb6>
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
 8006092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006096:	3501      	adds	r5, #1
 8006098:	e7c1      	b.n	800601e <_printf_common+0x3e>
 800609a:	2030      	movs	r0, #48	; 0x30
 800609c:	18e1      	adds	r1, r4, r3
 800609e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a8:	4422      	add	r2, r4
 80060aa:	3302      	adds	r3, #2
 80060ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060b0:	e7c2      	b.n	8006038 <_printf_common+0x58>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4622      	mov	r2, r4
 80060b6:	4649      	mov	r1, r9
 80060b8:	4638      	mov	r0, r7
 80060ba:	47c0      	blx	r8
 80060bc:	3001      	adds	r0, #1
 80060be:	d0e6      	beq.n	800608e <_printf_common+0xae>
 80060c0:	3601      	adds	r6, #1
 80060c2:	e7d9      	b.n	8006078 <_printf_common+0x98>

080060c4 <_printf_i>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	7e0f      	ldrb	r7, [r1, #24]
 80060ca:	4691      	mov	r9, r2
 80060cc:	2f78      	cmp	r7, #120	; 0x78
 80060ce:	4680      	mov	r8, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	469a      	mov	sl, r3
 80060d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060da:	d807      	bhi.n	80060ec <_printf_i+0x28>
 80060dc:	2f62      	cmp	r7, #98	; 0x62
 80060de:	d80a      	bhi.n	80060f6 <_printf_i+0x32>
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	f000 80d5 	beq.w	8006290 <_printf_i+0x1cc>
 80060e6:	2f58      	cmp	r7, #88	; 0x58
 80060e8:	f000 80c1 	beq.w	800626e <_printf_i+0x1aa>
 80060ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f4:	e03a      	b.n	800616c <_printf_i+0xa8>
 80060f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fa:	2b15      	cmp	r3, #21
 80060fc:	d8f6      	bhi.n	80060ec <_printf_i+0x28>
 80060fe:	a101      	add	r1, pc, #4	; (adr r1, 8006104 <_printf_i+0x40>)
 8006100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006171 	.word	0x08006171
 800610c:	080060ed 	.word	0x080060ed
 8006110:	080060ed 	.word	0x080060ed
 8006114:	080060ed 	.word	0x080060ed
 8006118:	080060ed 	.word	0x080060ed
 800611c:	08006171 	.word	0x08006171
 8006120:	080060ed 	.word	0x080060ed
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	08006277 	.word	0x08006277
 8006134:	0800619d 	.word	0x0800619d
 8006138:	08006231 	.word	0x08006231
 800613c:	080060ed 	.word	0x080060ed
 8006140:	080060ed 	.word	0x080060ed
 8006144:	08006299 	.word	0x08006299
 8006148:	080060ed 	.word	0x080060ed
 800614c:	0800619d 	.word	0x0800619d
 8006150:	080060ed 	.word	0x080060ed
 8006154:	080060ed 	.word	0x080060ed
 8006158:	08006239 	.word	0x08006239
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	602a      	str	r2, [r5, #0]
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616c:	2301      	movs	r3, #1
 800616e:	e0a0      	b.n	80062b2 <_printf_i+0x1ee>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	0607      	lsls	r7, r0, #24
 8006176:	f103 0104 	add.w	r1, r3, #4
 800617a:	6029      	str	r1, [r5, #0]
 800617c:	d501      	bpl.n	8006182 <_printf_i+0xbe>
 800617e:	681e      	ldr	r6, [r3, #0]
 8006180:	e003      	b.n	800618a <_printf_i+0xc6>
 8006182:	0646      	lsls	r6, r0, #25
 8006184:	d5fb      	bpl.n	800617e <_printf_i+0xba>
 8006186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800618a:	2e00      	cmp	r6, #0
 800618c:	da03      	bge.n	8006196 <_printf_i+0xd2>
 800618e:	232d      	movs	r3, #45	; 0x2d
 8006190:	4276      	negs	r6, r6
 8006192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006196:	230a      	movs	r3, #10
 8006198:	4859      	ldr	r0, [pc, #356]	; (8006300 <_printf_i+0x23c>)
 800619a:	e012      	b.n	80061c2 <_printf_i+0xfe>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	6029      	str	r1, [r5, #0]
 80061a4:	0605      	lsls	r5, r0, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xe8>
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0xee>
 80061ac:	0641      	lsls	r1, r0, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xe4>
 80061b0:	881e      	ldrh	r6, [r3, #0]
 80061b2:	2f6f      	cmp	r7, #111	; 0x6f
 80061b4:	bf0c      	ite	eq
 80061b6:	2308      	moveq	r3, #8
 80061b8:	230a      	movne	r3, #10
 80061ba:	4851      	ldr	r0, [pc, #324]	; (8006300 <_printf_i+0x23c>)
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c2:	6865      	ldr	r5, [r4, #4]
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	bfa8      	it	ge
 80061c8:	6821      	ldrge	r1, [r4, #0]
 80061ca:	60a5      	str	r5, [r4, #8]
 80061cc:	bfa4      	itt	ge
 80061ce:	f021 0104 	bicge.w	r1, r1, #4
 80061d2:	6021      	strge	r1, [r4, #0]
 80061d4:	b90e      	cbnz	r6, 80061da <_printf_i+0x116>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d04b      	beq.n	8006272 <_printf_i+0x1ae>
 80061da:	4615      	mov	r5, r2
 80061dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e0:	fb03 6711 	mls	r7, r3, r1, r6
 80061e4:	5dc7      	ldrb	r7, [r0, r7]
 80061e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061ea:	4637      	mov	r7, r6
 80061ec:	42bb      	cmp	r3, r7
 80061ee:	460e      	mov	r6, r1
 80061f0:	d9f4      	bls.n	80061dc <_printf_i+0x118>
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d10b      	bne.n	800620e <_printf_i+0x14a>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	07de      	lsls	r6, r3, #31
 80061fa:	d508      	bpl.n	800620e <_printf_i+0x14a>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	4299      	cmp	r1, r3
 8006202:	bfde      	ittt	le
 8006204:	2330      	movle	r3, #48	; 0x30
 8006206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800620a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800620e:	1b52      	subs	r2, r2, r5
 8006210:	6122      	str	r2, [r4, #16]
 8006212:	464b      	mov	r3, r9
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	aa03      	add	r2, sp, #12
 800621e:	f7ff fedf 	bl	8005fe0 <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	d14a      	bne.n	80062bc <_printf_i+0x1f8>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	b004      	add	sp, #16
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	f043 0320 	orr.w	r3, r3, #32
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	2778      	movs	r7, #120	; 0x78
 800623a:	4832      	ldr	r0, [pc, #200]	; (8006304 <_printf_i+0x240>)
 800623c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	6829      	ldr	r1, [r5, #0]
 8006244:	061f      	lsls	r7, r3, #24
 8006246:	f851 6b04 	ldr.w	r6, [r1], #4
 800624a:	d402      	bmi.n	8006252 <_printf_i+0x18e>
 800624c:	065f      	lsls	r7, r3, #25
 800624e:	bf48      	it	mi
 8006250:	b2b6      	uxthmi	r6, r6
 8006252:	07df      	lsls	r7, r3, #31
 8006254:	bf48      	it	mi
 8006256:	f043 0320 	orrmi.w	r3, r3, #32
 800625a:	6029      	str	r1, [r5, #0]
 800625c:	bf48      	it	mi
 800625e:	6023      	strmi	r3, [r4, #0]
 8006260:	b91e      	cbnz	r6, 800626a <_printf_i+0x1a6>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f023 0320 	bic.w	r3, r3, #32
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	2310      	movs	r3, #16
 800626c:	e7a6      	b.n	80061bc <_printf_i+0xf8>
 800626e:	4824      	ldr	r0, [pc, #144]	; (8006300 <_printf_i+0x23c>)
 8006270:	e7e4      	b.n	800623c <_printf_i+0x178>
 8006272:	4615      	mov	r5, r2
 8006274:	e7bd      	b.n	80061f2 <_printf_i+0x12e>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	6826      	ldr	r6, [r4, #0]
 800627a:	1d18      	adds	r0, r3, #4
 800627c:	6961      	ldr	r1, [r4, #20]
 800627e:	6028      	str	r0, [r5, #0]
 8006280:	0635      	lsls	r5, r6, #24
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	d501      	bpl.n	800628a <_printf_i+0x1c6>
 8006286:	6019      	str	r1, [r3, #0]
 8006288:	e002      	b.n	8006290 <_printf_i+0x1cc>
 800628a:	0670      	lsls	r0, r6, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0x1c2>
 800628e:	8019      	strh	r1, [r3, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	4615      	mov	r5, r2
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	e7bc      	b.n	8006212 <_printf_i+0x14e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	2100      	movs	r1, #0
 800629c:	1d1a      	adds	r2, r3, #4
 800629e:	602a      	str	r2, [r5, #0]
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 f9d4 	bl	8006652 <memchr>
 80062aa:	b108      	cbz	r0, 80062b0 <_printf_i+0x1ec>
 80062ac:	1b40      	subs	r0, r0, r5
 80062ae:	6060      	str	r0, [r4, #4]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	2300      	movs	r3, #0
 80062b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ba:	e7aa      	b.n	8006212 <_printf_i+0x14e>
 80062bc:	462a      	mov	r2, r5
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	47d0      	blx	sl
 80062c6:	3001      	adds	r0, #1
 80062c8:	d0ad      	beq.n	8006226 <_printf_i+0x162>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	079b      	lsls	r3, r3, #30
 80062ce:	d413      	bmi.n	80062f8 <_printf_i+0x234>
 80062d0:	68e0      	ldr	r0, [r4, #12]
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	4298      	cmp	r0, r3
 80062d6:	bfb8      	it	lt
 80062d8:	4618      	movlt	r0, r3
 80062da:	e7a6      	b.n	800622a <_printf_i+0x166>
 80062dc:	2301      	movs	r3, #1
 80062de:	4632      	mov	r2, r6
 80062e0:	4649      	mov	r1, r9
 80062e2:	4640      	mov	r0, r8
 80062e4:	47d0      	blx	sl
 80062e6:	3001      	adds	r0, #1
 80062e8:	d09d      	beq.n	8006226 <_printf_i+0x162>
 80062ea:	3501      	adds	r5, #1
 80062ec:	68e3      	ldr	r3, [r4, #12]
 80062ee:	9903      	ldr	r1, [sp, #12]
 80062f0:	1a5b      	subs	r3, r3, r1
 80062f2:	42ab      	cmp	r3, r5
 80062f4:	dcf2      	bgt.n	80062dc <_printf_i+0x218>
 80062f6:	e7eb      	b.n	80062d0 <_printf_i+0x20c>
 80062f8:	2500      	movs	r5, #0
 80062fa:	f104 0619 	add.w	r6, r4, #25
 80062fe:	e7f5      	b.n	80062ec <_printf_i+0x228>
 8006300:	08008798 	.word	0x08008798
 8006304:	080087a9 	.word	0x080087a9

08006308 <std>:
 8006308:	2300      	movs	r3, #0
 800630a:	b510      	push	{r4, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	e9c0 3300 	strd	r3, r3, [r0]
 8006312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006316:	6083      	str	r3, [r0, #8]
 8006318:	8181      	strh	r1, [r0, #12]
 800631a:	6643      	str	r3, [r0, #100]	; 0x64
 800631c:	81c2      	strh	r2, [r0, #14]
 800631e:	6183      	str	r3, [r0, #24]
 8006320:	4619      	mov	r1, r3
 8006322:	2208      	movs	r2, #8
 8006324:	305c      	adds	r0, #92	; 0x5c
 8006326:	f000 f914 	bl	8006552 <memset>
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <std+0x58>)
 800632c:	6224      	str	r4, [r4, #32]
 800632e:	6263      	str	r3, [r4, #36]	; 0x24
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <std+0x5c>)
 8006332:	62a3      	str	r3, [r4, #40]	; 0x28
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <std+0x60>)
 8006336:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <std+0x64>)
 800633a:	6323      	str	r3, [r4, #48]	; 0x30
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <std+0x68>)
 800633e:	429c      	cmp	r4, r3
 8006340:	d006      	beq.n	8006350 <std+0x48>
 8006342:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006346:	4294      	cmp	r4, r2
 8006348:	d002      	beq.n	8006350 <std+0x48>
 800634a:	33d0      	adds	r3, #208	; 0xd0
 800634c:	429c      	cmp	r4, r3
 800634e:	d105      	bne.n	800635c <std+0x54>
 8006350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006358:	f000 b978 	b.w	800664c <__retarget_lock_init_recursive>
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	080064cd 	.word	0x080064cd
 8006364:	080064ef 	.word	0x080064ef
 8006368:	08006527 	.word	0x08006527
 800636c:	0800654b 	.word	0x0800654b
 8006370:	20000458 	.word	0x20000458

08006374 <stdio_exit_handler>:
 8006374:	4a02      	ldr	r2, [pc, #8]	; (8006380 <stdio_exit_handler+0xc>)
 8006376:	4903      	ldr	r1, [pc, #12]	; (8006384 <stdio_exit_handler+0x10>)
 8006378:	4803      	ldr	r0, [pc, #12]	; (8006388 <stdio_exit_handler+0x14>)
 800637a:	f000 b869 	b.w	8006450 <_fwalk_sglue>
 800637e:	bf00      	nop
 8006380:	20000018 	.word	0x20000018
 8006384:	08007fe5 	.word	0x08007fe5
 8006388:	20000024 	.word	0x20000024

0800638c <cleanup_stdio>:
 800638c:	6841      	ldr	r1, [r0, #4]
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <cleanup_stdio+0x34>)
 8006390:	b510      	push	{r4, lr}
 8006392:	4299      	cmp	r1, r3
 8006394:	4604      	mov	r4, r0
 8006396:	d001      	beq.n	800639c <cleanup_stdio+0x10>
 8006398:	f001 fe24 	bl	8007fe4 <_fflush_r>
 800639c:	68a1      	ldr	r1, [r4, #8]
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <cleanup_stdio+0x38>)
 80063a0:	4299      	cmp	r1, r3
 80063a2:	d002      	beq.n	80063aa <cleanup_stdio+0x1e>
 80063a4:	4620      	mov	r0, r4
 80063a6:	f001 fe1d 	bl	8007fe4 <_fflush_r>
 80063aa:	68e1      	ldr	r1, [r4, #12]
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <cleanup_stdio+0x3c>)
 80063ae:	4299      	cmp	r1, r3
 80063b0:	d004      	beq.n	80063bc <cleanup_stdio+0x30>
 80063b2:	4620      	mov	r0, r4
 80063b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b8:	f001 be14 	b.w	8007fe4 <_fflush_r>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	20000458 	.word	0x20000458
 80063c4:	200004c0 	.word	0x200004c0
 80063c8:	20000528 	.word	0x20000528

080063cc <global_stdio_init.part.0>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <global_stdio_init.part.0+0x30>)
 80063d0:	4c0b      	ldr	r4, [pc, #44]	; (8006400 <global_stdio_init.part.0+0x34>)
 80063d2:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <global_stdio_init.part.0+0x38>)
 80063d4:	4620      	mov	r0, r4
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	2104      	movs	r1, #4
 80063da:	2200      	movs	r2, #0
 80063dc:	f7ff ff94 	bl	8006308 <std>
 80063e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063e4:	2201      	movs	r2, #1
 80063e6:	2109      	movs	r1, #9
 80063e8:	f7ff ff8e 	bl	8006308 <std>
 80063ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063f0:	2202      	movs	r2, #2
 80063f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f6:	2112      	movs	r1, #18
 80063f8:	f7ff bf86 	b.w	8006308 <std>
 80063fc:	20000590 	.word	0x20000590
 8006400:	20000458 	.word	0x20000458
 8006404:	08006375 	.word	0x08006375

08006408 <__sfp_lock_acquire>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__sfp_lock_acquire+0x8>)
 800640a:	f000 b920 	b.w	800664e <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	20000599 	.word	0x20000599

08006414 <__sfp_lock_release>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__sfp_lock_release+0x8>)
 8006416:	f000 b91b 	b.w	8006650 <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	20000599 	.word	0x20000599

08006420 <__sinit>:
 8006420:	b510      	push	{r4, lr}
 8006422:	4604      	mov	r4, r0
 8006424:	f7ff fff0 	bl	8006408 <__sfp_lock_acquire>
 8006428:	6a23      	ldr	r3, [r4, #32]
 800642a:	b11b      	cbz	r3, 8006434 <__sinit+0x14>
 800642c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006430:	f7ff bff0 	b.w	8006414 <__sfp_lock_release>
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <__sinit+0x28>)
 8006436:	6223      	str	r3, [r4, #32]
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <__sinit+0x2c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f5      	bne.n	800642c <__sinit+0xc>
 8006440:	f7ff ffc4 	bl	80063cc <global_stdio_init.part.0>
 8006444:	e7f2      	b.n	800642c <__sinit+0xc>
 8006446:	bf00      	nop
 8006448:	0800638d 	.word	0x0800638d
 800644c:	20000590 	.word	0x20000590

08006450 <_fwalk_sglue>:
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	4607      	mov	r7, r0
 8006456:	4688      	mov	r8, r1
 8006458:	4614      	mov	r4, r2
 800645a:	2600      	movs	r6, #0
 800645c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006460:	f1b9 0901 	subs.w	r9, r9, #1
 8006464:	d505      	bpl.n	8006472 <_fwalk_sglue+0x22>
 8006466:	6824      	ldr	r4, [r4, #0]
 8006468:	2c00      	cmp	r4, #0
 800646a:	d1f7      	bne.n	800645c <_fwalk_sglue+0xc>
 800646c:	4630      	mov	r0, r6
 800646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d907      	bls.n	8006488 <_fwalk_sglue+0x38>
 8006478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800647c:	3301      	adds	r3, #1
 800647e:	d003      	beq.n	8006488 <_fwalk_sglue+0x38>
 8006480:	4629      	mov	r1, r5
 8006482:	4638      	mov	r0, r7
 8006484:	47c0      	blx	r8
 8006486:	4306      	orrs	r6, r0
 8006488:	3568      	adds	r5, #104	; 0x68
 800648a:	e7e9      	b.n	8006460 <_fwalk_sglue+0x10>

0800648c <siprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006492:	b500      	push	{lr}
 8006494:	b09c      	sub	sp, #112	; 0x70
 8006496:	ab1d      	add	r3, sp, #116	; 0x74
 8006498:	9002      	str	r0, [sp, #8]
 800649a:	9006      	str	r0, [sp, #24]
 800649c:	9107      	str	r1, [sp, #28]
 800649e:	9104      	str	r1, [sp, #16]
 80064a0:	4808      	ldr	r0, [pc, #32]	; (80064c4 <siprintf+0x38>)
 80064a2:	4909      	ldr	r1, [pc, #36]	; (80064c8 <siprintf+0x3c>)
 80064a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	6800      	ldr	r0, [r0, #0]
 80064ac:	a902      	add	r1, sp, #8
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	f001 fc18 	bl	8007ce4 <_svfiprintf_r>
 80064b4:	2200      	movs	r2, #0
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	b01c      	add	sp, #112	; 0x70
 80064bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c0:	b003      	add	sp, #12
 80064c2:	4770      	bx	lr
 80064c4:	20000070 	.word	0x20000070
 80064c8:	ffff0208 	.word	0xffff0208

080064cc <__sread>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	460c      	mov	r4, r1
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	f000 f86c 	bl	80065b0 <_read_r>
 80064d8:	2800      	cmp	r0, #0
 80064da:	bfab      	itete	ge
 80064dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064de:	89a3      	ldrhlt	r3, [r4, #12]
 80064e0:	181b      	addge	r3, r3, r0
 80064e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064e6:	bfac      	ite	ge
 80064e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ea:	81a3      	strhlt	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__swrite>:
 80064ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	461f      	mov	r7, r3
 80064f4:	898b      	ldrh	r3, [r1, #12]
 80064f6:	4605      	mov	r5, r0
 80064f8:	05db      	lsls	r3, r3, #23
 80064fa:	460c      	mov	r4, r1
 80064fc:	4616      	mov	r6, r2
 80064fe:	d505      	bpl.n	800650c <__swrite+0x1e>
 8006500:	2302      	movs	r3, #2
 8006502:	2200      	movs	r2, #0
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	f000 f840 	bl	800658c <_lseek_r>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	4632      	mov	r2, r6
 8006510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	4628      	mov	r0, r5
 8006518:	463b      	mov	r3, r7
 800651a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800651e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006522:	f000 b857 	b.w	80065d4 <_write_r>

08006526 <__sseek>:
 8006526:	b510      	push	{r4, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652e:	f000 f82d 	bl	800658c <_lseek_r>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	bf15      	itete	ne
 8006538:	6560      	strne	r0, [r4, #84]	; 0x54
 800653a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800653e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006542:	81a3      	strheq	r3, [r4, #12]
 8006544:	bf18      	it	ne
 8006546:	81a3      	strhne	r3, [r4, #12]
 8006548:	bd10      	pop	{r4, pc}

0800654a <__sclose>:
 800654a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654e:	f000 b80d 	b.w	800656c <_close_r>

08006552 <memset>:
 8006552:	4603      	mov	r3, r0
 8006554:	4402      	add	r2, r0
 8006556:	4293      	cmp	r3, r2
 8006558:	d100      	bne.n	800655c <memset+0xa>
 800655a:	4770      	bx	lr
 800655c:	f803 1b01 	strb.w	r1, [r3], #1
 8006560:	e7f9      	b.n	8006556 <memset+0x4>
	...

08006564 <_localeconv_r>:
 8006564:	4800      	ldr	r0, [pc, #0]	; (8006568 <_localeconv_r+0x4>)
 8006566:	4770      	bx	lr
 8006568:	20000164 	.word	0x20000164

0800656c <_close_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	2300      	movs	r3, #0
 8006570:	4d05      	ldr	r5, [pc, #20]	; (8006588 <_close_r+0x1c>)
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	f7fb ffae 	bl	80024d8 <_close>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_close_r+0x1a>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_close_r+0x1a>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	20000594 	.word	0x20000594

0800658c <_lseek_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	2200      	movs	r2, #0
 8006596:	4d05      	ldr	r5, [pc, #20]	; (80065ac <_lseek_r+0x20>)
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb ffc0 	bl	8002520 <_lseek>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_lseek_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_lseek_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000594 	.word	0x20000594

080065b0 <_read_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	2200      	movs	r2, #0
 80065ba:	4d05      	ldr	r5, [pc, #20]	; (80065d0 <_read_r+0x20>)
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb ff51 	bl	8002466 <_read>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_read_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_read_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20000594 	.word	0x20000594

080065d4 <_write_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4604      	mov	r4, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	2200      	movs	r2, #0
 80065de:	4d05      	ldr	r5, [pc, #20]	; (80065f4 <_write_r+0x20>)
 80065e0:	602a      	str	r2, [r5, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7fb ff5c 	bl	80024a0 <_write>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_write_r+0x1e>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_write_r+0x1e>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	20000594 	.word	0x20000594

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000070 	.word	0x20000070

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2600      	movs	r6, #0
 8006608:	4d0c      	ldr	r5, [pc, #48]	; (800663c <__libc_init_array+0x38>)
 800660a:	4c0d      	ldr	r4, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	f002 f886 	bl	8008724 <_init>
 8006618:	2600      	movs	r6, #0
 800661a:	4d0a      	ldr	r5, [pc, #40]	; (8006644 <__libc_init_array+0x40>)
 800661c:	4c0a      	ldr	r4, [pc, #40]	; (8006648 <__libc_init_array+0x44>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	08008af4 	.word	0x08008af4
 8006640:	08008af4 	.word	0x08008af4
 8006644:	08008af4 	.word	0x08008af4
 8006648:	08008af8 	.word	0x08008af8

0800664c <__retarget_lock_init_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_acquire_recursive>:
 800664e:	4770      	bx	lr

08006650 <__retarget_lock_release_recursive>:
 8006650:	4770      	bx	lr

08006652 <memchr>:
 8006652:	4603      	mov	r3, r0
 8006654:	b510      	push	{r4, lr}
 8006656:	b2c9      	uxtb	r1, r1
 8006658:	4402      	add	r2, r0
 800665a:	4293      	cmp	r3, r2
 800665c:	4618      	mov	r0, r3
 800665e:	d101      	bne.n	8006664 <memchr+0x12>
 8006660:	2000      	movs	r0, #0
 8006662:	e003      	b.n	800666c <memchr+0x1a>
 8006664:	7804      	ldrb	r4, [r0, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	428c      	cmp	r4, r1
 800666a:	d1f6      	bne.n	800665a <memchr+0x8>
 800666c:	bd10      	pop	{r4, pc}

0800666e <quorem>:
 800666e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006672:	6903      	ldr	r3, [r0, #16]
 8006674:	690c      	ldr	r4, [r1, #16]
 8006676:	4607      	mov	r7, r0
 8006678:	42a3      	cmp	r3, r4
 800667a:	db7f      	blt.n	800677c <quorem+0x10e>
 800667c:	3c01      	subs	r4, #1
 800667e:	f100 0514 	add.w	r5, r0, #20
 8006682:	f101 0814 	add.w	r8, r1, #20
 8006686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006694:	3301      	adds	r3, #1
 8006696:	429a      	cmp	r2, r3
 8006698:	fbb2 f6f3 	udiv	r6, r2, r3
 800669c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066a4:	d331      	bcc.n	800670a <quorem+0x9c>
 80066a6:	f04f 0e00 	mov.w	lr, #0
 80066aa:	4640      	mov	r0, r8
 80066ac:	46ac      	mov	ip, r5
 80066ae:	46f2      	mov	sl, lr
 80066b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066b4:	b293      	uxth	r3, r2
 80066b6:	fb06 e303 	mla	r3, r6, r3, lr
 80066ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066be:	0c1a      	lsrs	r2, r3, #16
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	fb06 220e 	mla	r2, r6, lr, r2
 80066c6:	ebaa 0303 	sub.w	r3, sl, r3
 80066ca:	f8dc a000 	ldr.w	sl, [ip]
 80066ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066d2:	fa1f fa8a 	uxth.w	sl, sl
 80066d6:	4453      	add	r3, sl
 80066d8:	f8dc a000 	ldr.w	sl, [ip]
 80066dc:	b292      	uxth	r2, r2
 80066de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ec:	4581      	cmp	r9, r0
 80066ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066f2:	f84c 3b04 	str.w	r3, [ip], #4
 80066f6:	d2db      	bcs.n	80066b0 <quorem+0x42>
 80066f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066fc:	b92b      	cbnz	r3, 800670a <quorem+0x9c>
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	3b04      	subs	r3, #4
 8006702:	429d      	cmp	r5, r3
 8006704:	461a      	mov	r2, r3
 8006706:	d32d      	bcc.n	8006764 <quorem+0xf6>
 8006708:	613c      	str	r4, [r7, #16]
 800670a:	4638      	mov	r0, r7
 800670c:	f001 f992 	bl	8007a34 <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	db23      	blt.n	800675c <quorem+0xee>
 8006714:	4629      	mov	r1, r5
 8006716:	2000      	movs	r0, #0
 8006718:	3601      	adds	r6, #1
 800671a:	f858 2b04 	ldr.w	r2, [r8], #4
 800671e:	f8d1 c000 	ldr.w	ip, [r1]
 8006722:	b293      	uxth	r3, r2
 8006724:	1ac3      	subs	r3, r0, r3
 8006726:	0c12      	lsrs	r2, r2, #16
 8006728:	fa1f f08c 	uxth.w	r0, ip
 800672c:	4403      	add	r3, r0
 800672e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006736:	b29b      	uxth	r3, r3
 8006738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800673c:	45c1      	cmp	r9, r8
 800673e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006742:	f841 3b04 	str.w	r3, [r1], #4
 8006746:	d2e8      	bcs.n	800671a <quorem+0xac>
 8006748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800674c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006750:	b922      	cbnz	r2, 800675c <quorem+0xee>
 8006752:	3b04      	subs	r3, #4
 8006754:	429d      	cmp	r5, r3
 8006756:	461a      	mov	r2, r3
 8006758:	d30a      	bcc.n	8006770 <quorem+0x102>
 800675a:	613c      	str	r4, [r7, #16]
 800675c:	4630      	mov	r0, r6
 800675e:	b003      	add	sp, #12
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	3b04      	subs	r3, #4
 8006768:	2a00      	cmp	r2, #0
 800676a:	d1cd      	bne.n	8006708 <quorem+0x9a>
 800676c:	3c01      	subs	r4, #1
 800676e:	e7c8      	b.n	8006702 <quorem+0x94>
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	3b04      	subs	r3, #4
 8006774:	2a00      	cmp	r2, #0
 8006776:	d1f0      	bne.n	800675a <quorem+0xec>
 8006778:	3c01      	subs	r4, #1
 800677a:	e7eb      	b.n	8006754 <quorem+0xe6>
 800677c:	2000      	movs	r0, #0
 800677e:	e7ee      	b.n	800675e <quorem+0xf0>

08006780 <_dtoa_r>:
 8006780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	4616      	mov	r6, r2
 8006786:	461f      	mov	r7, r3
 8006788:	69c4      	ldr	r4, [r0, #28]
 800678a:	b099      	sub	sp, #100	; 0x64
 800678c:	4605      	mov	r5, r0
 800678e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006792:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006796:	b974      	cbnz	r4, 80067b6 <_dtoa_r+0x36>
 8006798:	2010      	movs	r0, #16
 800679a:	f000 fe1d 	bl	80073d8 <malloc>
 800679e:	4602      	mov	r2, r0
 80067a0:	61e8      	str	r0, [r5, #28]
 80067a2:	b920      	cbnz	r0, 80067ae <_dtoa_r+0x2e>
 80067a4:	21ef      	movs	r1, #239	; 0xef
 80067a6:	4bac      	ldr	r3, [pc, #688]	; (8006a58 <_dtoa_r+0x2d8>)
 80067a8:	48ac      	ldr	r0, [pc, #688]	; (8006a5c <_dtoa_r+0x2dc>)
 80067aa:	f001 fc7b 	bl	80080a4 <__assert_func>
 80067ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067b2:	6004      	str	r4, [r0, #0]
 80067b4:	60c4      	str	r4, [r0, #12]
 80067b6:	69eb      	ldr	r3, [r5, #28]
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	b151      	cbz	r1, 80067d2 <_dtoa_r+0x52>
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	2301      	movs	r3, #1
 80067c0:	4093      	lsls	r3, r2
 80067c2:	604a      	str	r2, [r1, #4]
 80067c4:	608b      	str	r3, [r1, #8]
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fefa 	bl	80075c0 <_Bfree>
 80067cc:	2200      	movs	r2, #0
 80067ce:	69eb      	ldr	r3, [r5, #28]
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	1e3b      	subs	r3, r7, #0
 80067d4:	bfaf      	iteee	ge
 80067d6:	2300      	movge	r3, #0
 80067d8:	2201      	movlt	r2, #1
 80067da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067de:	9305      	strlt	r3, [sp, #20]
 80067e0:	bfa8      	it	ge
 80067e2:	f8c8 3000 	strge.w	r3, [r8]
 80067e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80067ea:	4b9d      	ldr	r3, [pc, #628]	; (8006a60 <_dtoa_r+0x2e0>)
 80067ec:	bfb8      	it	lt
 80067ee:	f8c8 2000 	strlt.w	r2, [r8]
 80067f2:	ea33 0309 	bics.w	r3, r3, r9
 80067f6:	d119      	bne.n	800682c <_dtoa_r+0xac>
 80067f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80067fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006804:	4333      	orrs	r3, r6
 8006806:	f000 8589 	beq.w	800731c <_dtoa_r+0xb9c>
 800680a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800680c:	b953      	cbnz	r3, 8006824 <_dtoa_r+0xa4>
 800680e:	4b95      	ldr	r3, [pc, #596]	; (8006a64 <_dtoa_r+0x2e4>)
 8006810:	e023      	b.n	800685a <_dtoa_r+0xda>
 8006812:	4b95      	ldr	r3, [pc, #596]	; (8006a68 <_dtoa_r+0x2e8>)
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	3308      	adds	r3, #8
 8006818:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	9803      	ldr	r0, [sp, #12]
 800681e:	b019      	add	sp, #100	; 0x64
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4b8f      	ldr	r3, [pc, #572]	; (8006a64 <_dtoa_r+0x2e4>)
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	3303      	adds	r3, #3
 800682a:	e7f5      	b.n	8006818 <_dtoa_r+0x98>
 800682c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006830:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006838:	2200      	movs	r2, #0
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8006840:	4680      	mov	r8, r0
 8006842:	b160      	cbz	r0, 800685e <_dtoa_r+0xde>
 8006844:	2301      	movs	r3, #1
 8006846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8562 	beq.w	8007316 <_dtoa_r+0xb96>
 8006852:	4b86      	ldr	r3, [pc, #536]	; (8006a6c <_dtoa_r+0x2ec>)
 8006854:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	e7de      	b.n	800681c <_dtoa_r+0x9c>
 800685e:	ab16      	add	r3, sp, #88	; 0x58
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	ab17      	add	r3, sp, #92	; 0x5c
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4628      	mov	r0, r5
 8006868:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800686c:	f001 f98a 	bl	8007b84 <__d2b>
 8006870:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006874:	4682      	mov	sl, r0
 8006876:	2c00      	cmp	r4, #0
 8006878:	d07e      	beq.n	8006978 <_dtoa_r+0x1f8>
 800687a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800687e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006880:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006888:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800688c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006890:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006894:	4619      	mov	r1, r3
 8006896:	2200      	movs	r2, #0
 8006898:	4b75      	ldr	r3, [pc, #468]	; (8006a70 <_dtoa_r+0x2f0>)
 800689a:	f7f9 fc65 	bl	8000168 <__aeabi_dsub>
 800689e:	a368      	add	r3, pc, #416	; (adr r3, 8006a40 <_dtoa_r+0x2c0>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fe18 	bl	80004d8 <__aeabi_dmul>
 80068a8:	a367      	add	r3, pc, #412	; (adr r3, 8006a48 <_dtoa_r+0x2c8>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fc5d 	bl	800016c <__adddf3>
 80068b2:	4606      	mov	r6, r0
 80068b4:	4620      	mov	r0, r4
 80068b6:	460f      	mov	r7, r1
 80068b8:	f7f9 fda4 	bl	8000404 <__aeabi_i2d>
 80068bc:	a364      	add	r3, pc, #400	; (adr r3, 8006a50 <_dtoa_r+0x2d0>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4630      	mov	r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	f7f9 fc4d 	bl	800016c <__adddf3>
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	f7fa f8af 	bl	8000a38 <__aeabi_d2iz>
 80068da:	2200      	movs	r2, #0
 80068dc:	4683      	mov	fp, r0
 80068de:	2300      	movs	r3, #0
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f86a 	bl	80009bc <__aeabi_dcmplt>
 80068e8:	b148      	cbz	r0, 80068fe <_dtoa_r+0x17e>
 80068ea:	4658      	mov	r0, fp
 80068ec:	f7f9 fd8a 	bl	8000404 <__aeabi_i2d>
 80068f0:	4632      	mov	r2, r6
 80068f2:	463b      	mov	r3, r7
 80068f4:	f7fa f858 	bl	80009a8 <__aeabi_dcmpeq>
 80068f8:	b908      	cbnz	r0, 80068fe <_dtoa_r+0x17e>
 80068fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068fe:	f1bb 0f16 	cmp.w	fp, #22
 8006902:	d857      	bhi.n	80069b4 <_dtoa_r+0x234>
 8006904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006908:	4b5a      	ldr	r3, [pc, #360]	; (8006a74 <_dtoa_r+0x2f4>)
 800690a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7fa f853 	bl	80009bc <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	d04e      	beq.n	80069b8 <_dtoa_r+0x238>
 800691a:	2300      	movs	r3, #0
 800691c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006920:	930f      	str	r3, [sp, #60]	; 0x3c
 8006922:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006924:	1b1b      	subs	r3, r3, r4
 8006926:	1e5a      	subs	r2, r3, #1
 8006928:	bf46      	itte	mi
 800692a:	f1c3 0901 	rsbmi	r9, r3, #1
 800692e:	2300      	movmi	r3, #0
 8006930:	f04f 0900 	movpl.w	r9, #0
 8006934:	9209      	str	r2, [sp, #36]	; 0x24
 8006936:	bf48      	it	mi
 8006938:	9309      	strmi	r3, [sp, #36]	; 0x24
 800693a:	f1bb 0f00 	cmp.w	fp, #0
 800693e:	db3d      	blt.n	80069bc <_dtoa_r+0x23c>
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006946:	445b      	add	r3, fp
 8006948:	9309      	str	r3, [sp, #36]	; 0x24
 800694a:	2300      	movs	r3, #0
 800694c:	930a      	str	r3, [sp, #40]	; 0x28
 800694e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006950:	2b09      	cmp	r3, #9
 8006952:	d867      	bhi.n	8006a24 <_dtoa_r+0x2a4>
 8006954:	2b05      	cmp	r3, #5
 8006956:	bfc4      	itt	gt
 8006958:	3b04      	subgt	r3, #4
 800695a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800695c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800695e:	bfc8      	it	gt
 8006960:	2400      	movgt	r4, #0
 8006962:	f1a3 0302 	sub.w	r3, r3, #2
 8006966:	bfd8      	it	le
 8006968:	2401      	movle	r4, #1
 800696a:	2b03      	cmp	r3, #3
 800696c:	f200 8086 	bhi.w	8006a7c <_dtoa_r+0x2fc>
 8006970:	e8df f003 	tbb	[pc, r3]
 8006974:	5637392c 	.word	0x5637392c
 8006978:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800697c:	441c      	add	r4, r3
 800697e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006982:	2b20      	cmp	r3, #32
 8006984:	bfc1      	itttt	gt
 8006986:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800698a:	fa09 f903 	lslgt.w	r9, r9, r3
 800698e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006992:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006996:	bfd6      	itet	le
 8006998:	f1c3 0320 	rsble	r3, r3, #32
 800699c:	ea49 0003 	orrgt.w	r0, r9, r3
 80069a0:	fa06 f003 	lslle.w	r0, r6, r3
 80069a4:	f7f9 fd1e 	bl	80003e4 <__aeabi_ui2d>
 80069a8:	2201      	movs	r2, #1
 80069aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80069ae:	3c01      	subs	r4, #1
 80069b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80069b2:	e76f      	b.n	8006894 <_dtoa_r+0x114>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e7b3      	b.n	8006920 <_dtoa_r+0x1a0>
 80069b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80069ba:	e7b2      	b.n	8006922 <_dtoa_r+0x1a2>
 80069bc:	f1cb 0300 	rsb	r3, fp, #0
 80069c0:	930a      	str	r3, [sp, #40]	; 0x28
 80069c2:	2300      	movs	r3, #0
 80069c4:	eba9 090b 	sub.w	r9, r9, fp
 80069c8:	930e      	str	r3, [sp, #56]	; 0x38
 80069ca:	e7c0      	b.n	800694e <_dtoa_r+0x1ce>
 80069cc:	2300      	movs	r3, #0
 80069ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dc55      	bgt.n	8006a82 <_dtoa_r+0x302>
 80069d6:	2301      	movs	r3, #1
 80069d8:	461a      	mov	r2, r3
 80069da:	9306      	str	r3, [sp, #24]
 80069dc:	9308      	str	r3, [sp, #32]
 80069de:	9223      	str	r2, [sp, #140]	; 0x8c
 80069e0:	e00b      	b.n	80069fa <_dtoa_r+0x27a>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f3      	b.n	80069ce <_dtoa_r+0x24e>
 80069e6:	2300      	movs	r3, #0
 80069e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ec:	445b      	add	r3, fp
 80069ee:	9306      	str	r3, [sp, #24]
 80069f0:	3301      	adds	r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	9308      	str	r3, [sp, #32]
 80069f6:	bfb8      	it	lt
 80069f8:	2301      	movlt	r3, #1
 80069fa:	2100      	movs	r1, #0
 80069fc:	2204      	movs	r2, #4
 80069fe:	69e8      	ldr	r0, [r5, #28]
 8006a00:	f102 0614 	add.w	r6, r2, #20
 8006a04:	429e      	cmp	r6, r3
 8006a06:	d940      	bls.n	8006a8a <_dtoa_r+0x30a>
 8006a08:	6041      	str	r1, [r0, #4]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fd98 	bl	8007540 <_Balloc>
 8006a10:	9003      	str	r0, [sp, #12]
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d13c      	bne.n	8006a90 <_dtoa_r+0x310>
 8006a16:	4602      	mov	r2, r0
 8006a18:	f240 11af 	movw	r1, #431	; 0x1af
 8006a1c:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <_dtoa_r+0x2f8>)
 8006a1e:	e6c3      	b.n	80067a8 <_dtoa_r+0x28>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e7e1      	b.n	80069e8 <_dtoa_r+0x268>
 8006a24:	2401      	movs	r4, #1
 8006a26:	2300      	movs	r3, #0
 8006a28:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a2a:	9322      	str	r3, [sp, #136]	; 0x88
 8006a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a30:	2200      	movs	r2, #0
 8006a32:	9306      	str	r3, [sp, #24]
 8006a34:	9308      	str	r3, [sp, #32]
 8006a36:	2312      	movs	r3, #18
 8006a38:	e7d1      	b.n	80069de <_dtoa_r+0x25e>
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w
 8006a40:	636f4361 	.word	0x636f4361
 8006a44:	3fd287a7 	.word	0x3fd287a7
 8006a48:	8b60c8b3 	.word	0x8b60c8b3
 8006a4c:	3fc68a28 	.word	0x3fc68a28
 8006a50:	509f79fb 	.word	0x509f79fb
 8006a54:	3fd34413 	.word	0x3fd34413
 8006a58:	080087c7 	.word	0x080087c7
 8006a5c:	080087de 	.word	0x080087de
 8006a60:	7ff00000 	.word	0x7ff00000
 8006a64:	080087c3 	.word	0x080087c3
 8006a68:	080087ba 	.word	0x080087ba
 8006a6c:	08008797 	.word	0x08008797
 8006a70:	3ff80000 	.word	0x3ff80000
 8006a74:	080088c8 	.word	0x080088c8
 8006a78:	08008836 	.word	0x08008836
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a80:	e7d4      	b.n	8006a2c <_dtoa_r+0x2ac>
 8006a82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a84:	9306      	str	r3, [sp, #24]
 8006a86:	9308      	str	r3, [sp, #32]
 8006a88:	e7b7      	b.n	80069fa <_dtoa_r+0x27a>
 8006a8a:	3101      	adds	r1, #1
 8006a8c:	0052      	lsls	r2, r2, #1
 8006a8e:	e7b7      	b.n	8006a00 <_dtoa_r+0x280>
 8006a90:	69eb      	ldr	r3, [r5, #28]
 8006a92:	9a03      	ldr	r2, [sp, #12]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	2b0e      	cmp	r3, #14
 8006a9a:	f200 80a8 	bhi.w	8006bee <_dtoa_r+0x46e>
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	f000 80a5 	beq.w	8006bee <_dtoa_r+0x46e>
 8006aa4:	f1bb 0f00 	cmp.w	fp, #0
 8006aa8:	dd34      	ble.n	8006b14 <_dtoa_r+0x394>
 8006aaa:	4b9a      	ldr	r3, [pc, #616]	; (8006d14 <_dtoa_r+0x594>)
 8006aac:	f00b 020f 	and.w	r2, fp, #15
 8006ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ab8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006abc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ac0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006ac4:	d016      	beq.n	8006af4 <_dtoa_r+0x374>
 8006ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006aca:	4b93      	ldr	r3, [pc, #588]	; (8006d18 <_dtoa_r+0x598>)
 8006acc:	2703      	movs	r7, #3
 8006ace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad2:	f7f9 fe2b 	bl	800072c <__aeabi_ddiv>
 8006ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ada:	f004 040f 	and.w	r4, r4, #15
 8006ade:	4e8e      	ldr	r6, [pc, #568]	; (8006d18 <_dtoa_r+0x598>)
 8006ae0:	b954      	cbnz	r4, 8006af8 <_dtoa_r+0x378>
 8006ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aea:	f7f9 fe1f 	bl	800072c <__aeabi_ddiv>
 8006aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af2:	e029      	b.n	8006b48 <_dtoa_r+0x3c8>
 8006af4:	2702      	movs	r7, #2
 8006af6:	e7f2      	b.n	8006ade <_dtoa_r+0x35e>
 8006af8:	07e1      	lsls	r1, r4, #31
 8006afa:	d508      	bpl.n	8006b0e <_dtoa_r+0x38e>
 8006afc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b04:	f7f9 fce8 	bl	80004d8 <__aeabi_dmul>
 8006b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b0c:	3701      	adds	r7, #1
 8006b0e:	1064      	asrs	r4, r4, #1
 8006b10:	3608      	adds	r6, #8
 8006b12:	e7e5      	b.n	8006ae0 <_dtoa_r+0x360>
 8006b14:	f000 80a5 	beq.w	8006c62 <_dtoa_r+0x4e2>
 8006b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b1c:	f1cb 0400 	rsb	r4, fp, #0
 8006b20:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <_dtoa_r+0x594>)
 8006b22:	f004 020f 	and.w	r2, r4, #15
 8006b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fcd3 	bl	80004d8 <__aeabi_dmul>
 8006b32:	2702      	movs	r7, #2
 8006b34:	2300      	movs	r3, #0
 8006b36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b3a:	4e77      	ldr	r6, [pc, #476]	; (8006d18 <_dtoa_r+0x598>)
 8006b3c:	1124      	asrs	r4, r4, #4
 8006b3e:	2c00      	cmp	r4, #0
 8006b40:	f040 8084 	bne.w	8006c4c <_dtoa_r+0x4cc>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1d2      	bne.n	8006aee <_dtoa_r+0x36e>
 8006b48:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8087 	beq.w	8006c66 <_dtoa_r+0x4e6>
 8006b58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4b6f      	ldr	r3, [pc, #444]	; (8006d1c <_dtoa_r+0x59c>)
 8006b60:	f7f9 ff2c 	bl	80009bc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d07e      	beq.n	8006c66 <_dtoa_r+0x4e6>
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d07b      	beq.n	8006c66 <_dtoa_r+0x4e6>
 8006b6e:	9b06      	ldr	r3, [sp, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dd38      	ble.n	8006be6 <_dtoa_r+0x466>
 8006b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4b69      	ldr	r3, [pc, #420]	; (8006d20 <_dtoa_r+0x5a0>)
 8006b7c:	f7f9 fcac 	bl	80004d8 <__aeabi_dmul>
 8006b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b84:	9c06      	ldr	r4, [sp, #24]
 8006b86:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f7f9 fc39 	bl	8000404 <__aeabi_i2d>
 8006b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b96:	f7f9 fc9f 	bl	80004d8 <__aeabi_dmul>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b61      	ldr	r3, [pc, #388]	; (8006d24 <_dtoa_r+0x5a4>)
 8006b9e:	f7f9 fae5 	bl	800016c <__adddf3>
 8006ba2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ba6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006baa:	9611      	str	r6, [sp, #68]	; 0x44
 8006bac:	2c00      	cmp	r4, #0
 8006bae:	d15d      	bne.n	8006c6c <_dtoa_r+0x4ec>
 8006bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4b5c      	ldr	r3, [pc, #368]	; (8006d28 <_dtoa_r+0x5a8>)
 8006bb8:	f7f9 fad6 	bl	8000168 <__aeabi_dsub>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bc4:	4633      	mov	r3, r6
 8006bc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bc8:	f7f9 ff16 	bl	80009f8 <__aeabi_dcmpgt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f040 8295 	bne.w	80070fc <_dtoa_r+0x97c>
 8006bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006bdc:	f7f9 feee 	bl	80009bc <__aeabi_dcmplt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f040 8289 	bne.w	80070f8 <_dtoa_r+0x978>
 8006be6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006bea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f2c0 8151 	blt.w	8006e98 <_dtoa_r+0x718>
 8006bf6:	f1bb 0f0e 	cmp.w	fp, #14
 8006bfa:	f300 814d 	bgt.w	8006e98 <_dtoa_r+0x718>
 8006bfe:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <_dtoa_r+0x594>)
 8006c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f280 80da 	bge.w	8006dc8 <_dtoa_r+0x648>
 8006c14:	9b08      	ldr	r3, [sp, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f300 80d6 	bgt.w	8006dc8 <_dtoa_r+0x648>
 8006c1c:	f040 826b 	bne.w	80070f6 <_dtoa_r+0x976>
 8006c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c24:	2200      	movs	r2, #0
 8006c26:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <_dtoa_r+0x5a8>)
 8006c28:	f7f9 fc56 	bl	80004d8 <__aeabi_dmul>
 8006c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c30:	f7f9 fed8 	bl	80009e4 <__aeabi_dcmpge>
 8006c34:	9c08      	ldr	r4, [sp, #32]
 8006c36:	4626      	mov	r6, r4
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	f040 8241 	bne.w	80070c0 <_dtoa_r+0x940>
 8006c3e:	2331      	movs	r3, #49	; 0x31
 8006c40:	9f03      	ldr	r7, [sp, #12]
 8006c42:	f10b 0b01 	add.w	fp, fp, #1
 8006c46:	f807 3b01 	strb.w	r3, [r7], #1
 8006c4a:	e23d      	b.n	80070c8 <_dtoa_r+0x948>
 8006c4c:	07e2      	lsls	r2, r4, #31
 8006c4e:	d505      	bpl.n	8006c5c <_dtoa_r+0x4dc>
 8006c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c54:	f7f9 fc40 	bl	80004d8 <__aeabi_dmul>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	3701      	adds	r7, #1
 8006c5c:	1064      	asrs	r4, r4, #1
 8006c5e:	3608      	adds	r6, #8
 8006c60:	e76d      	b.n	8006b3e <_dtoa_r+0x3be>
 8006c62:	2702      	movs	r7, #2
 8006c64:	e770      	b.n	8006b48 <_dtoa_r+0x3c8>
 8006c66:	46d8      	mov	r8, fp
 8006c68:	9c08      	ldr	r4, [sp, #32]
 8006c6a:	e78f      	b.n	8006b8c <_dtoa_r+0x40c>
 8006c6c:	9903      	ldr	r1, [sp, #12]
 8006c6e:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <_dtoa_r+0x594>)
 8006c70:	4421      	add	r1, r4
 8006c72:	9112      	str	r1, [sp, #72]	; 0x48
 8006c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d054      	beq.n	8006d30 <_dtoa_r+0x5b0>
 8006c86:	2000      	movs	r0, #0
 8006c88:	4928      	ldr	r1, [pc, #160]	; (8006d2c <_dtoa_r+0x5ac>)
 8006c8a:	f7f9 fd4f 	bl	800072c <__aeabi_ddiv>
 8006c8e:	463b      	mov	r3, r7
 8006c90:	4632      	mov	r2, r6
 8006c92:	f7f9 fa69 	bl	8000168 <__aeabi_dsub>
 8006c96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c9a:	9f03      	ldr	r7, [sp, #12]
 8006c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca0:	f7f9 feca 	bl	8000a38 <__aeabi_d2iz>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f7f9 fbad 	bl	8000404 <__aeabi_i2d>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb2:	f7f9 fa59 	bl	8000168 <__aeabi_dsub>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	3430      	adds	r4, #48	; 0x30
 8006cbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cc4:	f807 4b01 	strb.w	r4, [r7], #1
 8006cc8:	f7f9 fe78 	bl	80009bc <__aeabi_dcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d173      	bne.n	8006db8 <_dtoa_r+0x638>
 8006cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4911      	ldr	r1, [pc, #68]	; (8006d1c <_dtoa_r+0x59c>)
 8006cd8:	f7f9 fa46 	bl	8000168 <__aeabi_dsub>
 8006cdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ce0:	f7f9 fe6c 	bl	80009bc <__aeabi_dcmplt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 80b6 	bne.w	8006e56 <_dtoa_r+0x6d6>
 8006cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cec:	429f      	cmp	r7, r3
 8006cee:	f43f af7a 	beq.w	8006be6 <_dtoa_r+0x466>
 8006cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <_dtoa_r+0x5a0>)
 8006cfa:	f7f9 fbed 	bl	80004d8 <__aeabi_dmul>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <_dtoa_r+0x5a0>)
 8006d0a:	f7f9 fbe5 	bl	80004d8 <__aeabi_dmul>
 8006d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d12:	e7c3      	b.n	8006c9c <_dtoa_r+0x51c>
 8006d14:	080088c8 	.word	0x080088c8
 8006d18:	080088a0 	.word	0x080088a0
 8006d1c:	3ff00000 	.word	0x3ff00000
 8006d20:	40240000 	.word	0x40240000
 8006d24:	401c0000 	.word	0x401c0000
 8006d28:	40140000 	.word	0x40140000
 8006d2c:	3fe00000 	.word	0x3fe00000
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 fbd0 	bl	80004d8 <__aeabi_dmul>
 8006d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d3e:	9c03      	ldr	r4, [sp, #12]
 8006d40:	9314      	str	r3, [sp, #80]	; 0x50
 8006d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d46:	f7f9 fe77 	bl	8000a38 <__aeabi_d2iz>
 8006d4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d4c:	f7f9 fb5a 	bl	8000404 <__aeabi_i2d>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d58:	f7f9 fa06 	bl	8000168 <__aeabi_dsub>
 8006d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d5e:	4606      	mov	r6, r0
 8006d60:	3330      	adds	r3, #48	; 0x30
 8006d62:	f804 3b01 	strb.w	r3, [r4], #1
 8006d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d68:	460f      	mov	r7, r1
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	d124      	bne.n	8006dbc <_dtoa_r+0x63c>
 8006d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d76:	4baf      	ldr	r3, [pc, #700]	; (8007034 <_dtoa_r+0x8b4>)
 8006d78:	f7f9 f9f8 	bl	800016c <__adddf3>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fe38 	bl	80009f8 <__aeabi_dcmpgt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d163      	bne.n	8006e54 <_dtoa_r+0x6d4>
 8006d8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d90:	2000      	movs	r0, #0
 8006d92:	49a8      	ldr	r1, [pc, #672]	; (8007034 <_dtoa_r+0x8b4>)
 8006d94:	f7f9 f9e8 	bl	8000168 <__aeabi_dsub>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fe0c 	bl	80009bc <__aeabi_dcmplt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f43f af1e 	beq.w	8006be6 <_dtoa_r+0x466>
 8006daa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006dac:	1e7b      	subs	r3, r7, #1
 8006dae:	9314      	str	r3, [sp, #80]	; 0x50
 8006db0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006db4:	2b30      	cmp	r3, #48	; 0x30
 8006db6:	d0f8      	beq.n	8006daa <_dtoa_r+0x62a>
 8006db8:	46c3      	mov	fp, r8
 8006dba:	e03b      	b.n	8006e34 <_dtoa_r+0x6b4>
 8006dbc:	4b9e      	ldr	r3, [pc, #632]	; (8007038 <_dtoa_r+0x8b8>)
 8006dbe:	f7f9 fb8b 	bl	80004d8 <__aeabi_dmul>
 8006dc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc6:	e7bc      	b.n	8006d42 <_dtoa_r+0x5c2>
 8006dc8:	9f03      	ldr	r7, [sp, #12]
 8006dca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	f7f9 fca9 	bl	800072c <__aeabi_ddiv>
 8006dda:	f7f9 fe2d 	bl	8000a38 <__aeabi_d2iz>
 8006dde:	4604      	mov	r4, r0
 8006de0:	f7f9 fb10 	bl	8000404 <__aeabi_i2d>
 8006de4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 f9b8 	bl	8000168 <__aeabi_dsub>
 8006df8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006dfc:	f807 6b01 	strb.w	r6, [r7], #1
 8006e00:	9e03      	ldr	r6, [sp, #12]
 8006e02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006e06:	1bbe      	subs	r6, r7, r6
 8006e08:	45b4      	cmp	ip, r6
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	d136      	bne.n	8006e7e <_dtoa_r+0x6fe>
 8006e10:	f7f9 f9ac 	bl	800016c <__adddf3>
 8006e14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e18:	4680      	mov	r8, r0
 8006e1a:	4689      	mov	r9, r1
 8006e1c:	f7f9 fdec 	bl	80009f8 <__aeabi_dcmpgt>
 8006e20:	bb58      	cbnz	r0, 8006e7a <_dtoa_r+0x6fa>
 8006e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fdbd 	bl	80009a8 <__aeabi_dcmpeq>
 8006e2e:	b108      	cbz	r0, 8006e34 <_dtoa_r+0x6b4>
 8006e30:	07e3      	lsls	r3, r4, #31
 8006e32:	d422      	bmi.n	8006e7a <_dtoa_r+0x6fa>
 8006e34:	4651      	mov	r1, sl
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fbc2 	bl	80075c0 <_Bfree>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e40:	703b      	strb	r3, [r7, #0]
 8006e42:	f10b 0301 	add.w	r3, fp, #1
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f43f ace6 	beq.w	800681c <_dtoa_r+0x9c>
 8006e50:	601f      	str	r7, [r3, #0]
 8006e52:	e4e3      	b.n	800681c <_dtoa_r+0x9c>
 8006e54:	4627      	mov	r7, r4
 8006e56:	463b      	mov	r3, r7
 8006e58:	461f      	mov	r7, r3
 8006e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5e:	2a39      	cmp	r2, #57	; 0x39
 8006e60:	d107      	bne.n	8006e72 <_dtoa_r+0x6f2>
 8006e62:	9a03      	ldr	r2, [sp, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1f7      	bne.n	8006e58 <_dtoa_r+0x6d8>
 8006e68:	2230      	movs	r2, #48	; 0x30
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	f108 0801 	add.w	r8, r8, #1
 8006e70:	700a      	strb	r2, [r1, #0]
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	3201      	adds	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e79e      	b.n	8006db8 <_dtoa_r+0x638>
 8006e7a:	46d8      	mov	r8, fp
 8006e7c:	e7eb      	b.n	8006e56 <_dtoa_r+0x6d6>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b6d      	ldr	r3, [pc, #436]	; (8007038 <_dtoa_r+0x8b8>)
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	2200      	movs	r2, #0
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	f7f9 fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d09b      	beq.n	8006dce <_dtoa_r+0x64e>
 8006e96:	e7cd      	b.n	8006e34 <_dtoa_r+0x6b4>
 8006e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	f000 80c4 	beq.w	8007028 <_dtoa_r+0x8a8>
 8006ea0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ea2:	2a01      	cmp	r2, #1
 8006ea4:	f300 80a8 	bgt.w	8006ff8 <_dtoa_r+0x878>
 8006ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	f000 80a0 	beq.w	8006ff0 <_dtoa_r+0x870>
 8006eb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006eb4:	464f      	mov	r7, r9
 8006eb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eba:	2101      	movs	r1, #1
 8006ebc:	441a      	add	r2, r3
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	4499      	add	r9, r3
 8006ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec4:	f000 fc32 	bl	800772c <__i2b>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	b15f      	cbz	r7, 8006ee4 <_dtoa_r+0x764>
 8006ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd08      	ble.n	8006ee4 <_dtoa_r+0x764>
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	bfa8      	it	ge
 8006ed6:	463b      	movge	r3, r7
 8006ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eda:	eba9 0903 	sub.w	r9, r9, r3
 8006ede:	1aff      	subs	r7, r7, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee6:	b1f3      	cbz	r3, 8006f26 <_dtoa_r+0x7a6>
 8006ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80a0 	beq.w	8007030 <_dtoa_r+0x8b0>
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	dd10      	ble.n	8006f16 <_dtoa_r+0x796>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f000 fcd5 	bl	80078a8 <__pow5mult>
 8006efe:	4652      	mov	r2, sl
 8006f00:	4601      	mov	r1, r0
 8006f02:	4606      	mov	r6, r0
 8006f04:	4628      	mov	r0, r5
 8006f06:	f000 fc27 	bl	8007758 <__multiply>
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 fb56 	bl	80075c0 <_Bfree>
 8006f14:	46c2      	mov	sl, r8
 8006f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f18:	1b1a      	subs	r2, r3, r4
 8006f1a:	d004      	beq.n	8006f26 <_dtoa_r+0x7a6>
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 fcc2 	bl	80078a8 <__pow5mult>
 8006f24:	4682      	mov	sl, r0
 8006f26:	2101      	movs	r1, #1
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 fbff 	bl	800772c <__i2b>
 8006f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f30:	4604      	mov	r4, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f340 8082 	ble.w	800703c <_dtoa_r+0x8bc>
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 fcb3 	bl	80078a8 <__pow5mult>
 8006f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f44:	4604      	mov	r4, r0
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	dd7b      	ble.n	8007042 <_dtoa_r+0x8c2>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f54:	6918      	ldr	r0, [r3, #16]
 8006f56:	f000 fb9b 	bl	8007690 <__hi0bits>
 8006f5a:	f1c0 0020 	rsb	r0, r0, #32
 8006f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f60:	4418      	add	r0, r3
 8006f62:	f010 001f 	ands.w	r0, r0, #31
 8006f66:	f000 8092 	beq.w	800708e <_dtoa_r+0x90e>
 8006f6a:	f1c0 0320 	rsb	r3, r0, #32
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	f340 8085 	ble.w	800707e <_dtoa_r+0x8fe>
 8006f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f76:	f1c0 001c 	rsb	r0, r0, #28
 8006f7a:	4403      	add	r3, r0
 8006f7c:	4481      	add	r9, r0
 8006f7e:	4407      	add	r7, r0
 8006f80:	9309      	str	r3, [sp, #36]	; 0x24
 8006f82:	f1b9 0f00 	cmp.w	r9, #0
 8006f86:	dd05      	ble.n	8006f94 <_dtoa_r+0x814>
 8006f88:	4651      	mov	r1, sl
 8006f8a:	464a      	mov	r2, r9
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fce5 	bl	800795c <__lshift>
 8006f92:	4682      	mov	sl, r0
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dd05      	ble.n	8006fa6 <_dtoa_r+0x826>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 fcdc 	bl	800795c <__lshift>
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d072      	beq.n	8007092 <_dtoa_r+0x912>
 8006fac:	4621      	mov	r1, r4
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f000 fd40 	bl	8007a34 <__mcmp>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	da6c      	bge.n	8007092 <_dtoa_r+0x912>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4651      	mov	r1, sl
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 fb20 	bl	8007604 <__multadd>
 8006fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 81ac 	beq.w	800732a <_dtoa_r+0xbaa>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 fb13 	bl	8007604 <__multadd>
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f300 8093 	bgt.w	800710e <_dtoa_r+0x98e>
 8006fe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	dc59      	bgt.n	80070a2 <_dtoa_r+0x922>
 8006fee:	e08e      	b.n	800710e <_dtoa_r+0x98e>
 8006ff0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ff2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ff6:	e75d      	b.n	8006eb4 <_dtoa_r+0x734>
 8006ff8:	9b08      	ldr	r3, [sp, #32]
 8006ffa:	1e5c      	subs	r4, r3, #1
 8006ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffe:	42a3      	cmp	r3, r4
 8007000:	bfbf      	itttt	lt
 8007002:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007004:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007006:	1ae3      	sublt	r3, r4, r3
 8007008:	18d2      	addlt	r2, r2, r3
 800700a:	bfa8      	it	ge
 800700c:	1b1c      	subge	r4, r3, r4
 800700e:	9b08      	ldr	r3, [sp, #32]
 8007010:	bfbe      	ittt	lt
 8007012:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007014:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007016:	2400      	movlt	r4, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfb5      	itete	lt
 800701c:	eba9 0703 	sublt.w	r7, r9, r3
 8007020:	464f      	movge	r7, r9
 8007022:	2300      	movlt	r3, #0
 8007024:	9b08      	ldrge	r3, [sp, #32]
 8007026:	e747      	b.n	8006eb8 <_dtoa_r+0x738>
 8007028:	464f      	mov	r7, r9
 800702a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800702c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800702e:	e74c      	b.n	8006eca <_dtoa_r+0x74a>
 8007030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007032:	e773      	b.n	8006f1c <_dtoa_r+0x79c>
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	40240000 	.word	0x40240000
 800703c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800703e:	2b01      	cmp	r3, #1
 8007040:	dc18      	bgt.n	8007074 <_dtoa_r+0x8f4>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	b9b3      	cbnz	r3, 8007074 <_dtoa_r+0x8f4>
 8007046:	9b05      	ldr	r3, [sp, #20]
 8007048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704c:	b993      	cbnz	r3, 8007074 <_dtoa_r+0x8f4>
 800704e:	9b05      	ldr	r3, [sp, #20]
 8007050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007054:	0d1b      	lsrs	r3, r3, #20
 8007056:	051b      	lsls	r3, r3, #20
 8007058:	b17b      	cbz	r3, 800707a <_dtoa_r+0x8fa>
 800705a:	f04f 0801 	mov.w	r8, #1
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	f109 0901 	add.w	r9, r9, #1
 8007064:	3301      	adds	r3, #1
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800706a:	2b00      	cmp	r3, #0
 800706c:	f47f af6f 	bne.w	8006f4e <_dtoa_r+0x7ce>
 8007070:	2001      	movs	r0, #1
 8007072:	e774      	b.n	8006f5e <_dtoa_r+0x7de>
 8007074:	f04f 0800 	mov.w	r8, #0
 8007078:	e7f6      	b.n	8007068 <_dtoa_r+0x8e8>
 800707a:	4698      	mov	r8, r3
 800707c:	e7f4      	b.n	8007068 <_dtoa_r+0x8e8>
 800707e:	d080      	beq.n	8006f82 <_dtoa_r+0x802>
 8007080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007082:	331c      	adds	r3, #28
 8007084:	441a      	add	r2, r3
 8007086:	4499      	add	r9, r3
 8007088:	441f      	add	r7, r3
 800708a:	9209      	str	r2, [sp, #36]	; 0x24
 800708c:	e779      	b.n	8006f82 <_dtoa_r+0x802>
 800708e:	4603      	mov	r3, r0
 8007090:	e7f6      	b.n	8007080 <_dtoa_r+0x900>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dc34      	bgt.n	8007102 <_dtoa_r+0x982>
 8007098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800709a:	2b02      	cmp	r3, #2
 800709c:	dd31      	ble.n	8007102 <_dtoa_r+0x982>
 800709e:	9b08      	ldr	r3, [sp, #32]
 80070a0:	9306      	str	r3, [sp, #24]
 80070a2:	9b06      	ldr	r3, [sp, #24]
 80070a4:	b963      	cbnz	r3, 80070c0 <_dtoa_r+0x940>
 80070a6:	4621      	mov	r1, r4
 80070a8:	2205      	movs	r2, #5
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 faaa 	bl	8007604 <__multadd>
 80070b0:	4601      	mov	r1, r0
 80070b2:	4604      	mov	r4, r0
 80070b4:	4650      	mov	r0, sl
 80070b6:	f000 fcbd 	bl	8007a34 <__mcmp>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f73f adbf 	bgt.w	8006c3e <_dtoa_r+0x4be>
 80070c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070c2:	9f03      	ldr	r7, [sp, #12]
 80070c4:	ea6f 0b03 	mvn.w	fp, r3
 80070c8:	f04f 0800 	mov.w	r8, #0
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 fa76 	bl	80075c0 <_Bfree>
 80070d4:	2e00      	cmp	r6, #0
 80070d6:	f43f aead 	beq.w	8006e34 <_dtoa_r+0x6b4>
 80070da:	f1b8 0f00 	cmp.w	r8, #0
 80070de:	d005      	beq.n	80070ec <_dtoa_r+0x96c>
 80070e0:	45b0      	cmp	r8, r6
 80070e2:	d003      	beq.n	80070ec <_dtoa_r+0x96c>
 80070e4:	4641      	mov	r1, r8
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fa6a 	bl	80075c0 <_Bfree>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 fa66 	bl	80075c0 <_Bfree>
 80070f4:	e69e      	b.n	8006e34 <_dtoa_r+0x6b4>
 80070f6:	2400      	movs	r4, #0
 80070f8:	4626      	mov	r6, r4
 80070fa:	e7e1      	b.n	80070c0 <_dtoa_r+0x940>
 80070fc:	46c3      	mov	fp, r8
 80070fe:	4626      	mov	r6, r4
 8007100:	e59d      	b.n	8006c3e <_dtoa_r+0x4be>
 8007102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80c8 	beq.w	800729a <_dtoa_r+0xb1a>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	9306      	str	r3, [sp, #24]
 800710e:	2f00      	cmp	r7, #0
 8007110:	dd05      	ble.n	800711e <_dtoa_r+0x99e>
 8007112:	4631      	mov	r1, r6
 8007114:	463a      	mov	r2, r7
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fc20 	bl	800795c <__lshift>
 800711c:	4606      	mov	r6, r0
 800711e:	f1b8 0f00 	cmp.w	r8, #0
 8007122:	d05b      	beq.n	80071dc <_dtoa_r+0xa5c>
 8007124:	4628      	mov	r0, r5
 8007126:	6871      	ldr	r1, [r6, #4]
 8007128:	f000 fa0a 	bl	8007540 <_Balloc>
 800712c:	4607      	mov	r7, r0
 800712e:	b928      	cbnz	r0, 800713c <_dtoa_r+0x9bc>
 8007130:	4602      	mov	r2, r0
 8007132:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007136:	4b81      	ldr	r3, [pc, #516]	; (800733c <_dtoa_r+0xbbc>)
 8007138:	f7ff bb36 	b.w	80067a8 <_dtoa_r+0x28>
 800713c:	6932      	ldr	r2, [r6, #16]
 800713e:	f106 010c 	add.w	r1, r6, #12
 8007142:	3202      	adds	r2, #2
 8007144:	0092      	lsls	r2, r2, #2
 8007146:	300c      	adds	r0, #12
 8007148:	f000 ff9e 	bl	8008088 <memcpy>
 800714c:	2201      	movs	r2, #1
 800714e:	4639      	mov	r1, r7
 8007150:	4628      	mov	r0, r5
 8007152:	f000 fc03 	bl	800795c <__lshift>
 8007156:	46b0      	mov	r8, r6
 8007158:	4606      	mov	r6, r0
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	9a03      	ldr	r2, [sp, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	4413      	add	r3, r2
 8007166:	930b      	str	r3, [sp, #44]	; 0x2c
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	930a      	str	r3, [sp, #40]	; 0x28
 8007170:	9b08      	ldr	r3, [sp, #32]
 8007172:	4621      	mov	r1, r4
 8007174:	3b01      	subs	r3, #1
 8007176:	4650      	mov	r0, sl
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	f7ff fa78 	bl	800666e <quorem>
 800717e:	4641      	mov	r1, r8
 8007180:	9006      	str	r0, [sp, #24]
 8007182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007186:	4650      	mov	r0, sl
 8007188:	f000 fc54 	bl	8007a34 <__mcmp>
 800718c:	4632      	mov	r2, r6
 800718e:	9009      	str	r0, [sp, #36]	; 0x24
 8007190:	4621      	mov	r1, r4
 8007192:	4628      	mov	r0, r5
 8007194:	f000 fc6a 	bl	8007a6c <__mdiff>
 8007198:	68c2      	ldr	r2, [r0, #12]
 800719a:	4607      	mov	r7, r0
 800719c:	bb02      	cbnz	r2, 80071e0 <_dtoa_r+0xa60>
 800719e:	4601      	mov	r1, r0
 80071a0:	4650      	mov	r0, sl
 80071a2:	f000 fc47 	bl	8007a34 <__mcmp>
 80071a6:	4602      	mov	r2, r0
 80071a8:	4639      	mov	r1, r7
 80071aa:	4628      	mov	r0, r5
 80071ac:	920c      	str	r2, [sp, #48]	; 0x30
 80071ae:	f000 fa07 	bl	80075c0 <_Bfree>
 80071b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071b6:	9f08      	ldr	r7, [sp, #32]
 80071b8:	ea43 0102 	orr.w	r1, r3, r2
 80071bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071be:	4319      	orrs	r1, r3
 80071c0:	d110      	bne.n	80071e4 <_dtoa_r+0xa64>
 80071c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071c6:	d029      	beq.n	800721c <_dtoa_r+0xa9c>
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dd02      	ble.n	80071d4 <_dtoa_r+0xa54>
 80071ce:	9b06      	ldr	r3, [sp, #24]
 80071d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	f883 9000 	strb.w	r9, [r3]
 80071da:	e777      	b.n	80070cc <_dtoa_r+0x94c>
 80071dc:	4630      	mov	r0, r6
 80071de:	e7ba      	b.n	8007156 <_dtoa_r+0x9d6>
 80071e0:	2201      	movs	r2, #1
 80071e2:	e7e1      	b.n	80071a8 <_dtoa_r+0xa28>
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	db04      	blt.n	80071f4 <_dtoa_r+0xa74>
 80071ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80071ec:	430b      	orrs	r3, r1
 80071ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071f0:	430b      	orrs	r3, r1
 80071f2:	d120      	bne.n	8007236 <_dtoa_r+0xab6>
 80071f4:	2a00      	cmp	r2, #0
 80071f6:	dded      	ble.n	80071d4 <_dtoa_r+0xa54>
 80071f8:	4651      	mov	r1, sl
 80071fa:	2201      	movs	r2, #1
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 fbad 	bl	800795c <__lshift>
 8007202:	4621      	mov	r1, r4
 8007204:	4682      	mov	sl, r0
 8007206:	f000 fc15 	bl	8007a34 <__mcmp>
 800720a:	2800      	cmp	r0, #0
 800720c:	dc03      	bgt.n	8007216 <_dtoa_r+0xa96>
 800720e:	d1e1      	bne.n	80071d4 <_dtoa_r+0xa54>
 8007210:	f019 0f01 	tst.w	r9, #1
 8007214:	d0de      	beq.n	80071d4 <_dtoa_r+0xa54>
 8007216:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800721a:	d1d8      	bne.n	80071ce <_dtoa_r+0xa4e>
 800721c:	2339      	movs	r3, #57	; 0x39
 800721e:	9a04      	ldr	r2, [sp, #16]
 8007220:	7013      	strb	r3, [r2, #0]
 8007222:	463b      	mov	r3, r7
 8007224:	461f      	mov	r7, r3
 8007226:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800722a:	3b01      	subs	r3, #1
 800722c:	2a39      	cmp	r2, #57	; 0x39
 800722e:	d06b      	beq.n	8007308 <_dtoa_r+0xb88>
 8007230:	3201      	adds	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e74a      	b.n	80070cc <_dtoa_r+0x94c>
 8007236:	2a00      	cmp	r2, #0
 8007238:	dd07      	ble.n	800724a <_dtoa_r+0xaca>
 800723a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800723e:	d0ed      	beq.n	800721c <_dtoa_r+0xa9c>
 8007240:	9a04      	ldr	r2, [sp, #16]
 8007242:	f109 0301 	add.w	r3, r9, #1
 8007246:	7013      	strb	r3, [r2, #0]
 8007248:	e740      	b.n	80070cc <_dtoa_r+0x94c>
 800724a:	9b08      	ldr	r3, [sp, #32]
 800724c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800724e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007252:	4293      	cmp	r3, r2
 8007254:	d042      	beq.n	80072dc <_dtoa_r+0xb5c>
 8007256:	4651      	mov	r1, sl
 8007258:	2300      	movs	r3, #0
 800725a:	220a      	movs	r2, #10
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f9d1 	bl	8007604 <__multadd>
 8007262:	45b0      	cmp	r8, r6
 8007264:	4682      	mov	sl, r0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	f04f 020a 	mov.w	r2, #10
 800726e:	4641      	mov	r1, r8
 8007270:	4628      	mov	r0, r5
 8007272:	d107      	bne.n	8007284 <_dtoa_r+0xb04>
 8007274:	f000 f9c6 	bl	8007604 <__multadd>
 8007278:	4680      	mov	r8, r0
 800727a:	4606      	mov	r6, r0
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	3301      	adds	r3, #1
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	e775      	b.n	8007170 <_dtoa_r+0x9f0>
 8007284:	f000 f9be 	bl	8007604 <__multadd>
 8007288:	4631      	mov	r1, r6
 800728a:	4680      	mov	r8, r0
 800728c:	2300      	movs	r3, #0
 800728e:	220a      	movs	r2, #10
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f9b7 	bl	8007604 <__multadd>
 8007296:	4606      	mov	r6, r0
 8007298:	e7f0      	b.n	800727c <_dtoa_r+0xafc>
 800729a:	9b08      	ldr	r3, [sp, #32]
 800729c:	9306      	str	r3, [sp, #24]
 800729e:	9f03      	ldr	r7, [sp, #12]
 80072a0:	4621      	mov	r1, r4
 80072a2:	4650      	mov	r0, sl
 80072a4:	f7ff f9e3 	bl	800666e <quorem>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072ae:	f807 9b01 	strb.w	r9, [r7], #1
 80072b2:	1afa      	subs	r2, r7, r3
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	dd07      	ble.n	80072ca <_dtoa_r+0xb4a>
 80072ba:	4651      	mov	r1, sl
 80072bc:	2300      	movs	r3, #0
 80072be:	220a      	movs	r2, #10
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 f99f 	bl	8007604 <__multadd>
 80072c6:	4682      	mov	sl, r0
 80072c8:	e7ea      	b.n	80072a0 <_dtoa_r+0xb20>
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	f04f 0800 	mov.w	r8, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfcc      	ite	gt
 80072d4:	461f      	movgt	r7, r3
 80072d6:	2701      	movle	r7, #1
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	441f      	add	r7, r3
 80072dc:	4651      	mov	r1, sl
 80072de:	2201      	movs	r2, #1
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fb3b 	bl	800795c <__lshift>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4682      	mov	sl, r0
 80072ea:	f000 fba3 	bl	8007a34 <__mcmp>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	dc97      	bgt.n	8007222 <_dtoa_r+0xaa2>
 80072f2:	d102      	bne.n	80072fa <_dtoa_r+0xb7a>
 80072f4:	f019 0f01 	tst.w	r9, #1
 80072f8:	d193      	bne.n	8007222 <_dtoa_r+0xaa2>
 80072fa:	463b      	mov	r3, r7
 80072fc:	461f      	mov	r7, r3
 80072fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007302:	2a30      	cmp	r2, #48	; 0x30
 8007304:	d0fa      	beq.n	80072fc <_dtoa_r+0xb7c>
 8007306:	e6e1      	b.n	80070cc <_dtoa_r+0x94c>
 8007308:	9a03      	ldr	r2, [sp, #12]
 800730a:	429a      	cmp	r2, r3
 800730c:	d18a      	bne.n	8007224 <_dtoa_r+0xaa4>
 800730e:	2331      	movs	r3, #49	; 0x31
 8007310:	f10b 0b01 	add.w	fp, fp, #1
 8007314:	e797      	b.n	8007246 <_dtoa_r+0xac6>
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <_dtoa_r+0xbc0>)
 8007318:	f7ff ba9f 	b.w	800685a <_dtoa_r+0xda>
 800731c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800731e:	2b00      	cmp	r3, #0
 8007320:	f47f aa77 	bne.w	8006812 <_dtoa_r+0x92>
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <_dtoa_r+0xbc4>)
 8007326:	f7ff ba98 	b.w	800685a <_dtoa_r+0xda>
 800732a:	9b06      	ldr	r3, [sp, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dcb6      	bgt.n	800729e <_dtoa_r+0xb1e>
 8007330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007332:	2b02      	cmp	r3, #2
 8007334:	f73f aeb5 	bgt.w	80070a2 <_dtoa_r+0x922>
 8007338:	e7b1      	b.n	800729e <_dtoa_r+0xb1e>
 800733a:	bf00      	nop
 800733c:	08008836 	.word	0x08008836
 8007340:	08008796 	.word	0x08008796
 8007344:	080087ba 	.word	0x080087ba

08007348 <_free_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4605      	mov	r5, r0
 800734c:	2900      	cmp	r1, #0
 800734e:	d040      	beq.n	80073d2 <_free_r+0x8a>
 8007350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007354:	1f0c      	subs	r4, r1, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfb8      	it	lt
 800735a:	18e4      	addlt	r4, r4, r3
 800735c:	f000 f8e4 	bl	8007528 <__malloc_lock>
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <_free_r+0x8c>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x2c>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	4628      	mov	r0, r5
 800736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007370:	f000 b8e0 	b.w	8007534 <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x42>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x1e>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x4c>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x42>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1850      	adds	r0, r2, r1
 8007398:	42a0      	cmp	r0, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x6c>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	4401      	add	r1, r0
 80073a0:	1850      	adds	r0, r2, r1
 80073a2:	4283      	cmp	r3, r0
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x22>
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4408      	add	r0, r1
 80073ae:	6010      	str	r0, [r2, #0]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	e7da      	b.n	800736a <_free_r+0x22>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x74>
 80073b6:	230c      	movs	r3, #12
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x22>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf01      	itttt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	1809      	addeq	r1, r1, r0
 80073ca:	6021      	streq	r1, [r4, #0]
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	6054      	str	r4, [r2, #4]
 80073d0:	e7cb      	b.n	800736a <_free_r+0x22>
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	2000059c 	.word	0x2000059c

080073d8 <malloc>:
 80073d8:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <malloc+0xc>)
 80073da:	4601      	mov	r1, r0
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	f000 b823 	b.w	8007428 <_malloc_r>
 80073e2:	bf00      	nop
 80073e4:	20000070 	.word	0x20000070

080073e8 <sbrk_aligned>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4e0e      	ldr	r6, [pc, #56]	; (8007424 <sbrk_aligned+0x3c>)
 80073ec:	460c      	mov	r4, r1
 80073ee:	6831      	ldr	r1, [r6, #0]
 80073f0:	4605      	mov	r5, r0
 80073f2:	b911      	cbnz	r1, 80073fa <sbrk_aligned+0x12>
 80073f4:	f000 fe38 	bl	8008068 <_sbrk_r>
 80073f8:	6030      	str	r0, [r6, #0]
 80073fa:	4621      	mov	r1, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 fe33 	bl	8008068 <_sbrk_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d00a      	beq.n	800741c <sbrk_aligned+0x34>
 8007406:	1cc4      	adds	r4, r0, #3
 8007408:	f024 0403 	bic.w	r4, r4, #3
 800740c:	42a0      	cmp	r0, r4
 800740e:	d007      	beq.n	8007420 <sbrk_aligned+0x38>
 8007410:	1a21      	subs	r1, r4, r0
 8007412:	4628      	mov	r0, r5
 8007414:	f000 fe28 	bl	8008068 <_sbrk_r>
 8007418:	3001      	adds	r0, #1
 800741a:	d101      	bne.n	8007420 <sbrk_aligned+0x38>
 800741c:	f04f 34ff 	mov.w	r4, #4294967295
 8007420:	4620      	mov	r0, r4
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	200005a0 	.word	0x200005a0

08007428 <_malloc_r>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	1ccd      	adds	r5, r1, #3
 800742e:	f025 0503 	bic.w	r5, r5, #3
 8007432:	3508      	adds	r5, #8
 8007434:	2d0c      	cmp	r5, #12
 8007436:	bf38      	it	cc
 8007438:	250c      	movcc	r5, #12
 800743a:	2d00      	cmp	r5, #0
 800743c:	4607      	mov	r7, r0
 800743e:	db01      	blt.n	8007444 <_malloc_r+0x1c>
 8007440:	42a9      	cmp	r1, r5
 8007442:	d905      	bls.n	8007450 <_malloc_r+0x28>
 8007444:	230c      	movs	r3, #12
 8007446:	2600      	movs	r6, #0
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4630      	mov	r0, r6
 800744c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007524 <_malloc_r+0xfc>
 8007454:	f000 f868 	bl	8007528 <__malloc_lock>
 8007458:	f8d8 3000 	ldr.w	r3, [r8]
 800745c:	461c      	mov	r4, r3
 800745e:	bb5c      	cbnz	r4, 80074b8 <_malloc_r+0x90>
 8007460:	4629      	mov	r1, r5
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff ffc0 	bl	80073e8 <sbrk_aligned>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	4604      	mov	r4, r0
 800746c:	d155      	bne.n	800751a <_malloc_r+0xf2>
 800746e:	f8d8 4000 	ldr.w	r4, [r8]
 8007472:	4626      	mov	r6, r4
 8007474:	2e00      	cmp	r6, #0
 8007476:	d145      	bne.n	8007504 <_malloc_r+0xdc>
 8007478:	2c00      	cmp	r4, #0
 800747a:	d048      	beq.n	800750e <_malloc_r+0xe6>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	4631      	mov	r1, r6
 8007480:	4638      	mov	r0, r7
 8007482:	eb04 0903 	add.w	r9, r4, r3
 8007486:	f000 fdef 	bl	8008068 <_sbrk_r>
 800748a:	4581      	cmp	r9, r0
 800748c:	d13f      	bne.n	800750e <_malloc_r+0xe6>
 800748e:	6821      	ldr	r1, [r4, #0]
 8007490:	4638      	mov	r0, r7
 8007492:	1a6d      	subs	r5, r5, r1
 8007494:	4629      	mov	r1, r5
 8007496:	f7ff ffa7 	bl	80073e8 <sbrk_aligned>
 800749a:	3001      	adds	r0, #1
 800749c:	d037      	beq.n	800750e <_malloc_r+0xe6>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	442b      	add	r3, r5
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	f8d8 3000 	ldr.w	r3, [r8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d038      	beq.n	800751e <_malloc_r+0xf6>
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	42a2      	cmp	r2, r4
 80074b0:	d12b      	bne.n	800750a <_malloc_r+0xe2>
 80074b2:	2200      	movs	r2, #0
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	e00f      	b.n	80074d8 <_malloc_r+0xb0>
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	1b52      	subs	r2, r2, r5
 80074bc:	d41f      	bmi.n	80074fe <_malloc_r+0xd6>
 80074be:	2a0b      	cmp	r2, #11
 80074c0:	d917      	bls.n	80074f2 <_malloc_r+0xca>
 80074c2:	1961      	adds	r1, r4, r5
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	6025      	str	r5, [r4, #0]
 80074c8:	bf18      	it	ne
 80074ca:	6059      	strne	r1, [r3, #4]
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	bf08      	it	eq
 80074d0:	f8c8 1000 	streq.w	r1, [r8]
 80074d4:	5162      	str	r2, [r4, r5]
 80074d6:	604b      	str	r3, [r1, #4]
 80074d8:	4638      	mov	r0, r7
 80074da:	f104 060b 	add.w	r6, r4, #11
 80074de:	f000 f829 	bl	8007534 <__malloc_unlock>
 80074e2:	f026 0607 	bic.w	r6, r6, #7
 80074e6:	1d23      	adds	r3, r4, #4
 80074e8:	1af2      	subs	r2, r6, r3
 80074ea:	d0ae      	beq.n	800744a <_malloc_r+0x22>
 80074ec:	1b9b      	subs	r3, r3, r6
 80074ee:	50a3      	str	r3, [r4, r2]
 80074f0:	e7ab      	b.n	800744a <_malloc_r+0x22>
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	6862      	ldr	r2, [r4, #4]
 80074f6:	d1dd      	bne.n	80074b4 <_malloc_r+0x8c>
 80074f8:	f8c8 2000 	str.w	r2, [r8]
 80074fc:	e7ec      	b.n	80074d8 <_malloc_r+0xb0>
 80074fe:	4623      	mov	r3, r4
 8007500:	6864      	ldr	r4, [r4, #4]
 8007502:	e7ac      	b.n	800745e <_malloc_r+0x36>
 8007504:	4634      	mov	r4, r6
 8007506:	6876      	ldr	r6, [r6, #4]
 8007508:	e7b4      	b.n	8007474 <_malloc_r+0x4c>
 800750a:	4613      	mov	r3, r2
 800750c:	e7cc      	b.n	80074a8 <_malloc_r+0x80>
 800750e:	230c      	movs	r3, #12
 8007510:	4638      	mov	r0, r7
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	f000 f80e 	bl	8007534 <__malloc_unlock>
 8007518:	e797      	b.n	800744a <_malloc_r+0x22>
 800751a:	6025      	str	r5, [r4, #0]
 800751c:	e7dc      	b.n	80074d8 <_malloc_r+0xb0>
 800751e:	605b      	str	r3, [r3, #4]
 8007520:	deff      	udf	#255	; 0xff
 8007522:	bf00      	nop
 8007524:	2000059c 	.word	0x2000059c

08007528 <__malloc_lock>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__malloc_lock+0x8>)
 800752a:	f7ff b890 	b.w	800664e <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	20000598 	.word	0x20000598

08007534 <__malloc_unlock>:
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <__malloc_unlock+0x8>)
 8007536:	f7ff b88b 	b.w	8006650 <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	20000598 	.word	0x20000598

08007540 <_Balloc>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	69c6      	ldr	r6, [r0, #28]
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	b976      	cbnz	r6, 8007568 <_Balloc+0x28>
 800754a:	2010      	movs	r0, #16
 800754c:	f7ff ff44 	bl	80073d8 <malloc>
 8007550:	4602      	mov	r2, r0
 8007552:	61e0      	str	r0, [r4, #28]
 8007554:	b920      	cbnz	r0, 8007560 <_Balloc+0x20>
 8007556:	216b      	movs	r1, #107	; 0x6b
 8007558:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <_Balloc+0x78>)
 800755a:	4818      	ldr	r0, [pc, #96]	; (80075bc <_Balloc+0x7c>)
 800755c:	f000 fda2 	bl	80080a4 <__assert_func>
 8007560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007564:	6006      	str	r6, [r0, #0]
 8007566:	60c6      	str	r6, [r0, #12]
 8007568:	69e6      	ldr	r6, [r4, #28]
 800756a:	68f3      	ldr	r3, [r6, #12]
 800756c:	b183      	cbz	r3, 8007590 <_Balloc+0x50>
 800756e:	69e3      	ldr	r3, [r4, #28]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007576:	b9b8      	cbnz	r0, 80075a8 <_Balloc+0x68>
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f605 	lsl.w	r6, r1, r5
 800757e:	1d72      	adds	r2, r6, #5
 8007580:	4620      	mov	r0, r4
 8007582:	0092      	lsls	r2, r2, #2
 8007584:	f000 fdac 	bl	80080e0 <_calloc_r>
 8007588:	b160      	cbz	r0, 80075a4 <_Balloc+0x64>
 800758a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800758e:	e00e      	b.n	80075ae <_Balloc+0x6e>
 8007590:	2221      	movs	r2, #33	; 0x21
 8007592:	2104      	movs	r1, #4
 8007594:	4620      	mov	r0, r4
 8007596:	f000 fda3 	bl	80080e0 <_calloc_r>
 800759a:	69e3      	ldr	r3, [r4, #28]
 800759c:	60f0      	str	r0, [r6, #12]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e4      	bne.n	800756e <_Balloc+0x2e>
 80075a4:	2000      	movs	r0, #0
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	6802      	ldr	r2, [r0, #0]
 80075aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ae:	2300      	movs	r3, #0
 80075b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b4:	e7f7      	b.n	80075a6 <_Balloc+0x66>
 80075b6:	bf00      	nop
 80075b8:	080087c7 	.word	0x080087c7
 80075bc:	08008847 	.word	0x08008847

080075c0 <_Bfree>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	69c6      	ldr	r6, [r0, #28]
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b976      	cbnz	r6, 80075e8 <_Bfree+0x28>
 80075ca:	2010      	movs	r0, #16
 80075cc:	f7ff ff04 	bl	80073d8 <malloc>
 80075d0:	4602      	mov	r2, r0
 80075d2:	61e8      	str	r0, [r5, #28]
 80075d4:	b920      	cbnz	r0, 80075e0 <_Bfree+0x20>
 80075d6:	218f      	movs	r1, #143	; 0x8f
 80075d8:	4b08      	ldr	r3, [pc, #32]	; (80075fc <_Bfree+0x3c>)
 80075da:	4809      	ldr	r0, [pc, #36]	; (8007600 <_Bfree+0x40>)
 80075dc:	f000 fd62 	bl	80080a4 <__assert_func>
 80075e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e4:	6006      	str	r6, [r0, #0]
 80075e6:	60c6      	str	r6, [r0, #12]
 80075e8:	b13c      	cbz	r4, 80075fa <_Bfree+0x3a>
 80075ea:	69eb      	ldr	r3, [r5, #28]
 80075ec:	6862      	ldr	r2, [r4, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f4:	6021      	str	r1, [r4, #0]
 80075f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	080087c7 	.word	0x080087c7
 8007600:	08008847 	.word	0x08008847

08007604 <__multadd>:
 8007604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007608:	4607      	mov	r7, r0
 800760a:	460c      	mov	r4, r1
 800760c:	461e      	mov	r6, r3
 800760e:	2000      	movs	r0, #0
 8007610:	690d      	ldr	r5, [r1, #16]
 8007612:	f101 0c14 	add.w	ip, r1, #20
 8007616:	f8dc 3000 	ldr.w	r3, [ip]
 800761a:	3001      	adds	r0, #1
 800761c:	b299      	uxth	r1, r3
 800761e:	fb02 6101 	mla	r1, r2, r1, r6
 8007622:	0c1e      	lsrs	r6, r3, #16
 8007624:	0c0b      	lsrs	r3, r1, #16
 8007626:	fb02 3306 	mla	r3, r2, r6, r3
 800762a:	b289      	uxth	r1, r1
 800762c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007630:	4285      	cmp	r5, r0
 8007632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007636:	f84c 1b04 	str.w	r1, [ip], #4
 800763a:	dcec      	bgt.n	8007616 <__multadd+0x12>
 800763c:	b30e      	cbz	r6, 8007682 <__multadd+0x7e>
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	42ab      	cmp	r3, r5
 8007642:	dc19      	bgt.n	8007678 <__multadd+0x74>
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	4638      	mov	r0, r7
 8007648:	3101      	adds	r1, #1
 800764a:	f7ff ff79 	bl	8007540 <_Balloc>
 800764e:	4680      	mov	r8, r0
 8007650:	b928      	cbnz	r0, 800765e <__multadd+0x5a>
 8007652:	4602      	mov	r2, r0
 8007654:	21ba      	movs	r1, #186	; 0xba
 8007656:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <__multadd+0x84>)
 8007658:	480c      	ldr	r0, [pc, #48]	; (800768c <__multadd+0x88>)
 800765a:	f000 fd23 	bl	80080a4 <__assert_func>
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	f104 010c 	add.w	r1, r4, #12
 8007664:	3202      	adds	r2, #2
 8007666:	0092      	lsls	r2, r2, #2
 8007668:	300c      	adds	r0, #12
 800766a:	f000 fd0d 	bl	8008088 <memcpy>
 800766e:	4621      	mov	r1, r4
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff ffa5 	bl	80075c0 <_Bfree>
 8007676:	4644      	mov	r4, r8
 8007678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800767c:	3501      	adds	r5, #1
 800767e:	615e      	str	r6, [r3, #20]
 8007680:	6125      	str	r5, [r4, #16]
 8007682:	4620      	mov	r0, r4
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	08008836 	.word	0x08008836
 800768c:	08008847 	.word	0x08008847

08007690 <__hi0bits>:
 8007690:	0c02      	lsrs	r2, r0, #16
 8007692:	0412      	lsls	r2, r2, #16
 8007694:	4603      	mov	r3, r0
 8007696:	b9ca      	cbnz	r2, 80076cc <__hi0bits+0x3c>
 8007698:	0403      	lsls	r3, r0, #16
 800769a:	2010      	movs	r0, #16
 800769c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076a0:	bf04      	itt	eq
 80076a2:	021b      	lsleq	r3, r3, #8
 80076a4:	3008      	addeq	r0, #8
 80076a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076aa:	bf04      	itt	eq
 80076ac:	011b      	lsleq	r3, r3, #4
 80076ae:	3004      	addeq	r0, #4
 80076b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076b4:	bf04      	itt	eq
 80076b6:	009b      	lsleq	r3, r3, #2
 80076b8:	3002      	addeq	r0, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	db05      	blt.n	80076ca <__hi0bits+0x3a>
 80076be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076c2:	f100 0001 	add.w	r0, r0, #1
 80076c6:	bf08      	it	eq
 80076c8:	2020      	moveq	r0, #32
 80076ca:	4770      	bx	lr
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7e5      	b.n	800769c <__hi0bits+0xc>

080076d0 <__lo0bits>:
 80076d0:	6803      	ldr	r3, [r0, #0]
 80076d2:	4602      	mov	r2, r0
 80076d4:	f013 0007 	ands.w	r0, r3, #7
 80076d8:	d00b      	beq.n	80076f2 <__lo0bits+0x22>
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d421      	bmi.n	8007722 <__lo0bits+0x52>
 80076de:	0798      	lsls	r0, r3, #30
 80076e0:	bf49      	itett	mi
 80076e2:	085b      	lsrmi	r3, r3, #1
 80076e4:	089b      	lsrpl	r3, r3, #2
 80076e6:	2001      	movmi	r0, #1
 80076e8:	6013      	strmi	r3, [r2, #0]
 80076ea:	bf5c      	itt	pl
 80076ec:	2002      	movpl	r0, #2
 80076ee:	6013      	strpl	r3, [r2, #0]
 80076f0:	4770      	bx	lr
 80076f2:	b299      	uxth	r1, r3
 80076f4:	b909      	cbnz	r1, 80076fa <__lo0bits+0x2a>
 80076f6:	2010      	movs	r0, #16
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	b2d9      	uxtb	r1, r3
 80076fc:	b909      	cbnz	r1, 8007702 <__lo0bits+0x32>
 80076fe:	3008      	adds	r0, #8
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	0719      	lsls	r1, r3, #28
 8007704:	bf04      	itt	eq
 8007706:	091b      	lsreq	r3, r3, #4
 8007708:	3004      	addeq	r0, #4
 800770a:	0799      	lsls	r1, r3, #30
 800770c:	bf04      	itt	eq
 800770e:	089b      	lsreq	r3, r3, #2
 8007710:	3002      	addeq	r0, #2
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	d403      	bmi.n	800771e <__lo0bits+0x4e>
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	f100 0001 	add.w	r0, r0, #1
 800771c:	d003      	beq.n	8007726 <__lo0bits+0x56>
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4770      	bx	lr
 8007722:	2000      	movs	r0, #0
 8007724:	4770      	bx	lr
 8007726:	2020      	movs	r0, #32
 8007728:	4770      	bx	lr
	...

0800772c <__i2b>:
 800772c:	b510      	push	{r4, lr}
 800772e:	460c      	mov	r4, r1
 8007730:	2101      	movs	r1, #1
 8007732:	f7ff ff05 	bl	8007540 <_Balloc>
 8007736:	4602      	mov	r2, r0
 8007738:	b928      	cbnz	r0, 8007746 <__i2b+0x1a>
 800773a:	f240 1145 	movw	r1, #325	; 0x145
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <__i2b+0x24>)
 8007740:	4804      	ldr	r0, [pc, #16]	; (8007754 <__i2b+0x28>)
 8007742:	f000 fcaf 	bl	80080a4 <__assert_func>
 8007746:	2301      	movs	r3, #1
 8007748:	6144      	str	r4, [r0, #20]
 800774a:	6103      	str	r3, [r0, #16]
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	08008836 	.word	0x08008836
 8007754:	08008847 	.word	0x08008847

08007758 <__multiply>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	4691      	mov	r9, r2
 800775e:	690a      	ldr	r2, [r1, #16]
 8007760:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007764:	460c      	mov	r4, r1
 8007766:	429a      	cmp	r2, r3
 8007768:	bfbe      	ittt	lt
 800776a:	460b      	movlt	r3, r1
 800776c:	464c      	movlt	r4, r9
 800776e:	4699      	movlt	r9, r3
 8007770:	6927      	ldr	r7, [r4, #16]
 8007772:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	6861      	ldr	r1, [r4, #4]
 800777a:	eb07 060a 	add.w	r6, r7, sl
 800777e:	42b3      	cmp	r3, r6
 8007780:	b085      	sub	sp, #20
 8007782:	bfb8      	it	lt
 8007784:	3101      	addlt	r1, #1
 8007786:	f7ff fedb 	bl	8007540 <_Balloc>
 800778a:	b930      	cbnz	r0, 800779a <__multiply+0x42>
 800778c:	4602      	mov	r2, r0
 800778e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007792:	4b43      	ldr	r3, [pc, #268]	; (80078a0 <__multiply+0x148>)
 8007794:	4843      	ldr	r0, [pc, #268]	; (80078a4 <__multiply+0x14c>)
 8007796:	f000 fc85 	bl	80080a4 <__assert_func>
 800779a:	f100 0514 	add.w	r5, r0, #20
 800779e:	462b      	mov	r3, r5
 80077a0:	2200      	movs	r2, #0
 80077a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077a6:	4543      	cmp	r3, r8
 80077a8:	d321      	bcc.n	80077ee <__multiply+0x96>
 80077aa:	f104 0314 	add.w	r3, r4, #20
 80077ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077b2:	f109 0314 	add.w	r3, r9, #20
 80077b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	1b3a      	subs	r2, r7, r4
 80077be:	3a15      	subs	r2, #21
 80077c0:	f022 0203 	bic.w	r2, r2, #3
 80077c4:	3204      	adds	r2, #4
 80077c6:	f104 0115 	add.w	r1, r4, #21
 80077ca:	428f      	cmp	r7, r1
 80077cc:	bf38      	it	cc
 80077ce:	2204      	movcc	r2, #4
 80077d0:	9201      	str	r2, [sp, #4]
 80077d2:	9a02      	ldr	r2, [sp, #8]
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d80c      	bhi.n	80077f4 <__multiply+0x9c>
 80077da:	2e00      	cmp	r6, #0
 80077dc:	dd03      	ble.n	80077e6 <__multiply+0x8e>
 80077de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d05a      	beq.n	800789c <__multiply+0x144>
 80077e6:	6106      	str	r6, [r0, #16]
 80077e8:	b005      	add	sp, #20
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	f843 2b04 	str.w	r2, [r3], #4
 80077f2:	e7d8      	b.n	80077a6 <__multiply+0x4e>
 80077f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80077f8:	f1ba 0f00 	cmp.w	sl, #0
 80077fc:	d023      	beq.n	8007846 <__multiply+0xee>
 80077fe:	46a9      	mov	r9, r5
 8007800:	f04f 0c00 	mov.w	ip, #0
 8007804:	f104 0e14 	add.w	lr, r4, #20
 8007808:	f85e 2b04 	ldr.w	r2, [lr], #4
 800780c:	f8d9 1000 	ldr.w	r1, [r9]
 8007810:	fa1f fb82 	uxth.w	fp, r2
 8007814:	b289      	uxth	r1, r1
 8007816:	fb0a 110b 	mla	r1, sl, fp, r1
 800781a:	4461      	add	r1, ip
 800781c:	f8d9 c000 	ldr.w	ip, [r9]
 8007820:	0c12      	lsrs	r2, r2, #16
 8007822:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007826:	fb0a c202 	mla	r2, sl, r2, ip
 800782a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800782e:	b289      	uxth	r1, r1
 8007830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007834:	4577      	cmp	r7, lr
 8007836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800783a:	f849 1b04 	str.w	r1, [r9], #4
 800783e:	d8e3      	bhi.n	8007808 <__multiply+0xb0>
 8007840:	9a01      	ldr	r2, [sp, #4]
 8007842:	f845 c002 	str.w	ip, [r5, r2]
 8007846:	9a03      	ldr	r2, [sp, #12]
 8007848:	3304      	adds	r3, #4
 800784a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	d021      	beq.n	8007898 <__multiply+0x140>
 8007854:	46ae      	mov	lr, r5
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	6829      	ldr	r1, [r5, #0]
 800785c:	f104 0c14 	add.w	ip, r4, #20
 8007860:	f8bc b000 	ldrh.w	fp, [ip]
 8007864:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007868:	b289      	uxth	r1, r1
 800786a:	fb09 220b 	mla	r2, r9, fp, r2
 800786e:	4452      	add	r2, sl
 8007870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007874:	f84e 1b04 	str.w	r1, [lr], #4
 8007878:	f85c 1b04 	ldr.w	r1, [ip], #4
 800787c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007880:	f8be 1000 	ldrh.w	r1, [lr]
 8007884:	4567      	cmp	r7, ip
 8007886:	fb09 110a 	mla	r1, r9, sl, r1
 800788a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800788e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007892:	d8e5      	bhi.n	8007860 <__multiply+0x108>
 8007894:	9a01      	ldr	r2, [sp, #4]
 8007896:	50a9      	str	r1, [r5, r2]
 8007898:	3504      	adds	r5, #4
 800789a:	e79a      	b.n	80077d2 <__multiply+0x7a>
 800789c:	3e01      	subs	r6, #1
 800789e:	e79c      	b.n	80077da <__multiply+0x82>
 80078a0:	08008836 	.word	0x08008836
 80078a4:	08008847 	.word	0x08008847

080078a8 <__pow5mult>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4615      	mov	r5, r2
 80078ae:	f012 0203 	ands.w	r2, r2, #3
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	d007      	beq.n	80078c8 <__pow5mult+0x20>
 80078b8:	4c25      	ldr	r4, [pc, #148]	; (8007950 <__pow5mult+0xa8>)
 80078ba:	3a01      	subs	r2, #1
 80078bc:	2300      	movs	r3, #0
 80078be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078c2:	f7ff fe9f 	bl	8007604 <__multadd>
 80078c6:	4607      	mov	r7, r0
 80078c8:	10ad      	asrs	r5, r5, #2
 80078ca:	d03d      	beq.n	8007948 <__pow5mult+0xa0>
 80078cc:	69f4      	ldr	r4, [r6, #28]
 80078ce:	b97c      	cbnz	r4, 80078f0 <__pow5mult+0x48>
 80078d0:	2010      	movs	r0, #16
 80078d2:	f7ff fd81 	bl	80073d8 <malloc>
 80078d6:	4602      	mov	r2, r0
 80078d8:	61f0      	str	r0, [r6, #28]
 80078da:	b928      	cbnz	r0, 80078e8 <__pow5mult+0x40>
 80078dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80078e0:	4b1c      	ldr	r3, [pc, #112]	; (8007954 <__pow5mult+0xac>)
 80078e2:	481d      	ldr	r0, [pc, #116]	; (8007958 <__pow5mult+0xb0>)
 80078e4:	f000 fbde 	bl	80080a4 <__assert_func>
 80078e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078ec:	6004      	str	r4, [r0, #0]
 80078ee:	60c4      	str	r4, [r0, #12]
 80078f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80078f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078f8:	b94c      	cbnz	r4, 800790e <__pow5mult+0x66>
 80078fa:	f240 2171 	movw	r1, #625	; 0x271
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ff14 	bl	800772c <__i2b>
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	f8c8 0008 	str.w	r0, [r8, #8]
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	f04f 0900 	mov.w	r9, #0
 8007912:	07eb      	lsls	r3, r5, #31
 8007914:	d50a      	bpl.n	800792c <__pow5mult+0x84>
 8007916:	4639      	mov	r1, r7
 8007918:	4622      	mov	r2, r4
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ff1c 	bl	8007758 <__multiply>
 8007920:	4680      	mov	r8, r0
 8007922:	4639      	mov	r1, r7
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff fe4b 	bl	80075c0 <_Bfree>
 800792a:	4647      	mov	r7, r8
 800792c:	106d      	asrs	r5, r5, #1
 800792e:	d00b      	beq.n	8007948 <__pow5mult+0xa0>
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	b938      	cbnz	r0, 8007944 <__pow5mult+0x9c>
 8007934:	4622      	mov	r2, r4
 8007936:	4621      	mov	r1, r4
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff ff0d 	bl	8007758 <__multiply>
 800793e:	6020      	str	r0, [r4, #0]
 8007940:	f8c0 9000 	str.w	r9, [r0]
 8007944:	4604      	mov	r4, r0
 8007946:	e7e4      	b.n	8007912 <__pow5mult+0x6a>
 8007948:	4638      	mov	r0, r7
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	bf00      	nop
 8007950:	08008990 	.word	0x08008990
 8007954:	080087c7 	.word	0x080087c7
 8007958:	08008847 	.word	0x08008847

0800795c <__lshift>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	4607      	mov	r7, r0
 8007964:	4691      	mov	r9, r2
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	6849      	ldr	r1, [r1, #4]
 800796a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007974:	f108 0601 	add.w	r6, r8, #1
 8007978:	42b3      	cmp	r3, r6
 800797a:	db0b      	blt.n	8007994 <__lshift+0x38>
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff fddf 	bl	8007540 <_Balloc>
 8007982:	4605      	mov	r5, r0
 8007984:	b948      	cbnz	r0, 800799a <__lshift+0x3e>
 8007986:	4602      	mov	r2, r0
 8007988:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800798c:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <__lshift+0xd0>)
 800798e:	4828      	ldr	r0, [pc, #160]	; (8007a30 <__lshift+0xd4>)
 8007990:	f000 fb88 	bl	80080a4 <__assert_func>
 8007994:	3101      	adds	r1, #1
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	e7ee      	b.n	8007978 <__lshift+0x1c>
 800799a:	2300      	movs	r3, #0
 800799c:	f100 0114 	add.w	r1, r0, #20
 80079a0:	f100 0210 	add.w	r2, r0, #16
 80079a4:	4618      	mov	r0, r3
 80079a6:	4553      	cmp	r3, sl
 80079a8:	db33      	blt.n	8007a12 <__lshift+0xb6>
 80079aa:	6920      	ldr	r0, [r4, #16]
 80079ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b0:	f104 0314 	add.w	r3, r4, #20
 80079b4:	f019 091f 	ands.w	r9, r9, #31
 80079b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079c0:	d02b      	beq.n	8007a1a <__lshift+0xbe>
 80079c2:	468a      	mov	sl, r1
 80079c4:	2200      	movs	r2, #0
 80079c6:	f1c9 0e20 	rsb	lr, r9, #32
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	fa00 f009 	lsl.w	r0, r0, r9
 80079d0:	4310      	orrs	r0, r2
 80079d2:	f84a 0b04 	str.w	r0, [sl], #4
 80079d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079da:	459c      	cmp	ip, r3
 80079dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80079e0:	d8f3      	bhi.n	80079ca <__lshift+0x6e>
 80079e2:	ebac 0304 	sub.w	r3, ip, r4
 80079e6:	3b15      	subs	r3, #21
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	3304      	adds	r3, #4
 80079ee:	f104 0015 	add.w	r0, r4, #21
 80079f2:	4584      	cmp	ip, r0
 80079f4:	bf38      	it	cc
 80079f6:	2304      	movcc	r3, #4
 80079f8:	50ca      	str	r2, [r1, r3]
 80079fa:	b10a      	cbz	r2, 8007a00 <__lshift+0xa4>
 80079fc:	f108 0602 	add.w	r6, r8, #2
 8007a00:	3e01      	subs	r6, #1
 8007a02:	4638      	mov	r0, r7
 8007a04:	4621      	mov	r1, r4
 8007a06:	612e      	str	r6, [r5, #16]
 8007a08:	f7ff fdda 	bl	80075c0 <_Bfree>
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a12:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a16:	3301      	adds	r3, #1
 8007a18:	e7c5      	b.n	80079a6 <__lshift+0x4a>
 8007a1a:	3904      	subs	r1, #4
 8007a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a20:	459c      	cmp	ip, r3
 8007a22:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a26:	d8f9      	bhi.n	8007a1c <__lshift+0xc0>
 8007a28:	e7ea      	b.n	8007a00 <__lshift+0xa4>
 8007a2a:	bf00      	nop
 8007a2c:	08008836 	.word	0x08008836
 8007a30:	08008847 	.word	0x08008847

08007a34 <__mcmp>:
 8007a34:	4603      	mov	r3, r0
 8007a36:	690a      	ldr	r2, [r1, #16]
 8007a38:	6900      	ldr	r0, [r0, #16]
 8007a3a:	b530      	push	{r4, r5, lr}
 8007a3c:	1a80      	subs	r0, r0, r2
 8007a3e:	d10d      	bne.n	8007a5c <__mcmp+0x28>
 8007a40:	3314      	adds	r3, #20
 8007a42:	3114      	adds	r1, #20
 8007a44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a54:	4295      	cmp	r5, r2
 8007a56:	d002      	beq.n	8007a5e <__mcmp+0x2a>
 8007a58:	d304      	bcc.n	8007a64 <__mcmp+0x30>
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	bd30      	pop	{r4, r5, pc}
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	d3f4      	bcc.n	8007a4c <__mcmp+0x18>
 8007a62:	e7fb      	b.n	8007a5c <__mcmp+0x28>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e7f8      	b.n	8007a5c <__mcmp+0x28>
	...

08007a6c <__mdiff>:
 8007a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	460d      	mov	r5, r1
 8007a72:	4607      	mov	r7, r0
 8007a74:	4611      	mov	r1, r2
 8007a76:	4628      	mov	r0, r5
 8007a78:	4614      	mov	r4, r2
 8007a7a:	f7ff ffdb 	bl	8007a34 <__mcmp>
 8007a7e:	1e06      	subs	r6, r0, #0
 8007a80:	d111      	bne.n	8007aa6 <__mdiff+0x3a>
 8007a82:	4631      	mov	r1, r6
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff fd5b 	bl	8007540 <_Balloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <__mdiff+0x2e>
 8007a8e:	f240 2137 	movw	r1, #567	; 0x237
 8007a92:	4b3a      	ldr	r3, [pc, #232]	; (8007b7c <__mdiff+0x110>)
 8007a94:	483a      	ldr	r0, [pc, #232]	; (8007b80 <__mdiff+0x114>)
 8007a96:	f000 fb05 	bl	80080a4 <__assert_func>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	bfa4      	itt	ge
 8007aa8:	4623      	movge	r3, r4
 8007aaa:	462c      	movge	r4, r5
 8007aac:	4638      	mov	r0, r7
 8007aae:	6861      	ldr	r1, [r4, #4]
 8007ab0:	bfa6      	itte	ge
 8007ab2:	461d      	movge	r5, r3
 8007ab4:	2600      	movge	r6, #0
 8007ab6:	2601      	movlt	r6, #1
 8007ab8:	f7ff fd42 	bl	8007540 <_Balloc>
 8007abc:	4602      	mov	r2, r0
 8007abe:	b918      	cbnz	r0, 8007ac8 <__mdiff+0x5c>
 8007ac0:	f240 2145 	movw	r1, #581	; 0x245
 8007ac4:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <__mdiff+0x110>)
 8007ac6:	e7e5      	b.n	8007a94 <__mdiff+0x28>
 8007ac8:	f102 0814 	add.w	r8, r2, #20
 8007acc:	46c2      	mov	sl, r8
 8007ace:	f04f 0c00 	mov.w	ip, #0
 8007ad2:	6927      	ldr	r7, [r4, #16]
 8007ad4:	60c6      	str	r6, [r0, #12]
 8007ad6:	692e      	ldr	r6, [r5, #16]
 8007ad8:	f104 0014 	add.w	r0, r4, #20
 8007adc:	f105 0914 	add.w	r9, r5, #20
 8007ae0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007ae4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ae8:	3410      	adds	r4, #16
 8007aea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007aee:	f859 3b04 	ldr.w	r3, [r9], #4
 8007af2:	fa1f f18b 	uxth.w	r1, fp
 8007af6:	4461      	add	r1, ip
 8007af8:	fa1f fc83 	uxth.w	ip, r3
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	eba1 010c 	sub.w	r1, r1, ip
 8007b02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007b10:	454e      	cmp	r6, r9
 8007b12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b16:	f84a 1b04 	str.w	r1, [sl], #4
 8007b1a:	d8e6      	bhi.n	8007aea <__mdiff+0x7e>
 8007b1c:	1b73      	subs	r3, r6, r5
 8007b1e:	3b15      	subs	r3, #21
 8007b20:	f023 0303 	bic.w	r3, r3, #3
 8007b24:	3515      	adds	r5, #21
 8007b26:	3304      	adds	r3, #4
 8007b28:	42ae      	cmp	r6, r5
 8007b2a:	bf38      	it	cc
 8007b2c:	2304      	movcc	r3, #4
 8007b2e:	4418      	add	r0, r3
 8007b30:	4443      	add	r3, r8
 8007b32:	461e      	mov	r6, r3
 8007b34:	4605      	mov	r5, r0
 8007b36:	4575      	cmp	r5, lr
 8007b38:	d30e      	bcc.n	8007b58 <__mdiff+0xec>
 8007b3a:	f10e 0103 	add.w	r1, lr, #3
 8007b3e:	1a09      	subs	r1, r1, r0
 8007b40:	f021 0103 	bic.w	r1, r1, #3
 8007b44:	3803      	subs	r0, #3
 8007b46:	4586      	cmp	lr, r0
 8007b48:	bf38      	it	cc
 8007b4a:	2100      	movcc	r1, #0
 8007b4c:	440b      	add	r3, r1
 8007b4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b52:	b189      	cbz	r1, 8007b78 <__mdiff+0x10c>
 8007b54:	6117      	str	r7, [r2, #16]
 8007b56:	e7a3      	b.n	8007aa0 <__mdiff+0x34>
 8007b58:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b5c:	fa1f f188 	uxth.w	r1, r8
 8007b60:	4461      	add	r1, ip
 8007b62:	140c      	asrs	r4, r1, #16
 8007b64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b68:	b289      	uxth	r1, r1
 8007b6a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b6e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007b72:	f846 1b04 	str.w	r1, [r6], #4
 8007b76:	e7de      	b.n	8007b36 <__mdiff+0xca>
 8007b78:	3f01      	subs	r7, #1
 8007b7a:	e7e8      	b.n	8007b4e <__mdiff+0xe2>
 8007b7c:	08008836 	.word	0x08008836
 8007b80:	08008847 	.word	0x08008847

08007b84 <__d2b>:
 8007b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b86:	2101      	movs	r1, #1
 8007b88:	4617      	mov	r7, r2
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	9e08      	ldr	r6, [sp, #32]
 8007b8e:	f7ff fcd7 	bl	8007540 <_Balloc>
 8007b92:	4605      	mov	r5, r0
 8007b94:	b930      	cbnz	r0, 8007ba4 <__d2b+0x20>
 8007b96:	4602      	mov	r2, r0
 8007b98:	f240 310f 	movw	r1, #783	; 0x30f
 8007b9c:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <__d2b+0xa4>)
 8007b9e:	4823      	ldr	r0, [pc, #140]	; (8007c2c <__d2b+0xa8>)
 8007ba0:	f000 fa80 	bl	80080a4 <__assert_func>
 8007ba4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ba8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007bac:	bb24      	cbnz	r4, 8007bf8 <__d2b+0x74>
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	d026      	beq.n	8007c02 <__d2b+0x7e>
 8007bb4:	4668      	mov	r0, sp
 8007bb6:	9700      	str	r7, [sp, #0]
 8007bb8:	f7ff fd8a 	bl	80076d0 <__lo0bits>
 8007bbc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bc0:	b1e8      	cbz	r0, 8007bfe <__d2b+0x7a>
 8007bc2:	f1c0 0320 	rsb	r3, r0, #32
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	40c2      	lsrs	r2, r0
 8007bce:	616b      	str	r3, [r5, #20]
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf14      	ite	ne
 8007bd8:	2102      	movne	r1, #2
 8007bda:	2101      	moveq	r1, #1
 8007bdc:	61ab      	str	r3, [r5, #24]
 8007bde:	6129      	str	r1, [r5, #16]
 8007be0:	b1bc      	cbz	r4, 8007c12 <__d2b+0x8e>
 8007be2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007be6:	4404      	add	r4, r0
 8007be8:	6034      	str	r4, [r6, #0]
 8007bea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf0:	6018      	str	r0, [r3, #0]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	b003      	add	sp, #12
 8007bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bfc:	e7d7      	b.n	8007bae <__d2b+0x2a>
 8007bfe:	6169      	str	r1, [r5, #20]
 8007c00:	e7e7      	b.n	8007bd2 <__d2b+0x4e>
 8007c02:	a801      	add	r0, sp, #4
 8007c04:	f7ff fd64 	bl	80076d0 <__lo0bits>
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	616b      	str	r3, [r5, #20]
 8007c0e:	3020      	adds	r0, #32
 8007c10:	e7e5      	b.n	8007bde <__d2b+0x5a>
 8007c12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c16:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007c1a:	6030      	str	r0, [r6, #0]
 8007c1c:	6918      	ldr	r0, [r3, #16]
 8007c1e:	f7ff fd37 	bl	8007690 <__hi0bits>
 8007c22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c26:	e7e2      	b.n	8007bee <__d2b+0x6a>
 8007c28:	08008836 	.word	0x08008836
 8007c2c:	08008847 	.word	0x08008847

08007c30 <__ssputs_r>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	461f      	mov	r7, r3
 8007c36:	688e      	ldr	r6, [r1, #8]
 8007c38:	4682      	mov	sl, r0
 8007c3a:	42be      	cmp	r6, r7
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	4690      	mov	r8, r2
 8007c40:	680b      	ldr	r3, [r1, #0]
 8007c42:	d82c      	bhi.n	8007c9e <__ssputs_r+0x6e>
 8007c44:	898a      	ldrh	r2, [r1, #12]
 8007c46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c4a:	d026      	beq.n	8007c9a <__ssputs_r+0x6a>
 8007c4c:	6965      	ldr	r5, [r4, #20]
 8007c4e:	6909      	ldr	r1, [r1, #16]
 8007c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c54:	eba3 0901 	sub.w	r9, r3, r1
 8007c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c5c:	1c7b      	adds	r3, r7, #1
 8007c5e:	444b      	add	r3, r9
 8007c60:	106d      	asrs	r5, r5, #1
 8007c62:	429d      	cmp	r5, r3
 8007c64:	bf38      	it	cc
 8007c66:	461d      	movcc	r5, r3
 8007c68:	0553      	lsls	r3, r2, #21
 8007c6a:	d527      	bpl.n	8007cbc <__ssputs_r+0x8c>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	f7ff fbdb 	bl	8007428 <_malloc_r>
 8007c72:	4606      	mov	r6, r0
 8007c74:	b360      	cbz	r0, 8007cd0 <__ssputs_r+0xa0>
 8007c76:	464a      	mov	r2, r9
 8007c78:	6921      	ldr	r1, [r4, #16]
 8007c7a:	f000 fa05 	bl	8008088 <memcpy>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	6126      	str	r6, [r4, #16]
 8007c8c:	444e      	add	r6, r9
 8007c8e:	6026      	str	r6, [r4, #0]
 8007c90:	463e      	mov	r6, r7
 8007c92:	6165      	str	r5, [r4, #20]
 8007c94:	eba5 0509 	sub.w	r5, r5, r9
 8007c98:	60a5      	str	r5, [r4, #8]
 8007c9a:	42be      	cmp	r6, r7
 8007c9c:	d900      	bls.n	8007ca0 <__ssputs_r+0x70>
 8007c9e:	463e      	mov	r6, r7
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	f000 f9c5 	bl	8008034 <memmove>
 8007caa:	2000      	movs	r0, #0
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	1b9b      	subs	r3, r3, r6
 8007cb0:	60a3      	str	r3, [r4, #8]
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	4433      	add	r3, r6
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	f000 fa35 	bl	800812c <_realloc_r>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d1e0      	bne.n	8007c8a <__ssputs_r+0x5a>
 8007cc8:	4650      	mov	r0, sl
 8007cca:	6921      	ldr	r1, [r4, #16]
 8007ccc:	f7ff fb3c 	bl	8007348 <_free_r>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	f8ca 3000 	str.w	r3, [sl]
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	e7e9      	b.n	8007cb8 <__ssputs_r+0x88>

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	4698      	mov	r8, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	4607      	mov	r7, r0
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	b09d      	sub	sp, #116	; 0x74
 8007cf6:	d50e      	bpl.n	8007d16 <_svfiprintf_r+0x32>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b963      	cbnz	r3, 8007d16 <_svfiprintf_r+0x32>
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	f7ff fb93 	bl	8007428 <_malloc_r>
 8007d02:	6028      	str	r0, [r5, #0]
 8007d04:	6128      	str	r0, [r5, #16]
 8007d06:	b920      	cbnz	r0, 8007d12 <_svfiprintf_r+0x2e>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e0d0      	b.n	8007eb4 <_svfiprintf_r+0x1d0>
 8007d12:	2340      	movs	r3, #64	; 0x40
 8007d14:	616b      	str	r3, [r5, #20]
 8007d16:	2300      	movs	r3, #0
 8007d18:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d20:	2330      	movs	r3, #48	; 0x30
 8007d22:	f04f 0901 	mov.w	r9, #1
 8007d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ecc <_svfiprintf_r+0x1e8>
 8007d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d32:	4623      	mov	r3, r4
 8007d34:	469a      	mov	sl, r3
 8007d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3a:	b10a      	cbz	r2, 8007d40 <_svfiprintf_r+0x5c>
 8007d3c:	2a25      	cmp	r2, #37	; 0x25
 8007d3e:	d1f9      	bne.n	8007d34 <_svfiprintf_r+0x50>
 8007d40:	ebba 0b04 	subs.w	fp, sl, r4
 8007d44:	d00b      	beq.n	8007d5e <_svfiprintf_r+0x7a>
 8007d46:	465b      	mov	r3, fp
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff ff6f 	bl	8007c30 <__ssputs_r>
 8007d52:	3001      	adds	r0, #1
 8007d54:	f000 80a9 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5a:	445a      	add	r2, fp
 8007d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80a1 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d72:	f10a 0a01 	add.w	sl, sl, #1
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d80:	4654      	mov	r4, sl
 8007d82:	2205      	movs	r2, #5
 8007d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d88:	4850      	ldr	r0, [pc, #320]	; (8007ecc <_svfiprintf_r+0x1e8>)
 8007d8a:	f7fe fc62 	bl	8006652 <memchr>
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	b9d8      	cbnz	r0, 8007dca <_svfiprintf_r+0xe6>
 8007d92:	06d0      	lsls	r0, r2, #27
 8007d94:	bf44      	itt	mi
 8007d96:	2320      	movmi	r3, #32
 8007d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9c:	0711      	lsls	r1, r2, #28
 8007d9e:	bf44      	itt	mi
 8007da0:	232b      	movmi	r3, #43	; 0x2b
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da6:	f89a 3000 	ldrb.w	r3, [sl]
 8007daa:	2b2a      	cmp	r3, #42	; 0x2a
 8007dac:	d015      	beq.n	8007dda <_svfiprintf_r+0xf6>
 8007dae:	4654      	mov	r4, sl
 8007db0:	2000      	movs	r0, #0
 8007db2:	f04f 0c0a 	mov.w	ip, #10
 8007db6:	9a07      	ldr	r2, [sp, #28]
 8007db8:	4621      	mov	r1, r4
 8007dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dbe:	3b30      	subs	r3, #48	; 0x30
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d94d      	bls.n	8007e60 <_svfiprintf_r+0x17c>
 8007dc4:	b1b0      	cbz	r0, 8007df4 <_svfiprintf_r+0x110>
 8007dc6:	9207      	str	r2, [sp, #28]
 8007dc8:	e014      	b.n	8007df4 <_svfiprintf_r+0x110>
 8007dca:	eba0 0308 	sub.w	r3, r0, r8
 8007dce:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	46a2      	mov	sl, r4
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	e7d2      	b.n	8007d80 <_svfiprintf_r+0x9c>
 8007dda:	9b03      	ldr	r3, [sp, #12]
 8007ddc:	1d19      	adds	r1, r3, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	9103      	str	r1, [sp, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfbb      	ittet	lt
 8007de6:	425b      	neglt	r3, r3
 8007de8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dec:	9307      	strge	r3, [sp, #28]
 8007dee:	9307      	strlt	r3, [sp, #28]
 8007df0:	bfb8      	it	lt
 8007df2:	9204      	strlt	r2, [sp, #16]
 8007df4:	7823      	ldrb	r3, [r4, #0]
 8007df6:	2b2e      	cmp	r3, #46	; 0x2e
 8007df8:	d10c      	bne.n	8007e14 <_svfiprintf_r+0x130>
 8007dfa:	7863      	ldrb	r3, [r4, #1]
 8007dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfe:	d134      	bne.n	8007e6a <_svfiprintf_r+0x186>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	3402      	adds	r4, #2
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	9203      	str	r2, [sp, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfb8      	it	lt
 8007e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007ed0 <_svfiprintf_r+0x1ec>
 8007e18:	2203      	movs	r2, #3
 8007e1a:	4650      	mov	r0, sl
 8007e1c:	7821      	ldrb	r1, [r4, #0]
 8007e1e:	f7fe fc18 	bl	8006652 <memchr>
 8007e22:	b138      	cbz	r0, 8007e34 <_svfiprintf_r+0x150>
 8007e24:	2240      	movs	r2, #64	; 0x40
 8007e26:	9b04      	ldr	r3, [sp, #16]
 8007e28:	eba0 000a 	sub.w	r0, r0, sl
 8007e2c:	4082      	lsls	r2, r0
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	3401      	adds	r4, #1
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e38:	2206      	movs	r2, #6
 8007e3a:	4826      	ldr	r0, [pc, #152]	; (8007ed4 <_svfiprintf_r+0x1f0>)
 8007e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e40:	f7fe fc07 	bl	8006652 <memchr>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d038      	beq.n	8007eba <_svfiprintf_r+0x1d6>
 8007e48:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <_svfiprintf_r+0x1f4>)
 8007e4a:	bb1b      	cbnz	r3, 8007e94 <_svfiprintf_r+0x1b0>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	3307      	adds	r3, #7
 8007e50:	f023 0307 	bic.w	r3, r3, #7
 8007e54:	3308      	adds	r3, #8
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5a:	4433      	add	r3, r6
 8007e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5e:	e768      	b.n	8007d32 <_svfiprintf_r+0x4e>
 8007e60:	460c      	mov	r4, r1
 8007e62:	2001      	movs	r0, #1
 8007e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e68:	e7a6      	b.n	8007db8 <_svfiprintf_r+0xd4>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f04f 0c0a 	mov.w	ip, #10
 8007e70:	4619      	mov	r1, r3
 8007e72:	3401      	adds	r4, #1
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e7c:	3a30      	subs	r2, #48	; 0x30
 8007e7e:	2a09      	cmp	r2, #9
 8007e80:	d903      	bls.n	8007e8a <_svfiprintf_r+0x1a6>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c6      	beq.n	8007e14 <_svfiprintf_r+0x130>
 8007e86:	9105      	str	r1, [sp, #20]
 8007e88:	e7c4      	b.n	8007e14 <_svfiprintf_r+0x130>
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e92:	e7f0      	b.n	8007e76 <_svfiprintf_r+0x192>
 8007e94:	ab03      	add	r3, sp, #12
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <_svfiprintf_r+0x1f8>)
 8007e9e:	a904      	add	r1, sp, #16
 8007ea0:	f7fd fe70 	bl	8005b84 <_printf_float>
 8007ea4:	1c42      	adds	r2, r0, #1
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	d1d6      	bne.n	8007e58 <_svfiprintf_r+0x174>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	065b      	lsls	r3, r3, #25
 8007eae:	f53f af2d 	bmi.w	8007d0c <_svfiprintf_r+0x28>
 8007eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eb4:	b01d      	add	sp, #116	; 0x74
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	ab03      	add	r3, sp, #12
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	4b06      	ldr	r3, [pc, #24]	; (8007edc <_svfiprintf_r+0x1f8>)
 8007ec4:	a904      	add	r1, sp, #16
 8007ec6:	f7fe f8fd 	bl	80060c4 <_printf_i>
 8007eca:	e7eb      	b.n	8007ea4 <_svfiprintf_r+0x1c0>
 8007ecc:	0800899c 	.word	0x0800899c
 8007ed0:	080089a2 	.word	0x080089a2
 8007ed4:	080089a6 	.word	0x080089a6
 8007ed8:	08005b85 	.word	0x08005b85
 8007edc:	08007c31 	.word	0x08007c31

08007ee0 <__sflush_r>:
 8007ee0:	898a      	ldrh	r2, [r1, #12]
 8007ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	0710      	lsls	r0, r2, #28
 8007ee8:	460c      	mov	r4, r1
 8007eea:	d457      	bmi.n	8007f9c <__sflush_r+0xbc>
 8007eec:	684b      	ldr	r3, [r1, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc04      	bgt.n	8007efc <__sflush_r+0x1c>
 8007ef2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dc01      	bgt.n	8007efc <__sflush_r+0x1c>
 8007ef8:	2000      	movs	r0, #0
 8007efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d0fa      	beq.n	8007ef8 <__sflush_r+0x18>
 8007f02:	2300      	movs	r3, #0
 8007f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f08:	682f      	ldr	r7, [r5, #0]
 8007f0a:	6a21      	ldr	r1, [r4, #32]
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	d032      	beq.n	8007f76 <__sflush_r+0x96>
 8007f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	075a      	lsls	r2, r3, #29
 8007f16:	d505      	bpl.n	8007f24 <__sflush_r+0x44>
 8007f18:	6863      	ldr	r3, [r4, #4]
 8007f1a:	1ac0      	subs	r0, r0, r3
 8007f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f1e:	b10b      	cbz	r3, 8007f24 <__sflush_r+0x44>
 8007f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f22:	1ac0      	subs	r0, r0, r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	4602      	mov	r2, r0
 8007f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	47b0      	blx	r6
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	d106      	bne.n	8007f44 <__sflush_r+0x64>
 8007f36:	6829      	ldr	r1, [r5, #0]
 8007f38:	291d      	cmp	r1, #29
 8007f3a:	d82b      	bhi.n	8007f94 <__sflush_r+0xb4>
 8007f3c:	4a28      	ldr	r2, [pc, #160]	; (8007fe0 <__sflush_r+0x100>)
 8007f3e:	410a      	asrs	r2, r1
 8007f40:	07d6      	lsls	r6, r2, #31
 8007f42:	d427      	bmi.n	8007f94 <__sflush_r+0xb4>
 8007f44:	2200      	movs	r2, #0
 8007f46:	6062      	str	r2, [r4, #4]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	04d9      	lsls	r1, r3, #19
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	d504      	bpl.n	8007f5a <__sflush_r+0x7a>
 8007f50:	1c42      	adds	r2, r0, #1
 8007f52:	d101      	bne.n	8007f58 <__sflush_r+0x78>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b903      	cbnz	r3, 8007f5a <__sflush_r+0x7a>
 8007f58:	6560      	str	r0, [r4, #84]	; 0x54
 8007f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f5c:	602f      	str	r7, [r5, #0]
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	d0ca      	beq.n	8007ef8 <__sflush_r+0x18>
 8007f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f66:	4299      	cmp	r1, r3
 8007f68:	d002      	beq.n	8007f70 <__sflush_r+0x90>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7ff f9ec 	bl	8007348 <_free_r>
 8007f70:	2000      	movs	r0, #0
 8007f72:	6360      	str	r0, [r4, #52]	; 0x34
 8007f74:	e7c1      	b.n	8007efa <__sflush_r+0x1a>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b0      	blx	r6
 8007f7c:	1c41      	adds	r1, r0, #1
 8007f7e:	d1c8      	bne.n	8007f12 <__sflush_r+0x32>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0c5      	beq.n	8007f12 <__sflush_r+0x32>
 8007f86:	2b1d      	cmp	r3, #29
 8007f88:	d001      	beq.n	8007f8e <__sflush_r+0xae>
 8007f8a:	2b16      	cmp	r3, #22
 8007f8c:	d101      	bne.n	8007f92 <__sflush_r+0xb2>
 8007f8e:	602f      	str	r7, [r5, #0]
 8007f90:	e7b2      	b.n	8007ef8 <__sflush_r+0x18>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	e7ae      	b.n	8007efa <__sflush_r+0x1a>
 8007f9c:	690f      	ldr	r7, [r1, #16]
 8007f9e:	2f00      	cmp	r7, #0
 8007fa0:	d0aa      	beq.n	8007ef8 <__sflush_r+0x18>
 8007fa2:	0793      	lsls	r3, r2, #30
 8007fa4:	bf18      	it	ne
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	680e      	ldr	r6, [r1, #0]
 8007faa:	bf08      	it	eq
 8007fac:	694b      	ldreq	r3, [r1, #20]
 8007fae:	1bf6      	subs	r6, r6, r7
 8007fb0:	600f      	str	r7, [r1, #0]
 8007fb2:	608b      	str	r3, [r1, #8]
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	dd9f      	ble.n	8007ef8 <__sflush_r+0x18>
 8007fb8:	4633      	mov	r3, r6
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	6a21      	ldr	r1, [r4, #32]
 8007fc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007fc4:	47e0      	blx	ip
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dc06      	bgt.n	8007fd8 <__sflush_r+0xf8>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	e790      	b.n	8007efa <__sflush_r+0x1a>
 8007fd8:	4407      	add	r7, r0
 8007fda:	1a36      	subs	r6, r6, r0
 8007fdc:	e7ea      	b.n	8007fb4 <__sflush_r+0xd4>
 8007fde:	bf00      	nop
 8007fe0:	dfbffffe 	.word	0xdfbffffe

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7fe fa11 	bl	8006420 <__sinit>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f3      	beq.n	8007fee <_fflush_r+0xa>
 8008006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d404      	bmi.n	8008016 <_fflush_r+0x32>
 800800c:	0599      	lsls	r1, r3, #22
 800800e:	d402      	bmi.n	8008016 <_fflush_r+0x32>
 8008010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008012:	f7fe fb1c 	bl	800664e <__retarget_lock_acquire_recursive>
 8008016:	4628      	mov	r0, r5
 8008018:	4621      	mov	r1, r4
 800801a:	f7ff ff61 	bl	8007ee0 <__sflush_r>
 800801e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008020:	4605      	mov	r5, r0
 8008022:	07da      	lsls	r2, r3, #31
 8008024:	d4e4      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d4e1      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f7fe fb0f 	bl	8006650 <__retarget_lock_release_recursive>
 8008032:	e7dd      	b.n	8007ff0 <_fflush_r+0xc>

08008034 <memmove>:
 8008034:	4288      	cmp	r0, r1
 8008036:	b510      	push	{r4, lr}
 8008038:	eb01 0402 	add.w	r4, r1, r2
 800803c:	d902      	bls.n	8008044 <memmove+0x10>
 800803e:	4284      	cmp	r4, r0
 8008040:	4623      	mov	r3, r4
 8008042:	d807      	bhi.n	8008054 <memmove+0x20>
 8008044:	1e43      	subs	r3, r0, #1
 8008046:	42a1      	cmp	r1, r4
 8008048:	d008      	beq.n	800805c <memmove+0x28>
 800804a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008052:	e7f8      	b.n	8008046 <memmove+0x12>
 8008054:	4601      	mov	r1, r0
 8008056:	4402      	add	r2, r0
 8008058:	428a      	cmp	r2, r1
 800805a:	d100      	bne.n	800805e <memmove+0x2a>
 800805c:	bd10      	pop	{r4, pc}
 800805e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008066:	e7f7      	b.n	8008058 <memmove+0x24>

08008068 <_sbrk_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	2300      	movs	r3, #0
 800806c:	4d05      	ldr	r5, [pc, #20]	; (8008084 <_sbrk_r+0x1c>)
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7fa fa60 	bl	8002538 <_sbrk>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_sbrk_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_sbrk_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000594 	.word	0x20000594

08008088 <memcpy>:
 8008088:	440a      	add	r2, r1
 800808a:	4291      	cmp	r1, r2
 800808c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008090:	d100      	bne.n	8008094 <memcpy+0xc>
 8008092:	4770      	bx	lr
 8008094:	b510      	push	{r4, lr}
 8008096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809a:	4291      	cmp	r1, r2
 800809c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a0:	d1f9      	bne.n	8008096 <memcpy+0xe>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <__assert_func>:
 80080a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080a6:	4614      	mov	r4, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <__assert_func+0x2c>)
 80080ac:	4605      	mov	r5, r0
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68d8      	ldr	r0, [r3, #12]
 80080b2:	b14c      	cbz	r4, 80080c8 <__assert_func+0x24>
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <__assert_func+0x30>)
 80080b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080ba:	9100      	str	r1, [sp, #0]
 80080bc:	462b      	mov	r3, r5
 80080be:	4906      	ldr	r1, [pc, #24]	; (80080d8 <__assert_func+0x34>)
 80080c0:	f000 f870 	bl	80081a4 <fiprintf>
 80080c4:	f000 f880 	bl	80081c8 <abort>
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <__assert_func+0x38>)
 80080ca:	461c      	mov	r4, r3
 80080cc:	e7f3      	b.n	80080b6 <__assert_func+0x12>
 80080ce:	bf00      	nop
 80080d0:	20000070 	.word	0x20000070
 80080d4:	080089b7 	.word	0x080089b7
 80080d8:	080089c4 	.word	0x080089c4
 80080dc:	080089f2 	.word	0x080089f2

080080e0 <_calloc_r>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	fba1 5402 	umull	r5, r4, r1, r2
 80080e6:	b934      	cbnz	r4, 80080f6 <_calloc_r+0x16>
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7ff f99d 	bl	8007428 <_malloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	b928      	cbnz	r0, 80080fe <_calloc_r+0x1e>
 80080f2:	4630      	mov	r0, r6
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	220c      	movs	r2, #12
 80080f8:	2600      	movs	r6, #0
 80080fa:	6002      	str	r2, [r0, #0]
 80080fc:	e7f9      	b.n	80080f2 <_calloc_r+0x12>
 80080fe:	462a      	mov	r2, r5
 8008100:	4621      	mov	r1, r4
 8008102:	f7fe fa26 	bl	8006552 <memset>
 8008106:	e7f4      	b.n	80080f2 <_calloc_r+0x12>

08008108 <__ascii_mbtowc>:
 8008108:	b082      	sub	sp, #8
 800810a:	b901      	cbnz	r1, 800810e <__ascii_mbtowc+0x6>
 800810c:	a901      	add	r1, sp, #4
 800810e:	b142      	cbz	r2, 8008122 <__ascii_mbtowc+0x1a>
 8008110:	b14b      	cbz	r3, 8008126 <__ascii_mbtowc+0x1e>
 8008112:	7813      	ldrb	r3, [r2, #0]
 8008114:	600b      	str	r3, [r1, #0]
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	1e10      	subs	r0, r2, #0
 800811a:	bf18      	it	ne
 800811c:	2001      	movne	r0, #1
 800811e:	b002      	add	sp, #8
 8008120:	4770      	bx	lr
 8008122:	4610      	mov	r0, r2
 8008124:	e7fb      	b.n	800811e <__ascii_mbtowc+0x16>
 8008126:	f06f 0001 	mvn.w	r0, #1
 800812a:	e7f8      	b.n	800811e <__ascii_mbtowc+0x16>

0800812c <_realloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	4680      	mov	r8, r0
 8008132:	4614      	mov	r4, r2
 8008134:	460e      	mov	r6, r1
 8008136:	b921      	cbnz	r1, 8008142 <_realloc_r+0x16>
 8008138:	4611      	mov	r1, r2
 800813a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813e:	f7ff b973 	b.w	8007428 <_malloc_r>
 8008142:	b92a      	cbnz	r2, 8008150 <_realloc_r+0x24>
 8008144:	f7ff f900 	bl	8007348 <_free_r>
 8008148:	4625      	mov	r5, r4
 800814a:	4628      	mov	r0, r5
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	f000 f841 	bl	80081d6 <_malloc_usable_size_r>
 8008154:	4284      	cmp	r4, r0
 8008156:	4607      	mov	r7, r0
 8008158:	d802      	bhi.n	8008160 <_realloc_r+0x34>
 800815a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800815e:	d812      	bhi.n	8008186 <_realloc_r+0x5a>
 8008160:	4621      	mov	r1, r4
 8008162:	4640      	mov	r0, r8
 8008164:	f7ff f960 	bl	8007428 <_malloc_r>
 8008168:	4605      	mov	r5, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	d0ed      	beq.n	800814a <_realloc_r+0x1e>
 800816e:	42bc      	cmp	r4, r7
 8008170:	4622      	mov	r2, r4
 8008172:	4631      	mov	r1, r6
 8008174:	bf28      	it	cs
 8008176:	463a      	movcs	r2, r7
 8008178:	f7ff ff86 	bl	8008088 <memcpy>
 800817c:	4631      	mov	r1, r6
 800817e:	4640      	mov	r0, r8
 8008180:	f7ff f8e2 	bl	8007348 <_free_r>
 8008184:	e7e1      	b.n	800814a <_realloc_r+0x1e>
 8008186:	4635      	mov	r5, r6
 8008188:	e7df      	b.n	800814a <_realloc_r+0x1e>

0800818a <__ascii_wctomb>:
 800818a:	4603      	mov	r3, r0
 800818c:	4608      	mov	r0, r1
 800818e:	b141      	cbz	r1, 80081a2 <__ascii_wctomb+0x18>
 8008190:	2aff      	cmp	r2, #255	; 0xff
 8008192:	d904      	bls.n	800819e <__ascii_wctomb+0x14>
 8008194:	228a      	movs	r2, #138	; 0x8a
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	2001      	movs	r0, #1
 80081a0:	700a      	strb	r2, [r1, #0]
 80081a2:	4770      	bx	lr

080081a4 <fiprintf>:
 80081a4:	b40e      	push	{r1, r2, r3}
 80081a6:	b503      	push	{r0, r1, lr}
 80081a8:	4601      	mov	r1, r0
 80081aa:	ab03      	add	r3, sp, #12
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <fiprintf+0x20>)
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	6800      	ldr	r0, [r0, #0]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f000 f83d 	bl	8008234 <_vfiprintf_r>
 80081ba:	b002      	add	sp, #8
 80081bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c0:	b003      	add	sp, #12
 80081c2:	4770      	bx	lr
 80081c4:	20000070 	.word	0x20000070

080081c8 <abort>:
 80081c8:	2006      	movs	r0, #6
 80081ca:	b508      	push	{r3, lr}
 80081cc:	f000 fa0a 	bl	80085e4 <raise>
 80081d0:	2001      	movs	r0, #1
 80081d2:	f7fa f93e 	bl	8002452 <_exit>

080081d6 <_malloc_usable_size_r>:
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	1f18      	subs	r0, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbc      	itt	lt
 80081e0:	580b      	ldrlt	r3, [r1, r0]
 80081e2:	18c0      	addlt	r0, r0, r3
 80081e4:	4770      	bx	lr

080081e6 <__sfputc_r>:
 80081e6:	6893      	ldr	r3, [r2, #8]
 80081e8:	b410      	push	{r4}
 80081ea:	3b01      	subs	r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	6093      	str	r3, [r2, #8]
 80081f0:	da07      	bge.n	8008202 <__sfputc_r+0x1c>
 80081f2:	6994      	ldr	r4, [r2, #24]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	db01      	blt.n	80081fc <__sfputc_r+0x16>
 80081f8:	290a      	cmp	r1, #10
 80081fa:	d102      	bne.n	8008202 <__sfputc_r+0x1c>
 80081fc:	bc10      	pop	{r4}
 80081fe:	f000 b933 	b.w	8008468 <__swbuf_r>
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	1c58      	adds	r0, r3, #1
 8008206:	6010      	str	r0, [r2, #0]
 8008208:	7019      	strb	r1, [r3, #0]
 800820a:	4608      	mov	r0, r1
 800820c:	bc10      	pop	{r4}
 800820e:	4770      	bx	lr

08008210 <__sfputs_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	4614      	mov	r4, r2
 8008218:	18d5      	adds	r5, r2, r3
 800821a:	42ac      	cmp	r4, r5
 800821c:	d101      	bne.n	8008222 <__sfputs_r+0x12>
 800821e:	2000      	movs	r0, #0
 8008220:	e007      	b.n	8008232 <__sfputs_r+0x22>
 8008222:	463a      	mov	r2, r7
 8008224:	4630      	mov	r0, r6
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	f7ff ffdc 	bl	80081e6 <__sfputc_r>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d1f3      	bne.n	800821a <__sfputs_r+0xa>
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008234 <_vfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	460d      	mov	r5, r1
 800823a:	4614      	mov	r4, r2
 800823c:	4698      	mov	r8, r3
 800823e:	4606      	mov	r6, r0
 8008240:	b09d      	sub	sp, #116	; 0x74
 8008242:	b118      	cbz	r0, 800824c <_vfiprintf_r+0x18>
 8008244:	6a03      	ldr	r3, [r0, #32]
 8008246:	b90b      	cbnz	r3, 800824c <_vfiprintf_r+0x18>
 8008248:	f7fe f8ea 	bl	8006420 <__sinit>
 800824c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824e:	07d9      	lsls	r1, r3, #31
 8008250:	d405      	bmi.n	800825e <_vfiprintf_r+0x2a>
 8008252:	89ab      	ldrh	r3, [r5, #12]
 8008254:	059a      	lsls	r2, r3, #22
 8008256:	d402      	bmi.n	800825e <_vfiprintf_r+0x2a>
 8008258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800825a:	f7fe f9f8 	bl	800664e <__retarget_lock_acquire_recursive>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	071b      	lsls	r3, r3, #28
 8008262:	d501      	bpl.n	8008268 <_vfiprintf_r+0x34>
 8008264:	692b      	ldr	r3, [r5, #16]
 8008266:	b99b      	cbnz	r3, 8008290 <_vfiprintf_r+0x5c>
 8008268:	4629      	mov	r1, r5
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f93a 	bl	80084e4 <__swsetup_r>
 8008270:	b170      	cbz	r0, 8008290 <_vfiprintf_r+0x5c>
 8008272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008274:	07dc      	lsls	r4, r3, #31
 8008276:	d504      	bpl.n	8008282 <_vfiprintf_r+0x4e>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	b01d      	add	sp, #116	; 0x74
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	0598      	lsls	r0, r3, #22
 8008286:	d4f7      	bmi.n	8008278 <_vfiprintf_r+0x44>
 8008288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828a:	f7fe f9e1 	bl	8006650 <__retarget_lock_release_recursive>
 800828e:	e7f3      	b.n	8008278 <_vfiprintf_r+0x44>
 8008290:	2300      	movs	r3, #0
 8008292:	9309      	str	r3, [sp, #36]	; 0x24
 8008294:	2320      	movs	r3, #32
 8008296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829a:	2330      	movs	r3, #48	; 0x30
 800829c:	f04f 0901 	mov.w	r9, #1
 80082a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008454 <_vfiprintf_r+0x220>
 80082a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ac:	4623      	mov	r3, r4
 80082ae:	469a      	mov	sl, r3
 80082b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b4:	b10a      	cbz	r2, 80082ba <_vfiprintf_r+0x86>
 80082b6:	2a25      	cmp	r2, #37	; 0x25
 80082b8:	d1f9      	bne.n	80082ae <_vfiprintf_r+0x7a>
 80082ba:	ebba 0b04 	subs.w	fp, sl, r4
 80082be:	d00b      	beq.n	80082d8 <_vfiprintf_r+0xa4>
 80082c0:	465b      	mov	r3, fp
 80082c2:	4622      	mov	r2, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7ff ffa2 	bl	8008210 <__sfputs_r>
 80082cc:	3001      	adds	r0, #1
 80082ce:	f000 80a9 	beq.w	8008424 <_vfiprintf_r+0x1f0>
 80082d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d4:	445a      	add	r2, fp
 80082d6:	9209      	str	r2, [sp, #36]	; 0x24
 80082d8:	f89a 3000 	ldrb.w	r3, [sl]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80a1 	beq.w	8008424 <_vfiprintf_r+0x1f0>
 80082e2:	2300      	movs	r3, #0
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ec:	f10a 0a01 	add.w	sl, sl, #1
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	9307      	str	r3, [sp, #28]
 80082f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f8:	931a      	str	r3, [sp, #104]	; 0x68
 80082fa:	4654      	mov	r4, sl
 80082fc:	2205      	movs	r2, #5
 80082fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008302:	4854      	ldr	r0, [pc, #336]	; (8008454 <_vfiprintf_r+0x220>)
 8008304:	f7fe f9a5 	bl	8006652 <memchr>
 8008308:	9a04      	ldr	r2, [sp, #16]
 800830a:	b9d8      	cbnz	r0, 8008344 <_vfiprintf_r+0x110>
 800830c:	06d1      	lsls	r1, r2, #27
 800830e:	bf44      	itt	mi
 8008310:	2320      	movmi	r3, #32
 8008312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008316:	0713      	lsls	r3, r2, #28
 8008318:	bf44      	itt	mi
 800831a:	232b      	movmi	r3, #43	; 0x2b
 800831c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008320:	f89a 3000 	ldrb.w	r3, [sl]
 8008324:	2b2a      	cmp	r3, #42	; 0x2a
 8008326:	d015      	beq.n	8008354 <_vfiprintf_r+0x120>
 8008328:	4654      	mov	r4, sl
 800832a:	2000      	movs	r0, #0
 800832c:	f04f 0c0a 	mov.w	ip, #10
 8008330:	9a07      	ldr	r2, [sp, #28]
 8008332:	4621      	mov	r1, r4
 8008334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008338:	3b30      	subs	r3, #48	; 0x30
 800833a:	2b09      	cmp	r3, #9
 800833c:	d94d      	bls.n	80083da <_vfiprintf_r+0x1a6>
 800833e:	b1b0      	cbz	r0, 800836e <_vfiprintf_r+0x13a>
 8008340:	9207      	str	r2, [sp, #28]
 8008342:	e014      	b.n	800836e <_vfiprintf_r+0x13a>
 8008344:	eba0 0308 	sub.w	r3, r0, r8
 8008348:	fa09 f303 	lsl.w	r3, r9, r3
 800834c:	4313      	orrs	r3, r2
 800834e:	46a2      	mov	sl, r4
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	e7d2      	b.n	80082fa <_vfiprintf_r+0xc6>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1d19      	adds	r1, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9103      	str	r1, [sp, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfbb      	ittet	lt
 8008360:	425b      	neglt	r3, r3
 8008362:	f042 0202 	orrlt.w	r2, r2, #2
 8008366:	9307      	strge	r3, [sp, #28]
 8008368:	9307      	strlt	r3, [sp, #28]
 800836a:	bfb8      	it	lt
 800836c:	9204      	strlt	r2, [sp, #16]
 800836e:	7823      	ldrb	r3, [r4, #0]
 8008370:	2b2e      	cmp	r3, #46	; 0x2e
 8008372:	d10c      	bne.n	800838e <_vfiprintf_r+0x15a>
 8008374:	7863      	ldrb	r3, [r4, #1]
 8008376:	2b2a      	cmp	r3, #42	; 0x2a
 8008378:	d134      	bne.n	80083e4 <_vfiprintf_r+0x1b0>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	3402      	adds	r4, #2
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9203      	str	r2, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfb8      	it	lt
 8008388:	f04f 33ff 	movlt.w	r3, #4294967295
 800838c:	9305      	str	r3, [sp, #20]
 800838e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008458 <_vfiprintf_r+0x224>
 8008392:	2203      	movs	r2, #3
 8008394:	4650      	mov	r0, sl
 8008396:	7821      	ldrb	r1, [r4, #0]
 8008398:	f7fe f95b 	bl	8006652 <memchr>
 800839c:	b138      	cbz	r0, 80083ae <_vfiprintf_r+0x17a>
 800839e:	2240      	movs	r2, #64	; 0x40
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	eba0 000a 	sub.w	r0, r0, sl
 80083a6:	4082      	lsls	r2, r0
 80083a8:	4313      	orrs	r3, r2
 80083aa:	3401      	adds	r4, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	2206      	movs	r2, #6
 80083b4:	4829      	ldr	r0, [pc, #164]	; (800845c <_vfiprintf_r+0x228>)
 80083b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ba:	f7fe f94a 	bl	8006652 <memchr>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d03f      	beq.n	8008442 <_vfiprintf_r+0x20e>
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <_vfiprintf_r+0x22c>)
 80083c4:	bb1b      	cbnz	r3, 800840e <_vfiprintf_r+0x1da>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	3308      	adds	r3, #8
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	443b      	add	r3, r7
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	e768      	b.n	80082ac <_vfiprintf_r+0x78>
 80083da:	460c      	mov	r4, r1
 80083dc:	2001      	movs	r0, #1
 80083de:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e2:	e7a6      	b.n	8008332 <_vfiprintf_r+0xfe>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f04f 0c0a 	mov.w	ip, #10
 80083ea:	4619      	mov	r1, r3
 80083ec:	3401      	adds	r4, #1
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	4620      	mov	r0, r4
 80083f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f6:	3a30      	subs	r2, #48	; 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d903      	bls.n	8008404 <_vfiprintf_r+0x1d0>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0c6      	beq.n	800838e <_vfiprintf_r+0x15a>
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	e7c4      	b.n	800838e <_vfiprintf_r+0x15a>
 8008404:	4604      	mov	r4, r0
 8008406:	2301      	movs	r3, #1
 8008408:	fb0c 2101 	mla	r1, ip, r1, r2
 800840c:	e7f0      	b.n	80083f0 <_vfiprintf_r+0x1bc>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4630      	mov	r0, r6
 8008416:	4b13      	ldr	r3, [pc, #76]	; (8008464 <_vfiprintf_r+0x230>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	f7fd fbb3 	bl	8005b84 <_printf_float>
 800841e:	4607      	mov	r7, r0
 8008420:	1c78      	adds	r0, r7, #1
 8008422:	d1d6      	bne.n	80083d2 <_vfiprintf_r+0x19e>
 8008424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x202>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x202>
 8008430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008432:	f7fe f90d 	bl	8006650 <__retarget_lock_release_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	065b      	lsls	r3, r3, #25
 800843a:	f53f af1d 	bmi.w	8008278 <_vfiprintf_r+0x44>
 800843e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008440:	e71c      	b.n	800827c <_vfiprintf_r+0x48>
 8008442:	ab03      	add	r3, sp, #12
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	462a      	mov	r2, r5
 8008448:	4630      	mov	r0, r6
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <_vfiprintf_r+0x230>)
 800844c:	a904      	add	r1, sp, #16
 800844e:	f7fd fe39 	bl	80060c4 <_printf_i>
 8008452:	e7e4      	b.n	800841e <_vfiprintf_r+0x1ea>
 8008454:	0800899c 	.word	0x0800899c
 8008458:	080089a2 	.word	0x080089a2
 800845c:	080089a6 	.word	0x080089a6
 8008460:	08005b85 	.word	0x08005b85
 8008464:	08008211 	.word	0x08008211

08008468 <__swbuf_r>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	460e      	mov	r6, r1
 800846c:	4614      	mov	r4, r2
 800846e:	4605      	mov	r5, r0
 8008470:	b118      	cbz	r0, 800847a <__swbuf_r+0x12>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <__swbuf_r+0x12>
 8008476:	f7fd ffd3 	bl	8006420 <__sinit>
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	071a      	lsls	r2, r3, #28
 8008482:	d525      	bpl.n	80084d0 <__swbuf_r+0x68>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	b31b      	cbz	r3, 80084d0 <__swbuf_r+0x68>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	6922      	ldr	r2, [r4, #16]
 800848c:	b2f6      	uxtb	r6, r6
 800848e:	1a98      	subs	r0, r3, r2
 8008490:	6963      	ldr	r3, [r4, #20]
 8008492:	4637      	mov	r7, r6
 8008494:	4283      	cmp	r3, r0
 8008496:	dc04      	bgt.n	80084a2 <__swbuf_r+0x3a>
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fda2 	bl	8007fe4 <_fflush_r>
 80084a0:	b9e0      	cbnz	r0, 80084dc <__swbuf_r+0x74>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	701e      	strb	r6, [r3, #0]
 80084b0:	6962      	ldr	r2, [r4, #20]
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d004      	beq.n	80084c2 <__swbuf_r+0x5a>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	07db      	lsls	r3, r3, #31
 80084bc:	d506      	bpl.n	80084cc <__swbuf_r+0x64>
 80084be:	2e0a      	cmp	r6, #10
 80084c0:	d104      	bne.n	80084cc <__swbuf_r+0x64>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff fd8d 	bl	8007fe4 <_fflush_r>
 80084ca:	b938      	cbnz	r0, 80084dc <__swbuf_r+0x74>
 80084cc:	4638      	mov	r0, r7
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f806 	bl	80084e4 <__swsetup_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0d5      	beq.n	8008488 <__swbuf_r+0x20>
 80084dc:	f04f 37ff 	mov.w	r7, #4294967295
 80084e0:	e7f4      	b.n	80084cc <__swbuf_r+0x64>
	...

080084e4 <__swsetup_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <__swsetup_r+0xac>)
 80084e8:	4605      	mov	r5, r0
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	460c      	mov	r4, r1
 80084ee:	b118      	cbz	r0, 80084f8 <__swsetup_r+0x14>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <__swsetup_r+0x14>
 80084f4:	f7fd ff94 	bl	8006420 <__sinit>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fe:	0718      	lsls	r0, r3, #28
 8008500:	d422      	bmi.n	8008548 <__swsetup_r+0x64>
 8008502:	06d9      	lsls	r1, r3, #27
 8008504:	d407      	bmi.n	8008516 <__swsetup_r+0x32>
 8008506:	2309      	movs	r3, #9
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	e034      	b.n	8008580 <__swsetup_r+0x9c>
 8008516:	0758      	lsls	r0, r3, #29
 8008518:	d512      	bpl.n	8008540 <__swsetup_r+0x5c>
 800851a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800851c:	b141      	cbz	r1, 8008530 <__swsetup_r+0x4c>
 800851e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008522:	4299      	cmp	r1, r3
 8008524:	d002      	beq.n	800852c <__swsetup_r+0x48>
 8008526:	4628      	mov	r0, r5
 8008528:	f7fe ff0e 	bl	8007348 <_free_r>
 800852c:	2300      	movs	r3, #0
 800852e:	6363      	str	r3, [r4, #52]	; 0x34
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	2300      	movs	r3, #0
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f043 0308 	orr.w	r3, r3, #8
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b94b      	cbnz	r3, 8008560 <__swsetup_r+0x7c>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008556:	d003      	beq.n	8008560 <__swsetup_r+0x7c>
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f883 	bl	8008666 <__smakebuf_r>
 8008560:	89a0      	ldrh	r0, [r4, #12]
 8008562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008566:	f010 0301 	ands.w	r3, r0, #1
 800856a:	d00a      	beq.n	8008582 <__swsetup_r+0x9e>
 800856c:	2300      	movs	r3, #0
 800856e:	60a3      	str	r3, [r4, #8]
 8008570:	6963      	ldr	r3, [r4, #20]
 8008572:	425b      	negs	r3, r3
 8008574:	61a3      	str	r3, [r4, #24]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	b943      	cbnz	r3, 800858c <__swsetup_r+0xa8>
 800857a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800857e:	d1c4      	bne.n	800850a <__swsetup_r+0x26>
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	0781      	lsls	r1, r0, #30
 8008584:	bf58      	it	pl
 8008586:	6963      	ldrpl	r3, [r4, #20]
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	e7f4      	b.n	8008576 <__swsetup_r+0x92>
 800858c:	2000      	movs	r0, #0
 800858e:	e7f7      	b.n	8008580 <__swsetup_r+0x9c>
 8008590:	20000070 	.word	0x20000070

08008594 <_raise_r>:
 8008594:	291f      	cmp	r1, #31
 8008596:	b538      	push	{r3, r4, r5, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	d904      	bls.n	80085a8 <_raise_r+0x14>
 800859e:	2316      	movs	r3, #22
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085aa:	b112      	cbz	r2, 80085b2 <_raise_r+0x1e>
 80085ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085b0:	b94b      	cbnz	r3, 80085c6 <_raise_r+0x32>
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f830 	bl	8008618 <_getpid_r>
 80085b8:	462a      	mov	r2, r5
 80085ba:	4601      	mov	r1, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c2:	f000 b817 	b.w	80085f4 <_kill_r>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d00a      	beq.n	80085e0 <_raise_r+0x4c>
 80085ca:	1c59      	adds	r1, r3, #1
 80085cc:	d103      	bne.n	80085d6 <_raise_r+0x42>
 80085ce:	2316      	movs	r3, #22
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	2001      	movs	r0, #1
 80085d4:	e7e7      	b.n	80085a6 <_raise_r+0x12>
 80085d6:	2400      	movs	r4, #0
 80085d8:	4628      	mov	r0, r5
 80085da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085de:	4798      	blx	r3
 80085e0:	2000      	movs	r0, #0
 80085e2:	e7e0      	b.n	80085a6 <_raise_r+0x12>

080085e4 <raise>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <raise+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f7ff bfd3 	b.w	8008594 <_raise_r>
 80085ee:	bf00      	nop
 80085f0:	20000070 	.word	0x20000070

080085f4 <_kill_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_kill_r+0x20>)
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	f7f9 ff16 	bl	8002432 <_kill>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d102      	bne.n	8008610 <_kill_r+0x1c>
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	b103      	cbz	r3, 8008610 <_kill_r+0x1c>
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	bd38      	pop	{r3, r4, r5, pc}
 8008612:	bf00      	nop
 8008614:	20000594 	.word	0x20000594

08008618 <_getpid_r>:
 8008618:	f7f9 bf04 	b.w	8002424 <_getpid>

0800861c <__swhatbuf_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	4615      	mov	r5, r2
 8008626:	2900      	cmp	r1, #0
 8008628:	461e      	mov	r6, r3
 800862a:	b096      	sub	sp, #88	; 0x58
 800862c:	da0c      	bge.n	8008648 <__swhatbuf_r+0x2c>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	2100      	movs	r1, #0
 8008632:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008636:	bf0c      	ite	eq
 8008638:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800863c:	2340      	movne	r3, #64	; 0x40
 800863e:	2000      	movs	r0, #0
 8008640:	6031      	str	r1, [r6, #0]
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	b016      	add	sp, #88	; 0x58
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	466a      	mov	r2, sp
 800864a:	f000 f849 	bl	80086e0 <_fstat_r>
 800864e:	2800      	cmp	r0, #0
 8008650:	dbed      	blt.n	800862e <__swhatbuf_r+0x12>
 8008652:	9901      	ldr	r1, [sp, #4]
 8008654:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008658:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800865c:	4259      	negs	r1, r3
 800865e:	4159      	adcs	r1, r3
 8008660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008664:	e7eb      	b.n	800863e <__swhatbuf_r+0x22>

08008666 <__smakebuf_r>:
 8008666:	898b      	ldrh	r3, [r1, #12]
 8008668:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800866a:	079d      	lsls	r5, r3, #30
 800866c:	4606      	mov	r6, r0
 800866e:	460c      	mov	r4, r1
 8008670:	d507      	bpl.n	8008682 <__smakebuf_r+0x1c>
 8008672:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	2301      	movs	r3, #1
 800867c:	6163      	str	r3, [r4, #20]
 800867e:	b002      	add	sp, #8
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	466a      	mov	r2, sp
 8008684:	ab01      	add	r3, sp, #4
 8008686:	f7ff ffc9 	bl	800861c <__swhatbuf_r>
 800868a:	9900      	ldr	r1, [sp, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	4630      	mov	r0, r6
 8008690:	f7fe feca 	bl	8007428 <_malloc_r>
 8008694:	b948      	cbnz	r0, 80086aa <__smakebuf_r+0x44>
 8008696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869a:	059a      	lsls	r2, r3, #22
 800869c:	d4ef      	bmi.n	800867e <__smakebuf_r+0x18>
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	f043 0302 	orr.w	r3, r3, #2
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	e7e3      	b.n	8008672 <__smakebuf_r+0xc>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	6020      	str	r0, [r4, #0]
 80086ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	6120      	str	r0, [r4, #16]
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	b15b      	cbz	r3, 80086d6 <__smakebuf_r+0x70>
 80086be:	4630      	mov	r0, r6
 80086c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c4:	f000 f81e 	bl	8008704 <_isatty_r>
 80086c8:	b128      	cbz	r0, 80086d6 <__smakebuf_r+0x70>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	431d      	orrs	r5, r3
 80086da:	81a5      	strh	r5, [r4, #12]
 80086dc:	e7cf      	b.n	800867e <__smakebuf_r+0x18>
	...

080086e0 <_fstat_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	2300      	movs	r3, #0
 80086e4:	4d06      	ldr	r5, [pc, #24]	; (8008700 <_fstat_r+0x20>)
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	f7f9 fefe 	bl	80024ee <_fstat>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d102      	bne.n	80086fc <_fstat_r+0x1c>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	b103      	cbz	r3, 80086fc <_fstat_r+0x1c>
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	20000594 	.word	0x20000594

08008704 <_isatty_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	2300      	movs	r3, #0
 8008708:	4d05      	ldr	r5, [pc, #20]	; (8008720 <_isatty_r+0x1c>)
 800870a:	4604      	mov	r4, r0
 800870c:	4608      	mov	r0, r1
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	f7f9 fefc 	bl	800250c <_isatty>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_isatty_r+0x1a>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_isatty_r+0x1a>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20000594 	.word	0x20000594

08008724 <_init>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr

08008730 <_fini>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	bf00      	nop
 8008734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008736:	bc08      	pop	{r3}
 8008738:	469e      	mov	lr, r3
 800873a:	4770      	bx	lr
